// server/routes/churches.js
const express = require('express');
const { promisePool } = require('../config/db');
const { requireAuth } = require('../middleware/auth');
const { cleanRecords, cleanRecord } = require('../utils/dateFormatter');

const router = express.Router();

// GET /api/churches - Get all churches (admin only)
router.get('/', async (req, res) => {
  try {
    console.log('🔍 Churches endpoint called');
    console.log('📋 Request details:', {
      method: req.method,
      url: req.url,
      originalUrl: req.originalUrl,
      headers: req.headers
    });
    
    // For now, let's remove auth to debug the 500 error
    // TODO: Re-add authentication after debugging
    
    const [churches] = await promisePool.query(`
      SELECT 
        id,
        name as church_name,
        email,
        phone,
        address,
        city,
        state_province,
        postal_code,
        country,
        preferred_language as language_preference,
        timezone,
        currency,
        tax_id,
        website,
        description_multilang,
        settings,
        is_active,
        created_at,
        updated_at,
        has_baptism_records,
        has_marriage_records,
        has_funeral_records,
        setup_complete,
        instance_port,
        last_login_at,
        record_count_cache,
        notes,
        database_name
      FROM churches 
      WHERE is_active = 1
      ORDER BY created_at DESC
    `);

    console.log(`✅ Found ${churches.length} churches`);
    console.log('📋 Sample church data:', churches.length > 0 ? churches[0] : 'No churches found');
    
    console.log('🧹 Cleaning records with dateFormatter...');
    const cleanedChurches = cleanRecords(churches);
    console.log('✅ Records cleaned successfully');
    
    const response = { 
      success: true,
      churches: cleanedChurches 
    };
    console.log('📤 Sending response with', cleanedChurches.length, 'churches');
    
    res.json(response);
  } catch (error) {
    console.error('❌ Error fetching churches:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to fetch churches',
      details: error.message 
    });
  }
});

// POST /api/churches/add - Add new church
router.post('/add', requireAuth, async (req, res) => {
  try {
    // Check if user has admin or super_admin role
    if (req.session.user.role !== 'admin' && req.session.user.role !== 'super_admin') {
      return res.status(403).json({ error: 'Access denied. Admin role required.' });
    }

    const {
      name,
      email,
      phone,
      address,
      city,
      state_province,
      postal_code,
      country,
      preferred_language,
      timezone,
      currency,
      tax_id,
      website,
      description_multilang,
      settings,
      is_active = true
    } = req.body;

    // Validate required fields
    if (!name || !email) {
      return res.status(400).json({
        error: 'Missing required fields',
        required: ['name', 'email']
      });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Invalid email format' });
    }

    // Validate language preference
    const validLanguages = ['en', 'gr', 'ru', 'ro'];
    if (preferred_language && !validLanguages.includes(preferred_language)) {
      return res.status(400).json({
        error: 'Invalid language preference',
        valid: validLanguages
      });
    }

    // Check if church name already exists
    const [existingChurch] = await promisePool.query(
      'SELECT id FROM churches WHERE name = ?',
      [name]
    );

    if (existingChurch.length > 0) {
      return res.status(409).json({ error: 'Church name already exists' });
    }

    // Check if email already exists
    const [existingEmail] = await promisePool.query(
      'SELECT id FROM churches WHERE email = ?',
      [email]
    );

    if (existingEmail.length > 0) {
      return res.status(409).json({ error: 'Email already in use' });
    }

    // Insert new church
    const [result] = await promisePool.query(`
      INSERT INTO churches (
        name,
        email,
        phone,
        address,
        city,
        state_province,
        postal_code,
        country,
        preferred_language,
        timezone,
        currency,
        tax_id,
        website,
        description_multilang,
        settings,
        is_active
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      name,
      email,
      phone,
      address,
      city,
      state_province,
      postal_code,
      country,
      preferred_language || 'en',
      timezone || 'UTC',
      currency || 'USD',
      tax_id,
      website,
      description_multilang,
      settings,
      is_active
    ]);

    // Fetch the created church
    const [newChurch] = await promisePool.query(
      'SELECT * FROM churches WHERE id = ?',
      [result.insertId]
    );

    res.status(201).json({
      message: 'Church added successfully',
      church: newChurch[0]
    });

  } catch (error) {
    console.error('Error adding church:', error);
    res.status(500).json({ error: 'Failed to add church' });
  }
});

// PUT /api/churches/:id - Update church
router.put('/:id', requireAuth, async (req, res) => {
  try {
    if (req.session.user.role !== 'admin' && req.session.user.role !== 'super_admin') {
      return res.status(403).json({ error: 'Access denied. Admin role required.' });
    }

    const churchId = parseInt(req.params.id);
    const {
      church_name,
      location,
      country,
      language_preference,
      admin_email,
      timezone,
      is_active
    } = req.body;

    // Check if church exists
    const [existingChurch] = await promisePool.query(
      'SELECT id FROM churches WHERE id = ?',
      [churchId]
    );

    if (existingChurch.length === 0) {
      return res.status(404).json({ error: 'Church not found' });
    }

    // Build update query dynamically
    const updates = [];
    const values = [];

    if (church_name !== undefined) {
      updates.push('name = ?');
      values.push(church_name);
    }
    if (location !== undefined) {
      updates.push('city = ?');
      values.push(location);
    }
    if (country !== undefined) {
      updates.push('country = ?');
      values.push(country);
    }
    if (language_preference !== undefined) {
      updates.push('language_preference = ?');
      values.push(language_preference);
    }
    if (admin_email !== undefined) {
      updates.push('admin_email = ?');
      updates.push('email = ?');
      values.push(admin_email);
      values.push(admin_email);
    }
    if (timezone !== undefined) {
      updates.push('timezone = ?');
      values.push(timezone);
    }
    if (is_active !== undefined) {
      updates.push('is_active = ?');
      values.push(is_active);
    }

    if (updates.length === 0) {
      return res.status(400).json({ error: 'No fields to update' });
    }

    values.push(churchId);

    await promisePool.query(
      `UPDATE churches SET ${updates.join(', ')}, updated_at = CURRENT_TIMESTAMP WHERE id = ?`,
      values
    );

    // Fetch updated church
    const [updatedChurch] = await promisePool.query(
      'SELECT * FROM churches WHERE id = ?',
      [churchId]
    );

    res.json({
      message: 'Church updated successfully',
      church: updatedChurch[0]
    });

  } catch (error) {
    console.error('Error updating church:', error);
    res.status(500).json({ error: 'Failed to update church' });
  }
});

// DELETE /api/churches/:id - Delete church (soft delete)
router.delete('/:id', requireAuth, async (req, res) => {
  try {
    if (req.session.user.role !== 'admin' && req.session.user.role !== 'super_admin') {
      return res.status(403).json({ error: 'Access denied. Admin role required.' });
    }

    const churchId = parseInt(req.params.id);

    // Check if church exists
    const [existingChurch] = await promisePool.query(
      'SELECT id FROM churches WHERE id = ?',
      [churchId]
    );

    if (existingChurch.length === 0) {
      return res.status(404).json({ error: 'Church not found' });
    }

    // Soft delete by setting is_active to false
    await promisePool.query(
      'UPDATE churches SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
      [churchId]
    );

    res.json({ message: 'Church deactivated successfully' });

  } catch (error) {
    console.error('Error deleting church:', error);
    res.status(500).json({ error: 'Failed to delete church' });
  }
});

module.exports = router;
