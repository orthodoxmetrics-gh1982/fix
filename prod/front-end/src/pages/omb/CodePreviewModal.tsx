import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Tabs,
  Tab,
  Paper,
  Chip,
  Alert,
  CircularProgress
} from '@mui/material';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { BoundComponent } from './types';

interface CodePreviewModalProps {
  open: boolean;
  onClose: () => void;
  component: BoundComponent | null;
  onGenerate: (component: BoundComponent, commitToGit: boolean) => void;
  isGenerating: boolean;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`code-tabpanel-${index}`}
      aria-labelledby={`code-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const CodePreviewModal: React.FC<CodePreviewModalProps> = ({
  open,
  onClose,
  component,
  onGenerate,
  isGenerating
}) => {
  const [tabValue, setTabValue] = useState(0);
  const [previewData, setPreviewData] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [commitToGit, setCommitToGit] = useState(false);

  useEffect(() => {
    if (open && component) {
      loadPreview();
    }
  }, [open, component]);

  const loadPreview = async () => {
    if (!component) return;

    setIsLoading(true);
    try {
      const response = await fetch('/api/omb/preview-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ component }),
      });

      if (response.ok) {
        const result = await response.json();
        setPreviewData(result);
      } else {
        throw new Error('Failed to load preview');
      }
    } catch (error) {
      console.error('Failed to load preview:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleGenerate = () => {
    if (component) {
      onGenerate(component, commitToGit);
    }
  };

  const getFileContent = (fileType: string) => {
    if (!previewData) return '';
    
    // This would be the actual generated content
    // For now, we'll show placeholder content
    switch (fileType) {
      case 'component':
        return `// Auto-generated component: ${component?.name}
import React from 'react';
import { Box, Typography, Paper } from '@mui/material';

export default function ${component?.name?.replace(/[^a-zA-Z0-9]/g, '')}() {
  return (
    <Paper elevation={2} sx={{ p: 2 }}>
      <Typography variant="h6">${component?.name}</Typography>
      <Typography variant="body2">${component?.description}</Typography>
    </Paper>
  );
}`;
      case 'api':
        return `// Auto-generated API route: ${component?.route}
const express = require('express');
const router = express.Router();

router.get('${component?.route}', async (req, res) => {
  // Auto-generated API code
  res.json({ success: true, data: [] });
});

module.exports = router;`;
      case 'doc':
        return `# ${component?.name}

**Type**: ${component?.type}  
**Route**: \`${component?.route}\`  
**DB Table**: \`${component?.dbTable}\`  
**Roles**: \`${JSON.stringify(component?.roles)}\`

Generated by OMB Visual Editor.`;
      default:
        return '';
    }
  };

  if (!component) return null;

  return (
    <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
      <DialogTitle>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Typography variant="h6">Code Preview</Typography>
          <Chip label={component.type} color="primary" size="small" />
          <Chip label={component.name} variant="outlined" size="small" />
        </Box>
      </DialogTitle>
      
      <DialogContent>
        {isLoading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
            <CircularProgress />
          </Box>
        ) : (
          <Box>
            <Alert severity="info" sx={{ mb: 2 }}>
              Preview of files that will be generated for component: <strong>{component.name}</strong>
            </Alert>

            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
              <Tabs value={tabValue} onChange={handleTabChange}>
                <Tab label="Component (.tsx)" />
                <Tab label="API Route (.ts)" />
                <Tab label="Documentation (.md)" />
              </Tabs>
            </Box>

            <TabPanel value={tabValue} index={0}>
              <Paper sx={{ p: 2, backgroundColor: '#f5f5f5' }}>
                <Typography variant="subtitle2" gutterBottom>
                  {component.name}.tsx
                </Typography>
                <SyntaxHighlighter
                  language="typescript"
                  style={tomorrow}
                  customStyle={{ margin: 0 }}
                >
                  {getFileContent('component')}
                </SyntaxHighlighter>
              </Paper>
            </TabPanel>

            <TabPanel value={tabValue} index={1}>
              <Paper sx={{ p: 2, backgroundColor: '#f5f5f5' }}>
                <Typography variant="subtitle2" gutterBottom>
                  {component.id}.ts
                </Typography>
                <SyntaxHighlighter
                  language="javascript"
                  style={tomorrow}
                  customStyle={{ margin: 0 }}
                >
                  {getFileContent('api')}
                </SyntaxHighlighter>
              </Paper>
            </TabPanel>

            <TabPanel value={tabValue} index={2}>
              <Paper sx={{ p: 2, backgroundColor: '#f5f5f5' }}>
                <Typography variant="subtitle2" gutterBottom>
                  {component.id}.md
                </Typography>
                <SyntaxHighlighter
                  language="markdown"
                  style={tomorrow}
                  customStyle={{ margin: 0 }}
                >
                  {getFileContent('doc')}
                </SyntaxHighlighter>
              </Paper>
            </TabPanel>
          </Box>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} disabled={isGenerating}>
          Cancel
        </Button>
        <Button
          variant="contained"
          onClick={handleGenerate}
          disabled={isGenerating}
          startIcon={isGenerating ? <CircularProgress size={16} /> : null}
        >
          {isGenerating ? 'Generating...' : 'Generate Code'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default CodePreviewModal; 