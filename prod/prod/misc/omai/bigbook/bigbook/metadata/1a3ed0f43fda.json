{
  "id": "1a3ed0f43fda",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/front-end/src/ai/git/config.ts",
  "relativePath": "front-end/src/ai/git/config.ts",
  "name": "config.ts",
  "extension": ".ts",
  "size": 6509,
  "modified": "2025-07-25T04:38:25.278Z",
  "created": "2025-07-25T04:38:24.449Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 202,
      "characters": 6505,
      "words": 525
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 3
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 72,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 77,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 78,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 79,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 80,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 88,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 89,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 90,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 91,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 94,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 95,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 99,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 102,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 103,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "export interface GitConfig {\r\n  // Repository settings\r\n  repoPath: string;\r\n  remoteOrigin: string;\r\n  defaultBranch: string;\r\n  omaiBranchPrefix: string;\r\n  \r\n  // Authentication\r\n  authToken?: string;\r\n  username?: string;\r\n  email?: string;\r\n  \r\n  // GitOps settings\r\n  autoCommitEnabled: boolean;\r\n  autoCreatePR: boolean;\r\n  autoMergeEnabled: boolean;\r\n  requireApproval: boolean;\r\n  \r\n  // Thresholds\r\n  commitConfidenceThreshold: number;\r\n  prConfidenceThreshold: number;\r\n  \r\n  // Provider settings\r\n  provider: 'github' | 'gitlab' | 'gitea';\r\n  apiBaseUrl?: string;\r\n  \r\n  // Logging\r\n  logFilePath: string;\r\n  enableDetailedLogging: boolean;\r\n}\r\n\r\nexport interface GitProviderConfig {\r\n  name: string;\r\n  apiBaseUrl: string;\r\n  tokenEnvVar: string;\r\n  usernameEnvVar: string;\r\n  emailEnvVar: string;\r\n}\r\n\r\nexport const GIT_PROVIDERS: Record<string, GitProviderConfig> = {\r\n  github: {\r\n    name: 'GitHub',\r\n    apiBaseUrl: 'https://api.github.com',\r\n    tokenEnvVar: 'GITHUB_TOKEN',\r\n    usernameEnvVar: 'GITHUB_USERNAME',\r\n    emailEnvVar: 'GITHUB_EMAIL'\r\n  },\r\n  gitlab: {\r\n    name: 'GitLab',\r\n    apiBaseUrl: 'https://gitlab.com/api/v4',\r\n    tokenEnvVar: 'GITLAB_TOKEN',\r\n    usernameEnvVar: 'GITLAB_USERNAME',\r\n    emailEnvVar: 'GITLAB_EMAIL'\r\n  },\r\n  gitea: {\r\n    name: 'Gitea',\r\n    apiBaseUrl: 'https://gitea.com/api/v1',\r\n    tokenEnvVar: 'GITEA_TOKEN',\r\n    usernameEnvVar: 'GITEA_USERNAME',\r\n    emailEnvVar: 'GITEA_EMAIL'\r\n  }\r\n};\r\n\r\nexport class GitConfigManager {\r\n  private config: GitConfig;\r\n  \r\n  constructor() {\r\n    this.config = this.loadConfig();\r\n  }\r\n  \r\n  private loadConfig(): GitConfig {\r\n    const provider = (process.env.[REDACTED] as 'github' | 'gitlab' | 'gitea') || 'github';\r\n    const providerConfig = GIT_PROVIDERS[provider];\r\n    \r\n    return {\r\n      // Repository settings\r\n      repoPath: process.env.[REDACTED] || '/var/www/orthodoxmetrics',\r\n      remoteOrigin: process.env.[REDACTED] || '',\r\n      defaultBranch: process.env.[REDACTED] || 'main',\r\n      omaiBranchPrefix: process.env.[REDACTED] || 'omai-fixes',\r\n      \r\n      // Authentication\r\n      authToken: process.env[providerConfig.tokenEnvVar],\r\n      username: process.env[providerConfig.usernameEnvVar] || 'omai-bot',\r\n      email: process.env[providerConfig.emailEnvVar] || 'omai@orthodoxmetrics.com',\r\n      \r\n      // GitOps settings\r\n      autoCommitEnabled: process.env.[REDACTED] === 'true',\r\n      autoCreatePR: process.env.[REDACTED] === 'true',\r\n      autoMergeEnabled: process.env.[REDACTED] === 'false', // Default to false for safety\r\n      requireApproval: process.env.[REDACTED] === 'true',\r\n      \r\n      // Thresholds\r\n      commitConfidenceThreshold: parseFloat(process.env.[REDACTED] || '0.7'),\r\n      prConfidenceThreshold: parseFloat(process.env.[REDACTED] || '0.8'),\r\n      \r\n      // Provider settings\r\n      provider,\r\n      apiBaseUrl: process.env.[REDACTED] || providerConfig.apiBaseUrl,\r\n      \r\n      // Logging\r\n      logFilePath: process.env.[REDACTED] || '/logs/omai/gitops.log',\r\n      enableDetailedLogging: process.env.[REDACTED] === 'true'\r\n    };\r\n  }\r\n  \r\n  getConfig(): GitConfig {\r\n    return { ...this.config };\r\n  }\r\n  \r\n  updateConfig(updates: Partial<GitConfig>): void {\r\n    this.config = { ...this.config, ...updates };\r\n  }\r\n  \r\n  isConfigured(): boolean {\r\n    return !!(this.config.repoPath && this.config.remoteOrigin && this.config.authToken);\r\n  }\r\n  \r\n  getProviderConfig(): GitProviderConfig {\r\n    return GIT_PROVIDERS[this.config.provider];\r\n  }\r\n  \r\n  validateConfig(): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    \r\n    if (!this.config.repoPath) {\r\n      errors.push('Repository path is not configured');\r\n    }\r\n    \r\n    if (!this.config.remoteOrigin) {\r\n      errors.push('Remote origin is not configured');\r\n    }\r\n    \r\n    if (!this.config.authToken) {\r\n      errors.push('Authentication token is not configured');\r\n    }\r\n    \r\n    if (!this.config.username || !this.config.email) {\r\n      errors.push('Git user credentials are not configured');\r\n    }\r\n    \r\n    if (this.config.commitConfidenceThreshold < 0 || this.config.commitConfidenceThreshold > 1) {\r\n      errors.push('Commit confidence threshold must be between 0 and 1');\r\n    }\r\n    \r\n    if (this.config.prConfidenceThreshold < 0 || this.config.prConfidenceThreshold > 1) {\r\n      errors.push('PR confidence threshold must be between 0 and 1');\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  }\r\n  \r\n  generateBranchName(componentName: string, date?: Date): string {\r\n    const timestamp = (date || new Date()).toISOString().split('T')[0];\r\n    const sanitizedComponent = componentName.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase();\r\n    return `${this.config.omaiBranchPrefix}/${timestamp}-${sanitizedComponent}`;\r\n  }\r\n  \r\n  generateCommitMessage(componentName: string, issueSummary: string, confidence: number): string {\r\n    const confidencePercent = Math.round(confidence * 100);\r\n    return `fix(${componentName}): OMAI auto-fix - ${issueSummary}\\n\\nConfidence: ${confidencePercent}%\\nGenerated by OMAI autonomous fix engine`;\r\n  }\r\n  \r\n  generatePRTitle(componentName: string, issueSummary: string): string {\r\n    return `ðŸ¤– OMAI Auto-Fix: ${componentName} - ${issueSummary}`;\r\n  }\r\n  \r\n  generatePRDescription(fixData: {\r\n    componentName: string;\r\n    issueSummary: string;\r\n    confidence: number;\r\n    appliedFixes: string[];\r\n    beforeSnapshot?: string;\r\n    afterSnapshot?: string;\r\n    user?: string;\r\n  }): string {\r\n    const confidencePercent = Math.round(fixData.confidence * 100);\r\n    const fixesList = fixData.appliedFixes.map(fix => `- ${fix}`).join('\\n');\r\n    \r\n    return `## ðŸ¤– OMAI Autonomous Fix\r\n\r\n**Component:** ${fixData.componentName}\r\n**Issue:** ${fixData.issueSummary}\r\n**Confidence:** ${confidencePercent}%\r\n${fixData.user ? `**Approved by:** ${fixData.user}` : '**Auto-generated**'}\r\n\r\n### Applied Fixes:\r\n${fixesList}\r\n\r\n### Before/After Snapshots:\r\n${fixData.beforeSnapshot ? `\\n**Before:**\\n\\`\\`\\`json\\n${fixData.beforeSnapshot}\\n\\`\\`\\`` : ''}\r\n${fixData.afterSnapshot ? `\\n**After:**\\n\\`\\`\\`json\\n${fixData.afterSnapshot}\\n\\`\\`\\`` : ''}\r\n\r\n---\r\n*This PR was automatically generated by the OMAI autonomous fix engine.*`;\r\n  }\r\n}\r\n\r\nexport const gitConfigManager = new GitConfigManager(); "
    },
    "complexity": {
      "totalLines": 202,
      "codeLines": 146,
      "commentLines": 18,
      "commentRatio": 0.10975609756097561,
      "averageLineLength": 37.609756097560975
    },
    "lastAnalyzed": "2025-07-28T07:19:58.651Z"
  },
  "contentHash": "6166dc1e21f6f5448d7fb4a2673d2bf217fecb491fabde44d6fe3311d367830f",
  "discoveredAt": "2025-07-28T07:19:58.651Z"
}