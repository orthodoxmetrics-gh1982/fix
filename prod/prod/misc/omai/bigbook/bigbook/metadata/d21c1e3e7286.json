{
  "id": "d21c1e3e7286",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/fix-session-deserialization.sh",
  "relativePath": "server/scripts/fix-session-deserialization.sh",
  "name": "fix-session-deserialization.sh",
  "extension": ".sh",
  "size": 7283,
  "modified": "2025-07-24T14:50:26.364Z",
  "created": "2025-07-24T14:50:26.364Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 233,
      "characters": 7203,
      "words": 792
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "fs",
        "line": 24
      },
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 78
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 79
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 82
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:secret|token)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 123,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 86,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 87,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 88,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 89,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 90,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 118,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 119,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 122,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/bin/bash\n\necho \"🔧 Fixing Session Deserialization Issue\"\necho \"=======================================\"\n\ncd /var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server\n\necho \"🔍 IDENTIFIED ISSUES:\"\necho \"1. Missing req.session.save() after login\"  \necho \"2. Potential cookie configuration issues\"\necho \"3. Session store connection problems\"\necho \"\"\n\necho \"🛠️ APPLYING FIXES...\"\n\n# Fix 1: Update auth.js to add explicit session.save()\necho \"1. Adding explicit session.save() to login route...\"\n\n# Create backup\ncp routes/auth.js routes/auth.js.backup-session-fix\n\n# Add session.save() after setting session data\ncat > fix_auth_session.js << 'EOF'\nconst fs = require('fs');\n\n// Read the current auth.js\nlet authContent = fs.readFileSync('routes/auth.js', 'utf8');\n\n// Find the location where session data is set and add explicit save\nconst sessionSetPattern = /req\\.session\\.lastActivity = new Date\\(\\);/;\nconst replacement = `req.session.lastActivity = new Date();\n\n    // 🔧 FIXED: Explicitly save session to ensure persistence\n    req.session.save((saveErr) => {\n      if (saveErr) {\n        console.error('❌ Error saving session:', saveErr);\n        return res.status(500).json({\n          error: 'Session save failed',\n          code: 'SESSION_SAVE_ERROR'\n        });\n      }\n      \n      console.log('✅ Session saved successfully with ID:', req.sessionID);\n      console.log('✅ Session user:', req.session.user.email);`;\n\nif (authContent.match(sessionSetPattern)) {\n  // Replace the session setting with explicit save\n  authContent = authContent.replace(\n    /req\\.session\\.lastActivity = new Date\\(\\);\\s*console\\.log\\('✅ Session data set successfully'\\);/,\n    replacement\n  );\n  \n  // Also need to close the session.save callback properly\n  authContent = authContent.replace(\n    /console\\.log\\('✅ Login successful for user:', req\\.session\\.user\\.email\\);/,\n    `});  // Close session.save callback\n    \n    console.log('✅ Login successful for user:', req.session.user.email);`\n  );\n  \n  fs.writeFileSync('routes/auth.js', authContent);\n  console.log('   ✅ Added explicit session.save() to auth.js');\n} else {\n  console.log('   ⚠️ Session setting pattern not found - manual fix needed');\n}\nEOF\n\nnode fix_auth_session.js\n\n# Fix 2: Update session configuration for better compatibility\necho \"\"\necho \"2. Updating session configuration...\"\n\ncp config/session.js config/session.js.backup-session-fix\n\ncat > config/session.js << 'EOF'\n// server/config/session.js - FIXED SESSION DESERIALIZATION\nconst session = require('express-session');\nconst MySQLStore = require('express-mysql-session')(session);\n\n// Load environment variables\nrequire('dotenv').config();\n\n// Database connection options for session store\nconst sessionStoreOptions = {\n  host: process.env.[REDACTED] || 'localhost',\n  port: process.env.[REDACTED] || 3306,\n  user: process.env.[REDACTED] || 'orthodoxapps',\n  password: process.env.[REDACTED] || 'Summerof1982@!',\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\n  charset: 'utf8mb4',\n  expiration: 86400000, // 24 hours\n  checkExpirationInterval: 900000, // Check every 15 minutes\n  createDatabaseTable: true,\n  endConnectionOnClose: true,\n  clearExpired: true,\n  schema: {\n    tableName: 'sessions',\n    columnNames: {\n      session_id: 'session_id',\n      expires: 'expires',\n      data: 'data'\n    }\n  }\n};\n\nconst store = new MySQLStore(sessionStoreOptions);\n\nstore.on('error', (error) => {\n  console.error('❌ Session store error:', error);\n});\n\nstore.on('connect', () => {\n  console.log('✅ Session store connected successfully');\n});\n\n// 🔧 FIXED: Dynamic environment detection\nconst isProduction = process.env.[REDACTED] === 'production';\nconst sessionSecret = process.env.[REDACTED] || 'orthodox-metrics-production-secret-2025';\n\nconsole.log('🍪 Session configuration:');\nconsole.log('   Environment:', process.env.[REDACTED] || 'development');\nconsole.log('   Session secret:'[REDACTED]'SET' : 'NOT SET');\n\nmodule.exports = session({\n  name: 'connect.sid', // 🔧 FIXED: Use standard session name\n  secret: sessionSecret,\n  store: store,\n  resave: false,\n  saveUninitialized: false,\n  rolling: true,\n  proxy: true, // Trust proxy headers (important for nginx setup)\n  cookie: {\n    secure: false, // 🔧 FIXED: Let Express handle this based on protocol\n    httpOnly: true,\n    maxAge: 86400000, // 24 hours\n    sameSite: 'lax', // Allow same-site requests\n    // 🔧 REMOVED: Domain setting for better compatibility\n  }\n});\nEOF\n\necho \"   ✅ Updated session configuration\"\n\n# Fix 3: Test session store connection\necho \"\"\necho \"3. Testing session store connection...\"\n\ncat > test_session_store.js << 'EOF'\nconst { promisePool } = require('./config/db');\n\nasync function testSessionStore() {\n    try {\n        console.log('🔍 Testing session store...');\n        \n        // Check if sessions table exists\n        const [tables] = await promisePool.execute(\n            \"SHOW TABLES LIKE 'sessions'\"\n        );\n        \n        if (tables.length > 0) {\n            console.log('✅ Sessions table exists');\n            \n            // Check session count\n            const [count] = await promisePool.execute(\n                'SELECT COUNT(*) as count FROM sessions'\n            );\n            console.log(`📊 Current sessions in store: ${count[0].count}`);\n            \n            // Show recent sessions (without data for privacy)\n            const [recent] = await promisePool.execute(\n                'SELECT session_id, expires, CHAR_LENGTH(data) as data_size FROM sessions ORDER BY expires DESC LIMIT 5'\n            );\n            \n            console.log('📋 Recent sessions:');\n            recent.forEach(session => {\n                const expired = new Date(session.expires * 1000) < new Date();\n                console.log(`   ${session.session_id}: ${expired ? 'EXPIRED' : 'ACTIVE'}, ${session.data_size} bytes`);\n            });\n            \n        } else {\n            console.log('❌ Sessions table does not exist');\n        }\n        \n        process.exit(0);\n    } catch (error) {\n        console.error('❌ Session store test failed:', error.message);\n        process.exit(1);\n    }\n}\n\ntestSessionStore();\nEOF\n\nnode test_session_store.js\n\necho \"\"\necho \"4. Restarting server with fixes...\"\npm2 restart orthodox-backend\n\nsleep 5\n\necho \"\"\necho \"5. Testing session endpoint...\"\n\n# Test auth check endpoint\nauth_check=$(curl -s -w \"%{http_code}\" https://orthodoxmetrics.com/api/auth/check -o /dev/null)\necho \"Auth check endpoint: $auth_check\"\n\necho \"\"\necho \"📋 FIXES APPLIED:\"\necho \"==================\"\necho \"✅ Added explicit req.session.save() to login\"\necho \"✅ Fixed session cookie configuration\" \necho \"✅ Updated session name to 'connect.sid'\"\necho \"✅ Made cookie settings more compatible\"\necho \"✅ Tested session store connectivity\"\necho \"\"\n\necho \"🎯 NEXT STEPS:\"\necho \"==============\"\necho \"1. 🧹 Clear all browser cookies for orthodoxmetrics.com\"\necho \"2. 🚪 Go to admin panel and login again\"\necho \"3. ✅ User Management should now work!\"\necho \"\"\necho \"🔍 If still not working, check PM2 logs:\"\necho \"   pm2 logs orthodox-backend --lines 10\"\n\n# Cleanup\nrm -f fix_auth_session.js test_session_store.js\n\necho \"\"\necho \"🎉 Session deserialization fixes complete!\" "
    },
    "complexity": {
      "totalLines": 233,
      "codeLines": 164,
      "commentLines": 21,
      "commentRatio": 0.11351351351351352,
      "averageLineLength": 37.21621621621622
    },
    "lastAnalyzed": "2025-07-28T07:20:01.044Z"
  },
  "contentHash": "1d434e1ec731417104e44420e05b13225c9ccfffa0adeeb45acbfaf43fa75ade",
  "discoveredAt": "2025-07-28T07:20:01.044Z"
}