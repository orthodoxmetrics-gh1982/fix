{
  "id": "a4f033e17550",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/07-09-25/BACKEND_ARCHITECTURE.md",
  "relativePath": "docs/archive/07-09-25/BACKEND_ARCHITECTURE.md",
  "name": "BACKEND_ARCHITECTURE.md",
  "extension": ".md",
  "size": 13661,
  "modified": "2025-07-09T04:32:16.331Z",
  "created": "2025-07-09T04:32:16.331Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 502,
      "characters": 13239,
      "words": 1544
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 43
      },
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 44
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 45
      },
      {
        "type": "npm_package",
        "name": "cors",
        "line": 46
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 47
      },
      {
        "type": "npm_package",
        "name": "mysql2",
        "line": 117
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 120,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 121,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 122,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 123,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 192,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 194,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 196,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 197,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 198,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 204,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Backend Architecture Documentation\r\n\r\n## 🏗️ Orthodox Church Management System - Backend Architecture\r\n\r\nThis document provides a comprehensive overview of the backend architecture, including server structure, database design, API organization, and system components.\r\n\r\n---\r\n\r\n## 🚀 Application Entry Point\r\n\r\n### index.js\r\nThe main entry point for the Orthodox Church Management System backend.\r\n\r\n**Location**: `z:\\server\\index.js`\r\n\r\n**Key Features**:\r\n- Express.js application setup\r\n- Middleware configuration\r\n- Route mounting (both direct and `/api` prefixed)\r\n- Session management\r\n- Database connectivity\r\n- Error handling\r\n\r\n**Route Mounting Strategy**:\r\n```javascript\r\n// Direct routes (for nginx proxy compatibility)\r\napp.use('/auth', authRoutes);\r\napp.use('/admin', adminRoutes);\r\napp.use('/notifications', notificationRoutes);\r\napp.use('/ocr-upload', ocrRoutes);\r\napp.use('/debug', debugRoutes);\r\n\r\n// API prefixed routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/admin', adminRoutes);\r\napp.use('/api/notifications', notificationRoutes);\r\napp.use('/api/ocr-upload', ocrRoutes);\r\napp.use('/api/debug', debugRoutes);\r\n```\r\n\r\n**Dependencies**:\r\n```javascript\r\nconst express = require('express');\r\nconst session = require('express-session');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\nconst cors = require('cors');\r\nconst path = require('path');\r\n```\r\n\r\n---\r\n\r\n## 📁 Directory Structure\r\n\r\n```\r\nserver/\r\n├── index.js                 # Main application entry point\r\n├── package.json             # Dependencies and scripts\r\n├── config/                  # Configuration files\r\n│   ├── database.js         # Database connection\r\n│   ├── session.js          # Session configuration\r\n│   └── cors.js             # CORS configuration\r\n├── middleware/              # Custom middleware\r\n│   ├── auth.js             # Authentication middleware\r\n│   ├── validation.js       # Input validation\r\n│   └── errorHandler.js     # Error handling\r\n├── routes/                  # API route definitions\r\n│   ├── auth.js             # Authentication routes\r\n│   ├── admin.js            # Admin management routes\r\n│   ├── churches.js         # Church management routes\r\n│   ├── notes.js            # Notes management routes\r\n│   ├── notifications.js    # Notification routes\r\n│   ├── baptism.js          # Baptism records routes\r\n│   ├── marriage.js         # Marriage records routes\r\n│   ├── funeral.js          # Funeral records routes\r\n│   ├── certificates.js     # Certificate routes\r\n│   ├── invoices.js         # Invoice management routes\r\n│   ├── calendar.js         # Calendar routes\r\n│   ├── kanban.js           # Kanban board routes\r\n│   ├── logs.js             # System logs routes\r\n│   ├── dashboard.js        # Dashboard data routes\r\n│   ├── ocr.js              # OCR processing routes\r\n│   ├── ecommerce.js        # E-commerce routes\r\n│   ├── billing.js          # Billing routes\r\n│   ├── menuManagement.js   # Menu management routes\r\n│   ├── menuPermissions.js  # Menu permissions routes\r\n│   └── debug.js            # Debug utility routes\r\n├── controllers/             # Business logic controllers\r\n│   ├── authController.js   # Authentication logic\r\n│   ├── userController.js   # User management logic\r\n│   ├── churchController.js # Church management logic\r\n│   └── ...                 # Other controllers\r\n├── models/                  # Data models (if using ORM)\r\n├── utils/                   # Utility functions\r\n│   ├── logger.js           # Logging utility\r\n│   ├── validation.js       # Validation helpers\r\n│   ├── email.js            # Email utilities\r\n│   └── helpers.js          # General helpers\r\n├── database/                # Database utilities\r\n│   ├── migrations/         # Database migrations\r\n│   ├── seeds/              # Database seed data\r\n│   └── queries/            # Common SQL queries\r\n├── uploads/                 # File upload storage\r\n├── logs/                    # Application logs\r\n├── templates/              # Email/document templates\r\n└── certificates/           # SSL certificates\r\n```\r\n\r\n---\r\n\r\n## 🗄️ Database Architecture\r\n\r\n### Connection Management\r\n**File**: `z:\\server\\config\\database.js`\r\n\r\n**Connection Pool Configuration**:\r\n```javascript\r\nconst mysql = require('mysql2');\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  user: process.env.[REDACTED] || 'root',\r\n  password: process.env.[REDACTED] || '',\r\n  database: process.env.[REDACTED] || 'orthodox_metrics',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n  acquireTimeout: 60000,\r\n  timeout: 60000\r\n});\r\n```\r\n\r\n### Database Tables\r\n\r\n#### Core Tables\r\n- **users**: User accounts and authentication\r\n- **churches**: Church organizations\r\n- **sessions**: Session storage\r\n- **user_sessions**: User session tracking\r\n\r\n#### Orthodox Church Records\r\n- **baptism_records**: Baptism ceremonies\r\n- **marriage_records**: Marriage ceremonies  \r\n- **funeral_records**: Funeral services\r\n- **certificates**: Generated certificates\r\n\r\n#### Application Data\r\n- **notes**: User notes and memos\r\n- **notifications**: System notifications\r\n- **invoices**: Financial invoices\r\n- **calendar_events**: Calendar entries\r\n- **kanban_boards**: Project boards\r\n- **kanban_cards**: Task cards\r\n\r\n#### System Management\r\n- **menu_items**: Dynamic menu structure\r\n- **role_menu_permissions**: Role-based menu access\r\n- **system_logs**: Application logging\r\n- **ocr_sessions**: OCR processing sessions\r\n\r\n### Database Relationships\r\n```sql\r\n-- Users belong to churches\r\nusers.church_id → churches.id\r\n\r\n-- Records belong to churches and users\r\nbaptism_records.church_id → churches.id\r\nbaptism_records.created_by → users.id\r\n\r\n-- Menu permissions link roles to menu items\r\nrole_menu_permissions.menu_item_id → menu_items.id\r\n\r\n-- Notes belong to users\r\nnotes.user_id → users.id\r\n\r\n-- Notifications can target specific users\r\nnotifications.user_id → users.id\r\n```\r\n\r\n---\r\n\r\n## 🔐 Authentication & Session Management\r\n\r\n### Session Configuration\r\n**File**: `z:\\server\\config\\session.js`\r\n\r\n**Session Store**: MySQL-based session storage for scalability and persistence\r\n\r\n**Configuration**:\r\n```javascript\r\nconst sessionConfig = {\r\n  key: 'orthodox_metrics_session',\r\n  secret: process.env.[REDACTED] || 'your-secret-key',\r\n  store: new MySQLStore({\r\n    host: process.env.[REDACTED],\r\n    port: 3306,\r\n    user: process.env.[REDACTED],\r\n    password: process.env.[REDACTED],\r\n    database: process.env.[REDACTED]\r\n  }),\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  rolling: true,\r\n  cookie: {\r\n    secure: process.env.[REDACTED] === 'production',\r\n    httpOnly: true,\r\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n    sameSite: 'lax'\r\n  }\r\n};\r\n```\r\n\r\n### Authentication Middleware\r\n**File**: `z:\\server\\middleware\\auth.js`\r\n\r\n**Features**:\r\n- Session validation\r\n- Role-based access control\r\n- Request logging\r\n- Temporary bypass capability (for debugging)\r\n\r\n**Role Hierarchy**:\r\n1. `super_admin` - Full system access\r\n2. `admin` - User and church management\r\n3. `priest` - Orthodox records management\r\n4. `deacon` - Limited record access\r\n5. `user` - Basic features only\r\n\r\n---\r\n\r\n## 🛣️ Route Organization\r\n\r\n### Authentication Routes (`/api/auth`)\r\n**File**: `z:\\server\\routes\\auth.js`\r\n\r\n**Endpoints**:\r\n- `POST /login` - User authentication\r\n- `POST /logout` - Session termination\r\n- `PUT /change-password` - Password updates\r\n- `POST /register` - User registration (admin only)\r\n\r\n### Admin Routes (`/api/admin`)\r\n**File**: `z:\\server\\routes\\admin.js`\r\n\r\n**Endpoints**:\r\n- `GET /users` - List all users\r\n- `POST /users` - Create new user\r\n- `PUT /users/:id` - Update user\r\n- `DELETE /users/:id` - Delete user\r\n- `PUT /users/:id/toggle-status` - Toggle user status\r\n\r\n### Church Management (`/api/churches`)\r\n**File**: `z:\\server\\routes\\churches.js`\r\n\r\n**Endpoints**:\r\n- `GET /` - List churches\r\n- `POST /` - Create church\r\n- `PUT /:id` - Update church\r\n- `DELETE /:id` - Delete church\r\n\r\n### Orthodox Records\r\n**Files**: `baptism.js`, `marriage.js`, `funeral.js`, `certificates.js`\r\n\r\n**Pattern**: Standard CRUD operations for each record type\r\n- `GET /` - List records\r\n- `POST /` - Create record\r\n- `GET /:id` - Get specific record\r\n- `PUT /:id` - Update record\r\n- `DELETE /:id` - Delete record\r\n\r\n### Notifications (`/api/notifications`)\r\n**File**: `z:\\server\\routes\\notifications.js`\r\n\r\n**Features**:\r\n- Real-time notification creation\r\n- User-specific notification retrieval\r\n- Read/unread status management\r\n- Notification cleanup\r\n\r\n### Notes Management (`/api/notes`)\r\n**File**: `z:\\server\\routes\\notes.js`\r\n\r\n**Features**:\r\n- Personal note creation\r\n- Categorization and tagging\r\n- Search functionality\r\n- Pin/archive capabilities\r\n\r\n---\r\n\r\n## 🔧 Middleware Architecture\r\n\r\n### Error Handling\r\n**File**: `z:\\server\\middleware\\errorHandler.js`\r\n\r\n**Features**:\r\n- Centralized error processing\r\n- Consistent error response format\r\n- Error logging and tracking\r\n- Environment-specific error details\r\n\r\n### Input Validation\r\n**File**: `z:\\server\\middleware\\validation.js`\r\n\r\n**Features**:\r\n- Request data validation\r\n- SQL injection prevention\r\n- Data sanitization\r\n- Type checking\r\n\r\n### CORS Configuration\r\n**File**: `z:\\server\\config\\cors.js`\r\n\r\n**Features**:\r\n- Cross-origin request handling\r\n- Credential support\r\n- Development/production settings\r\n- Security headers\r\n\r\n---\r\n\r\n## 📊 Logging System\r\n\r\n### Logger Configuration\r\n**File**: `z:\\server\\utils\\logger.js`\r\n\r\n**Log Levels**:\r\n- `error` - Error conditions\r\n- `warn` - Warning conditions\r\n- `info` - Informational messages\r\n- `debug` - Debug-level messages\r\n\r\n**Log Destinations**:\r\n- Console output (development)\r\n- File logging (production)\r\n- Database logging (system events)\r\n\r\n### Log Categories\r\n- **Authentication**: Login/logout events\r\n- **API**: Request/response logging\r\n- **Database**: Query logging and errors\r\n- **System**: Application startup/shutdown\r\n- **Security**: Security-related events\r\n\r\n---\r\n\r\n## 🔍 Debugging & Monitoring\r\n\r\n### Debug Routes (`/api/debug`)\r\n**File**: `z:\\server\\routes\\debug.js`\r\n\r\n**Endpoints**:\r\n- `GET /session` - Current session information\r\n- `GET /database` - Database connectivity status\r\n- `GET /config` - System configuration\r\n- `GET /logs` - Recent log entries\r\n\r\n### Health Checks\r\n- Database connectivity monitoring\r\n- Session store health\r\n- File system access\r\n- External service connectivity\r\n\r\n---\r\n\r\n## 📦 Dependencies\r\n\r\n### Core Dependencies\r\n```json\r\n{\r\n  \"express\": \"^4.18.2\",\r\n  \"express-session\": \"^1.17.3\",\r\n  \"express-mysql-session\": \"^2.1.8\",\r\n  \"mysql2\": \"^3.6.0\",\r\n  \"cors\": \"^2.8.5\",\r\n  \"bcrypt\": \"^5.1.0\",\r\n  \"multer\": \"^1.4.5-lts.1\"\r\n}\r\n```\r\n\r\n### Development Dependencies\r\n```json\r\n{\r\n  \"nodemon\": \"^3.0.1\",\r\n  \"jest\": \"^29.6.2\",\r\n  \"supertest\": \"^6.3.3\"\r\n}\r\n```\r\n\r\n---\r\n\r\n## 🚀 Deployment Architecture\r\n\r\n### Environment Configuration\r\n```bash\r\n# Production Environment Variables\r\nNODE_ENV=production\r\nPORT=3001\r\nDB_HOST=localhost\r\nDB_USER=orthodox_user\r\nDB_PASSWORD=secure_password\r\nDB_NAME=orthodox_metrics\r\nSESSION_SECRET=your-session-secret\r\n```\r\n\r\n### Process Management\r\n- **PM2**: Process management for production\r\n- **Nginx**: Reverse proxy and load balancing\r\n- **MySQL**: Database server\r\n- **SSL**: Certificate management\r\n\r\n### Scaling Considerations\r\n- Horizontal scaling with multiple server instances\r\n- Database connection pooling\r\n- Session store clustering\r\n- File upload handling\r\n- Cache implementation\r\n\r\n---\r\n\r\n## 🔒 Security Architecture\r\n\r\n### Data Protection\r\n- Password hashing with bcrypt\r\n- SQL injection prevention\r\n- XSS protection\r\n- CSRF protection\r\n\r\n### Session Security\r\n- HTTPOnly cookies\r\n- Secure cookie flags (production)\r\n- Rolling session expiration\r\n- Session invalidation\r\n\r\n### API Security\r\n- Role-based access control\r\n- Request rate limiting (planned)\r\n- Input validation\r\n- Error message sanitization\r\n\r\n---\r\n\r\n## 🧪 Testing Strategy\r\n\r\n### Unit Testing\r\n- Controller logic testing\r\n- Utility function testing\r\n- Middleware testing\r\n- Database query testing\r\n\r\n### Integration Testing\r\n- API endpoint testing\r\n- Authentication flow testing\r\n- Database integration testing\r\n- Session management testing\r\n\r\n### Testing Tools\r\n- Jest for unit tests\r\n- Supertest for API testing\r\n- Custom test scripts for comprehensive testing\r\n\r\n---\r\n\r\n## 📈 Performance Optimization\r\n\r\n### Database Optimization\r\n- Connection pooling\r\n- Query optimization\r\n- Index management\r\n- Query caching\r\n\r\n### Application Optimization\r\n- Middleware optimization\r\n- Route organization\r\n- Memory management\r\n- Response compression\r\n\r\n### Monitoring\r\n- Performance metrics collection\r\n- Error rate monitoring\r\n- Response time tracking\r\n- Resource usage monitoring\r\n\r\n---\r\n\r\n## 🔮 Future Enhancements\r\n\r\n### Planned Features\r\n- GraphQL API implementation\r\n- Real-time capabilities with WebSockets\r\n- Microservices architecture\r\n- Advanced caching strategies\r\n- API versioning\r\n- Enhanced security features\r\n\r\n### Scalability Improvements\r\n- Container deployment (Docker)\r\n- Kubernetes orchestration\r\n- Database sharding\r\n- CDN integration\r\n- Load balancing optimization\r\n\r\nThis backend architecture provides a solid foundation for the Orthodox Church Management System with room for future growth and enhancement."
    },
    "complexity": {
      "totalLines": 502,
      "codeLines": 311,
      "commentLines": 93,
      "commentRatio": 0.2301980198019802,
      "averageLineLength": 31.287128712871286
    },
    "lastAnalyzed": "2025-07-28T07:19:57.856Z"
  },
  "contentHash": "f2628a75c1878b0f60813885479a37e50a8745bb4033b0f5b8bdf912a960a907",
  "discoveredAt": "2025-07-28T07:19:57.856Z"
}