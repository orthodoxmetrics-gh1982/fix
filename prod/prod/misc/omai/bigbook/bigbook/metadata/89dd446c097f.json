{
  "id": "89dd446c097f",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/temp/migrate-church-schema.js",
  "relativePath": "server/temp/migrate-church-schema.js",
  "name": "migrate-church-schema.js",
  "extension": ".js",
  "size": 5694,
  "modified": "2025-07-13T23:19:34.282Z",
  "created": "2025-07-13T23:18:31.171Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 175,
      "characters": 5658,
      "words": 511
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Apply database migration to upgrade existing church schema\r\n// This script will safely upgrade the existing church database\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nclass DatabaseMigrator {\r\n  constructor() {\r\n    this.dbConfig = {\r\n      host: process.env.[REDACTED] || 'localhost',\r\n      user: process.env.[REDACTED] || 'root',\r\n      password: process.env.[REDACTED] || '',\r\n      database: 'saints_peter_and_paul_orthodox_church_db',\r\n      multipleStatements: true\r\n    };\r\n  }\r\n\r\n  async runMigration() {\r\n    console.log('üîÑ Starting database migration...');\r\n    \r\n    const connection = await mysql.createConnection(this.dbConfig);\r\n    \r\n    try {\r\n      // Load migration script\r\n      const migrationPath = path.join(__dirname, 'migrations', 'upgrade-church-schema.sql');\r\n      const migrationSql = await fs.readFile(migrationPath, 'utf8');\r\n      \r\n      console.log('üìã Loaded migration script');\r\n      \r\n      // Execute migration\r\n      console.log('‚ö° Executing migration...');\r\n      const results = await connection.execute(migrationSql);\r\n      \r\n      console.log('‚úÖ Migration completed successfully');\r\n      \r\n      // Verify the results\r\n      console.log('\\nüìä Verifying church_info table structure...');\r\n      const [columns] = await connection.execute('DESCRIBE church_info');\r\n      \r\n      console.log('Church Info Table Columns:');\r\n      columns.forEach(col => {\r\n        console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(nullable)' : '(required)'}`);\r\n      });\r\n      \r\n      // Check church data\r\n      console.log('\\nüèõÔ∏è Current church data:');\r\n      const [churches] = await connection.execute(`\r\n        SELECT id, church_id, name, email, phone, city, state_province, \r\n               country, is_active, created_at \r\n        FROM church_info\r\n      `);\r\n      \r\n      churches.forEach(church => {\r\n        console.log(`  Church ID: ${church.church_id}`);\r\n        console.log(`  Name: ${church.name}`);\r\n        console.log(`  Email: ${church.email}`);\r\n        console.log(`  Location: ${church.city}, ${church.state_province}`);\r\n        console.log(`  Active: ${church.is_active}`);\r\n        console.log(`  ---`);\r\n      });\r\n      \r\n      // Test the API compatibility\r\n      console.log('\\nüß™ Testing API compatibility...');\r\n      const [testChurches] = await connection.execute(`\r\n        SELECT id, name, church_id, is_active \r\n        FROM church_info \r\n        WHERE is_active = 1 OR is_active = TRUE\r\n      `);\r\n      \r\n      console.log(`‚úÖ Found ${testChurches.length} active churches for API`);\r\n      testChurches.forEach(church => {\r\n        console.log(`  - ${church.name} (ID: ${church.id}, Church ID: ${church.church_id})`);\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Migration completed successfully',\r\n        churchCount: churches.length,\r\n        activeChurches: testChurches.length\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Migration failed:', error);\r\n      throw error;\r\n    } finally {\r\n      await connection.end();\r\n    }\r\n  }\r\n\r\n  // Test the complete workflow after migration\r\n  async testWorkflow() {\r\n    console.log('\\nüß™ Testing complete workflow...');\r\n    \r\n    const connection = await mysql.createConnection(this.dbConfig);\r\n    \r\n    try {\r\n      // Test church API data format\r\n      const [churches] = await connection.execute(`\r\n        SELECT id, name, church_id, \r\n               CASE \r\n                 WHEN is_active = 1 OR is_active = TRUE THEN true\r\n                 ELSE false\r\n               END as is_active\r\n        FROM church_info\r\n      `);\r\n      \r\n      console.log('API Response Format Test:');\r\n      console.log(JSON.stringify({\r\n        success: true,\r\n        churches: churches\r\n      }, null, 2));\r\n      \r\n      // Test import data insertion\r\n      console.log('\\nüìä Testing record import...');\r\n      \r\n      const testRecord = {\r\n        church_id: churches[0].id,\r\n        person_name: 'Test Person',\r\n        date_performed: '2024-12-25',\r\n        priest_name: 'Fr. Test',\r\n        notes: 'Test import record',\r\n        parents: 'Test Parents',\r\n        godparents: 'Test Godparents',\r\n        record_source: 'import'\r\n      };\r\n      \r\n      const [insertResult] = await connection.execute(`\r\n        INSERT INTO baptism_records \r\n        (church_id, person_name, date_performed, priest_name, notes, parents, godparents, record_source)\r\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n      `, Object.values(testRecord));\r\n      \r\n      console.log(`‚úÖ Test record inserted with ID: ${insertResult.insertId}`);\r\n      \r\n      // Clean up test record\r\n      await connection.execute('DELETE FROM baptism_records WHERE id = ?', [insertResult.insertId]);\r\n      console.log('üßπ Test record cleaned up');\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Workflow test completed successfully'\r\n      };\r\n      \r\n    } finally {\r\n      await connection.end();\r\n    }\r\n  }\r\n}\r\n\r\n// CLI usage\r\nasync function main() {\r\n  const migrator = new DatabaseMigrator();\r\n  \r\n  try {\r\n    const result = await migrator.runMigration();\r\n    console.log('\\nüéâ Migration Result:', result);\r\n    \r\n    const testResult = await migrator.testWorkflow();\r\n    console.log('\\nüéâ Workflow Test Result:', testResult);\r\n    \r\n    console.log('\\n‚úÖ All tests passed! The database is ready for the import system.');\r\n    \r\n  } catch (error) {\r\n    console.error('\\n‚ùå Migration or test failed:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nif (require.main === module) {\r\n  main();\r\n}\r\n\r\nmodule.exports = DatabaseMigrator;\r\n"
    },
    "complexity": {
      "totalLines": 175,
      "codeLines": 128,
      "commentLines": 12,
      "commentRatio": 0.08571428571428572,
      "averageLineLength": 37.9
    },
    "lastAnalyzed": "2025-07-28T07:20:01.156Z"
  },
  "contentHash": "6b3737475a65f1b01786885da226f674a47348a249181f91565c6d3aa030e1f9",
  "discoveredAt": "2025-07-28T07:20:01.156Z"
}