{
  "id": "4347d0c070c1",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/test-headlines-db.js",
  "relativePath": "server/scripts/test-headlines-db.js",
  "name": "test-headlines-db.js",
  "extension": ".js",
  "size": 7317,
  "modified": "2025-07-22T23:59:33.543Z",
  "created": "2025-07-22T23:59:31.379Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 195,
      "characters": 7255,
      "words": 605
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "readline",
        "line": 8
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 37,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n/**\r\n * Test Database Connection for Orthodox Headlines\r\n * Quick script to verify database setup and connection\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst readline = require('readline');\r\n\r\n/**\r\n * Prompt for database credentials\r\n */\r\nfunction promptCredentials() {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n\r\n    return new Promise((resolve) => {\r\n        const credentials = {};\r\n        \r\n        console.log('\\nüîê Database Test Configuration');\r\n        console.log('==============================');\r\n        \r\n        rl.question('Database Host (localhost): ', (host) => {\r\n            credentials.host = host || 'localhost';\r\n            \r\n            rl.question('Database Port (3306): ', (port) => {\r\n                credentials.port = parseInt(port) || 3306;\r\n                \r\n                rl.question('Database Name (orthodoxmetrics_db): ', (database) => {\r\n                    credentials.database = database || 'orthodoxmetrics_db';\r\n                    \r\n                    rl.question('Database User (root): ', (user) => {\r\n                        credentials.user = user || 'root';\r\n                        \r\n                        rl.question('Database Password: '[REDACTED]'\\nüîå Testing Database Connection...');\r\n        console.log(`   Host: ${credentials.host}:${credentials.port}`);\r\n        console.log(`   Database: ${credentials.database}`);\r\n        console.log(`   User: ${credentials.user}`);\r\n        \r\n        // Create connection\r\n        connection = await mysql.createConnection({\r\n            host: credentials.host,\r\n            port: credentials.port,\r\n            user: credentials.user,\r\n            password: credentials.password,\r\n            database: credentials.database,\r\n            charset: 'utf8mb4'\r\n        });\r\n        \r\n        console.log('‚úÖ Database connection successful!');\r\n        \r\n        // Test basic query\r\n        const [result1] = await connection.execute('SELECT 1 as test_connection');\r\n        console.log('‚úÖ Basic query test passed');\r\n        \r\n        // Check if news_headlines table exists\r\n        const [tables] = await connection.execute(`\r\n            SELECT table_name \r\n            FROM information_schema.tables \r\n            WHERE table_schema = ? AND table_name = 'news_headlines'\r\n        `, [credentials.database]);\r\n        \r\n        if (tables.length > 0) {\r\n            console.log('‚úÖ news_headlines table exists');\r\n            \r\n            // Get table structure\r\n            const [columns] = await connection.execute('DESCRIBE news_headlines');\r\n            console.log('\\nüìã Table Structure:');\r\n            columns.forEach(col => {\r\n                console.log(`   ‚Ä¢ ${col.Field}: ${col.Type} ${col.Null === 'NO' ? '(NOT NULL)' : ''}`);\r\n            });\r\n            \r\n            // Count existing records\r\n            const [count] = await connection.execute('SELECT COUNT(*) as total FROM news_headlines');\r\n            console.log(`\\nüìä Current records: ${count[0].total}`);\r\n            \r\n            // Test insert (dry run)\r\n            console.log('\\nüß™ Testing INSERT capability...');\r\n            const testInsertSql = `\r\n                INSERT INTO news_headlines \r\n                (title, url, summary, language, source, published_at)\r\n                VALUES (?, ?, ?, ?, ?, ?)\r\n            `;\r\n            \r\n            const testValues = [\r\n                'Test Headline - ' + new Date().toISOString(),\r\n                'https://test.example.com/test-' + Date.now(),\r\n                'This is a test summary',\r\n                'en',\r\n                'TEST_SOURCE',\r\n                new Date()\r\n            ];\r\n            \r\n            const [insertResult] = await connection.execute(testInsertSql, testValues);\r\n            console.log(`‚úÖ Test insert successful (ID: ${insertResult.insertId})`);\r\n            \r\n            // Clean up test record\r\n            await connection.execute('DELETE FROM news_headlines WHERE id = ?', [insertResult.insertId]);\r\n            console.log('‚úÖ Test record cleaned up');\r\n            \r\n        } else {\r\n            console.log('‚ùå news_headlines table does NOT exist');\r\n            console.log('\\nüìã To create the table, run:');\r\n            console.log('   mysql -u root -p orthodoxmetrics_db < server/database/news-headlines-schema.sql');\r\n        }\r\n        \r\n        console.log('\\nüéâ Database test completed successfully!');\r\n        return true;\r\n        \r\n    } catch (error) {\r\n        console.error('\\n‚ùå Database test failed:', error.message);\r\n        \r\n        if (error.code) {\r\n            console.error(`   Error Code: ${error.code}`);\r\n        }\r\n        if (error.errno) {\r\n            console.error(`   Error Number: ${error.errno}`);\r\n        }\r\n        \r\n        // Common error suggestions\r\n        if (error.code === 'ER_ACCESS_DENIED_ERROR') {\r\n            console.error('\\nüí° Suggestions:');\r\n            console.error('   ‚Ä¢ Check username and password');\r\n            console.error('   ‚Ä¢ Verify user has access to the database');\r\n        } else if (error.code === 'ECONNREFUSED') {\r\n            console.error('\\nüí° Suggestions:');\r\n            console.error('   ‚Ä¢ Check if MySQL server is running');\r\n            console.error('   ‚Ä¢ Verify host and port are correct');\r\n        } else if (error.code === 'ER_BAD_DB_ERROR') {\r\n            console.error('\\nüí° Suggestions:');\r\n            console.error('   ‚Ä¢ Check if database exists');\r\n            console.error('   ‚Ä¢ Create database: CREATE DATABASE orthodoxmetrics_db;');\r\n        }\r\n        \r\n        return false;\r\n        \r\n    } finally {\r\n        if (connection) {\r\n            await connection.end();\r\n            console.log('üîå Connection closed');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Main function\r\n */\r\nasync function main() {\r\n    try {\r\n        console.log('üóûÔ∏è Orthodox Headlines - Database Connection Test');\r\n        console.log('================================================');\r\n        \r\n        const credentials = await promptCredentials();\r\n        const success = await testDatabase(credentials);\r\n        \r\n        if (success) {\r\n            console.log('\\n‚úÖ Your database is ready for Orthodox Headlines!');\r\n            console.log('\\nüöÄ Next steps:');\r\n            console.log('   node scripts/fetch-headlines.js --test    # Test RSS feeds');\r\n            console.log('   node scripts/fetch-headlines.js           # Run with database');\r\n        } else {\r\n            console.log('\\n‚ùå Please fix the database issues and try again');\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Test failed:', error.message);\r\n        process.exit(1);\r\n    }\r\n}\r\n\r\n// Run if executed directly\r\nif (require.main === module) {\r\n    main();\r\n} "
    },
    "complexity": {
      "totalLines": 195,
      "codeLines": 138,
      "commentLines": 23,
      "commentRatio": 0.14285714285714285,
      "averageLineLength": 41.857142857142854
    },
    "lastAnalyzed": "2025-07-28T07:20:01.086Z"
  },
  "contentHash": "e1703025ca808208eb8440fa1657ab21105b297c055d8cf491b472ffc78d3ff3",
  "discoveredAt": "2025-07-28T07:20:01.086Z"
}