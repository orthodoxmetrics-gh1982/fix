{
  "id": "3143c684159e",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/MONITORING_GUIDE.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/MONITORING_GUIDE.md",
  "name": "MONITORING_GUIDE.md",
  "extension": ".md",
  "size": 17731,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:05.756Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 9
  },
  "metadata": {
    "fileStats": {
      "lines": 677,
      "characters": 17719,
      "words": 1834
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 9
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 213
      },
      {
        "type": "npm_package",
        "name": "vite",
        "line": 244
      },
      {
        "type": "npm_package",
        "name": "rollup-plugin-visualizer",
        "line": 245
      },
      {
        "type": "npm_package",
        "name": "nodemailer",
        "line": 375
      },
      {
        "type": "npm_package",
        "name": "express",
        "line": 485
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 512
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 83,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 384,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 385,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 392,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 393,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Orthodox Metrics System - Monitoring Guide\r\n\r\n## Overview\r\n\r\nThis guide provides comprehensive monitoring procedures for the Orthodox Metrics church management system. It covers system health monitoring, performance metrics, log analysis, and alert management.\r\n\r\n## System Monitoring Components\r\n\r\n### 1. Application Monitoring (PM2)\r\n\r\n#### PM2 Dashboard\r\n```bash\r\n# View all processes\r\npm2 list\r\n\r\n# Monitor processes in real-time\r\npm2 monit\r\n\r\n# View process logs\r\npm2 logs [process-name]\r\n\r\n# Restart process\r\npm2 restart [process-name]\r\n\r\n# View process details\r\npm2 describe [process-name]\r\n```\r\n\r\n#### PM2 Configuration\r\n```javascript\r\n// ecosystem.config.js\r\nmodule.exports = {\r\n  apps: [{\r\n    name: \"orthodox-metrics\",\r\n    script: \"index.js\",\r\n    instances: \"max\",\r\n    exec_mode: \"cluster\",\r\n    env: {\r\n      NODE_ENV: \"production\",\r\n      PORT: 3001\r\n    },\r\n    log_file: \"/var/log/pm2/orthodox-metrics.log\",\r\n    error_file: \"/var/log/pm2/orthodox-metrics-error.log\",\r\n    out_file: \"/var/log/pm2/orthodox-metrics-out.log\",\r\n    max_memory_restart: \"1G\",\r\n    restart_delay: 4000,\r\n    watch: false,\r\n    ignore_watch: [\"node_modules\", \"logs\", \"uploads\"]\r\n  }]\r\n};\r\n```\r\n\r\n### 2. Database Monitoring\r\n\r\n#### MySQL Performance Monitoring\r\n```sql\r\n-- Check database size\r\nSELECT \r\n    table_schema \"Database\",\r\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) \"Size (MB)\"\r\nFROM information_schema.tables \r\nWHERE table_schema = 'orthodox_metrics'\r\nGROUP BY table_schema;\r\n\r\n-- Monitor active connections\r\nSHOW PROCESSLIST;\r\n\r\n-- Check slow queries\r\nSELECT * FROM mysql.slow_log \r\nWHERE start_time > DATE_SUB(NOW(), INTERVAL 1 HOUR);\r\n\r\n-- Monitor table locks\r\nSHOW OPEN TABLES WHERE In_use > 0;\r\n```\r\n\r\n#### Database Health Checks\r\n```bash\r\n#!/bin/bash\r\n# db-health-check.sh\r\n\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"your_db_user\"\r\nDB_PASS=\"[REDACTED]\"\r\n\r\n# Check database connection\r\nmysql -u$DB_USER -p$DB_PASS -e \"SELECT 1\" > /dev/null 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo \"✓ Database connection: OK\"\r\nelse\r\n    echo \"✗ Database connection: FAILED\"\r\n    exit 1\r\nfi\r\n\r\n# Check table integrity\r\nmysql -u$DB_USER -p$DB_PASS $DB_NAME -e \"CHECK TABLE users, churches, logs\" > /dev/null 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo \"✓ Table integrity: OK\"\r\nelse\r\n    echo \"✗ Table integrity: FAILED\"\r\nfi\r\n```\r\n\r\n### 3. Web Server Monitoring (Nginx)\r\n\r\n#### Nginx Status Module\r\n```nginx\r\n# Add to nginx.conf\r\nlocation /nginx_status {\r\n    stub_status on;\r\n    access_log off;\r\n    allow 127.0.0.1;\r\n    deny all;\r\n}\r\n```\r\n\r\n#### Nginx Log Analysis\r\n```bash\r\n# Monitor access logs\r\ntail -f /var/log/nginx/access.log | grep orthodox-metrics\r\n\r\n# Check error logs\r\ntail -f /var/log/nginx/error.log\r\n\r\n# Analyze response times\r\nawk '{print $10}' /var/log/nginx/access.log | sort -n | tail -20\r\n\r\n# Monitor 404 errors\r\ngrep \"404\" /var/log/nginx/access.log | tail -10\r\n```\r\n\r\n### 4. System Resource Monitoring\r\n\r\n#### CPU and Memory Monitoring\r\n```bash\r\n# Real-time system monitoring\r\nhtop\r\n\r\n# Check disk usage\r\ndf -h\r\n\r\n# Monitor memory usage\r\nfree -h\r\n\r\n# Check system load\r\nuptime\r\n\r\n# Monitor specific process\r\nps aux | grep node\r\n```\r\n\r\n#### System Performance Script\r\n```bash\r\n#!/bin/bash\r\n# system-monitor.sh\r\n\r\necho \"=== System Performance Report ===\"\r\necho \"Date: $(date)\"\r\necho \"\"\r\n\r\necho \"CPU Usage:\"\r\ntop -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}'\r\n\r\necho \"\"\r\necho \"Memory Usage:\"\r\nfree -h | awk 'NR==2{printf \"%.2f%%\\n\", $3*100/$2}'\r\n\r\necho \"\"\r\necho \"Disk Usage:\"\r\ndf -h | grep -vE '^Filesystem|tmpfs|cdrom'\r\n\r\necho \"\"\r\necho \"Load Average:\"\r\nuptime | awk -F'load average:' '{print $2}'\r\n\r\necho \"\"\r\necho \"Active Connections:\"\r\nnetstat -an | grep :80 | wc -l\r\n```\r\n\r\n## Performance Metrics\r\n\r\n### 1. Application Performance\r\n\r\n#### Response Time Monitoring\r\n```javascript\r\n// middleware/performance.js\r\nconst performanceMiddleware = (req, res, next) => {\r\n    const start = Date.now();\r\n    \r\n    res.on('finish', () => {\r\n        const duration = Date.now() - start;\r\n        \r\n        // Log slow requests (>1 second)\r\n        if (duration > 1000) {\r\n            console.log(`Slow request: ${req.method} ${req.path} - ${duration}ms`);\r\n        }\r\n        \r\n        // Store metrics\r\n        storeMetric('response_time', duration, {\r\n            method: req.method,\r\n            path: req.path,\r\n            status: res.statusCode\r\n        });\r\n    });\r\n    \r\n    next();\r\n};\r\n```\r\n\r\n#### Database Query Performance\r\n```javascript\r\n// utils/database-monitor.js\r\nconst mysql = require('mysql2/promise');\r\n\r\nclass DatabaseMonitor {\r\n    static async logSlowQueries(query, params, duration) {\r\n        if (duration > 1000) { // Log queries taking > 1 second\r\n            console.log(`Slow query (${duration}ms): ${query}`);\r\n            \r\n            // Store in monitoring database\r\n            await this.storeSlowQuery(query, params, duration);\r\n        }\r\n    }\r\n    \r\n    static async checkConnectionPool() {\r\n        const pool = require('../config/database');\r\n        const connections = pool.pool.allConnections.length;\r\n        const free = pool.pool.freeConnections.length;\r\n        \r\n        return {\r\n            total: connections,\r\n            free: free,\r\n            used: connections - free\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n### 2. Frontend Performance\r\n\r\n#### Bundle Size Monitoring\r\n```javascript\r\n// vite.config.ts\r\nimport { defineConfig } from 'vite';\r\nimport { visualizer } from 'rollup-plugin-visualizer';\r\n\r\nexport default defineConfig({\r\n    plugins: [\r\n        visualizer({\r\n            filename: 'dist/stats.html',\r\n            open: true,\r\n            gzipSize: true,\r\n            brotliSize: true,\r\n        })\r\n    ],\r\n    build: {\r\n        rollupOptions: {\r\n            output: {\r\n                manualChunks: {\r\n                    vendor: ['react', 'react-dom'],\r\n                    material: ['@mui/material', '@mui/icons-material'],\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n#### Client-Side Performance Monitoring\r\n```javascript\r\n// src/utils/performance.js\r\nexport class PerformanceMonitor {\r\n    static measurePageLoad() {\r\n        window.addEventListener('load', () => {\r\n            const navigation = performance.getEntriesByType('navigation')[0];\r\n            const loadTime = navigation.loadEventEnd - navigation.loadEventStart;\r\n            \r\n            this.sendMetric('page_load_time', loadTime);\r\n        });\r\n    }\r\n    \r\n    static measureApiCalls(url, duration) {\r\n        if (duration > 2000) { // Log API calls taking > 2 seconds\r\n            console.log(`Slow API call: ${url} - ${duration}ms`);\r\n        }\r\n        \r\n        this.sendMetric('api_response_time', duration, { url });\r\n    }\r\n}\r\n```\r\n\r\n## Log Analysis\r\n\r\n### 1. Application Logs\r\n\r\n#### Log Aggregation\r\n```bash\r\n# Centralized log viewing\r\njournalctl -u orthodox-metrics -f\r\n\r\n# Filter by log level\r\ngrep \"ERROR\" /var/log/orthodox-metrics/application.log\r\n\r\n# Search for specific patterns\r\ngrep -i \"authentication\" /var/log/orthodox-metrics/application.log | tail -50\r\n```\r\n\r\n#### Log Rotation Configuration\r\n```bash\r\n# /etc/logrotate.d/orthodox-metrics\r\n/var/log/orthodox-metrics/*.log {\r\n    daily\r\n    rotate 30\r\n    compress\r\n    delaycompress\r\n    missingok\r\n    notifempty\r\n    create 644 www-data www-data\r\n    postrotate\r\n        systemctl reload nginx\r\n    endscript\r\n}\r\n```\r\n\r\n### 2. Security Log Monitoring\r\n\r\n#### Failed Login Attempts\r\n```bash\r\n# Monitor authentication failures\r\ngrep \"Authentication failed\" /var/log/orthodox-metrics/security.log | tail -20\r\n\r\n# Check for brute force attempts\r\ngrep \"Authentication failed\" /var/log/orthodox-metrics/security.log | \\\r\n    awk '{print $5}' | sort | uniq -c | sort -nr | head -10\r\n```\r\n\r\n#### Suspicious Activity Detection\r\n```javascript\r\n// middleware/security-monitor.js\r\nconst securityMonitor = (req, res, next) => {\r\n    const suspiciousPatterns = [\r\n        /\\.\\.\\//, // Path traversal\r\n        /<script/i, // XSS attempts\r\n        /union.*select/i, // SQL injection\r\n        /eval\\(/i, // Code injection\r\n    ];\r\n    \r\n    const userAgent = req.get('User-Agent') || '';\r\n    const url = req.url;\r\n    const ip = req.ip;\r\n    \r\n    // Check for suspicious patterns\r\n    suspiciousPatterns.forEach(pattern => {\r\n        if (pattern.test(url) || pattern.test(userAgent)) {\r\n            logger.warn(`Suspicious activity detected`, {\r\n                ip,\r\n                url,\r\n                userAgent,\r\n                pattern: pattern.toString()\r\n            });\r\n        }\r\n    });\r\n    \r\n    next();\r\n};\r\n```\r\n\r\n## Alert Management\r\n\r\n### 1. System Alerts\r\n\r\n#### Email Alerts Configuration\r\n```javascript\r\n// utils/alerting.js\r\nconst nodemailer = require('nodemailer');\r\n\r\nclass AlertManager {\r\n    constructor() {\r\n        this.transporter = nodemailer.createTransporter({\r\n            host: 'smtp.gmail.com',\r\n            port: 587,\r\n            secure: false,\r\n            auth: {\r\n                user: process.env.[REDACTED],\r\n                pass: process.env.[REDACTED]\r\n            }\r\n        });\r\n    }\r\n    \r\n    async sendAlert(level, message, details = {}) {\r\n        const alertEmail = {\r\n            from: process.env.[REDACTED],\r\n            to: process.env.[REDACTED],\r\n            subject: `Orthodox Metrics Alert - ${level.toUpperCase()}`,\r\n            html: `\r\n                <h2>System Alert</h2>\r\n                <p><strong>Level:</strong> ${level}</p>\r\n                <p><strong>Message:</strong> ${message}</p>\r\n                <p><strong>Time:</strong> ${new Date().toISOString()}</p>\r\n                <p><strong>Details:</strong></p>\r\n                <pre>${JSON.stringify(details, null, 2)}</pre>\r\n            `\r\n        };\r\n        \r\n        try {\r\n            await this.transporter.sendMail(alertEmail);\r\n            console.log(`Alert sent: ${level} - ${message}`);\r\n        } catch (error) {\r\n            console.error('Failed to send alert:', error);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Critical System Alerts\r\n```bash\r\n#!/bin/bash\r\n# alert-monitor.sh\r\n\r\n# Check disk space\r\nDISK_USAGE=$(df -h | grep '/dev/sda1' | awk '{print $5}' | sed 's/%//')\r\nif [ $DISK_USAGE -gt 80 ]; then\r\n    echo \"CRITICAL: Disk usage is ${DISK_USAGE}%\"\r\n    # Send alert\r\nfi\r\n\r\n# Check memory usage\r\nMEMORY_USAGE=$(free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}')\r\nif [ $MEMORY_USAGE -gt 85 ]; then\r\n    echo \"WARNING: Memory usage is ${MEMORY_USAGE}%\"\r\n    # Send alert\r\nfi\r\n\r\n# Check if application is running\r\nif ! pgrep -f \"orthodox-metrics\" > /dev/null; then\r\n    echo \"CRITICAL: Orthodox Metrics application is not running\"\r\n    # Send alert and restart\r\n    pm2 restart orthodox-metrics\r\nfi\r\n```\r\n\r\n### 2. Performance Alerts\r\n\r\n#### Response Time Thresholds\r\n```javascript\r\n// middleware/performance-alerts.js\r\nconst AlertManager = require('../utils/alerting');\r\n\r\nconst performanceAlerts = (req, res, next) => {\r\n    const start = Date.now();\r\n    \r\n    res.on('finish', async () => {\r\n        const duration = Date.now() - start;\r\n        \r\n        // Alert on slow responses\r\n        if (duration > 5000) {\r\n            await AlertManager.sendAlert('WARNING', \r\n                `Slow response time: ${duration}ms`, {\r\n                    url: req.url,\r\n                    method: req.method,\r\n                    userAgent: req.get('User-Agent')\r\n                });\r\n        }\r\n        \r\n        // Alert on server errors\r\n        if (res.statusCode >= 500) {\r\n            await AlertManager.sendAlert('ERROR', \r\n                `Server error: ${res.statusCode}`, {\r\n                    url: req.url,\r\n                    method: req.method,\r\n                    duration: duration\r\n                });\r\n        }\r\n    });\r\n    \r\n    next();\r\n};\r\n```\r\n\r\n## Health Checks\r\n\r\n### 1. Application Health Check\r\n```javascript\r\n// routes/health.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst mysql = require('../config/database');\r\n\r\nrouter.get('/health', async (req, res) => {\r\n    const health = {\r\n        status: 'healthy',\r\n        timestamp: new Date().toISOString(),\r\n        uptime: process.uptime(),\r\n        memory: process.memoryUsage(),\r\n        checks: {}\r\n    };\r\n    \r\n    try {\r\n        // Database connectivity check\r\n        await mysql.execute('SELECT 1');\r\n        health.checks.database = { status: 'healthy' };\r\n    } catch (error) {\r\n        health.checks.database = { \r\n            status: 'unhealthy', \r\n            error: error.message \r\n        };\r\n        health.status = 'unhealthy';\r\n    }\r\n    \r\n    // File system check\r\n    try {\r\n        const fs = require('fs');\r\n        fs.accessSync('./uploads', fs.constants.W_OK);\r\n        health.checks.filesystem = { status: 'healthy' };\r\n    } catch (error) {\r\n        health.checks.filesystem = { \r\n            status: 'unhealthy', \r\n            error: error.message \r\n        };\r\n        health.status = 'unhealthy';\r\n    }\r\n    \r\n    const statusCode = health.status === 'healthy' ? 200 : 503;\r\n    res.status(statusCode).json(health);\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n### 2. Automated Health Monitoring\r\n```bash\r\n#!/bin/bash\r\n# health-monitor.sh\r\n\r\nURL=\"http://localhost:3001/health\"\r\nTIMEOUT=10\r\n\r\n# Check application health\r\nRESPONSE=$(curl -s -o /dev/null -w \"%{http_code}\" --max-time $TIMEOUT $URL)\r\n\r\nif [ $RESPONSE -eq 200 ]; then\r\n    echo \"✓ Application health check: PASSED\"\r\nelse\r\n    echo \"✗ Application health check: FAILED (HTTP $RESPONSE)\"\r\n    \r\n    # Restart application if health check fails\r\n    pm2 restart orthodox-metrics\r\n    \r\n    # Send alert\r\n    echo \"Application restarted due to health check failure\" | \\\r\n        mail -s \"Orthodox Metrics Alert\" admin@example.com\r\nfi\r\n```\r\n\r\n## Monitoring Dashboard\r\n\r\n### 1. Custom Monitoring Dashboard\r\n```html\r\n<!-- monitoring-dashboard.html -->\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Orthodox Metrics Monitoring Dashboard</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <style>\r\n        body { font-family: Arial, sans-serif; margin: 20px; }\r\n        .metric-card { \r\n            border: 1px solid #ddd; \r\n            padding: 15px; \r\n            margin: 10px 0; \r\n            border-radius: 5px; \r\n        }\r\n        .status-healthy { background-color: #d4edda; }\r\n        .status-warning { background-color: #fff3cd; }\r\n        .status-critical { background-color: #f8d7da; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Orthodox Metrics System Monitoring</h1>\r\n    \r\n    <div id=\"system-status\" class=\"metric-card\">\r\n        <h3>System Status</h3>\r\n        <div id=\"status-indicator\">Loading...</div>\r\n    </div>\r\n    \r\n    <div id=\"performance-metrics\" class=\"metric-card\">\r\n        <h3>Performance Metrics</h3>\r\n        <canvas id=\"performance-chart\"></canvas>\r\n    </div>\r\n    \r\n    <div id=\"error-logs\" class=\"metric-card\">\r\n        <h3>Recent Errors</h3>\r\n        <div id=\"error-list\">Loading...</div>\r\n    </div>\r\n    \r\n    <script>\r\n        // Fetch and display monitoring data\r\n        async function updateDashboard() {\r\n            try {\r\n                const response = await fetch('/api/monitoring/status');\r\n                const data = await response.json();\r\n                \r\n                updateSystemStatus(data);\r\n                updatePerformanceChart(data.performance);\r\n                updateErrorLogs(data.errors);\r\n            } catch (error) {\r\n                console.error('Failed to update dashboard:', error);\r\n            }\r\n        }\r\n        \r\n        // Update dashboard every 30 seconds\r\n        setInterval(updateDashboard, 30000);\r\n        updateDashboard();\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Best Practices\r\n\r\n### 1. Monitoring Strategy\r\n- **Proactive Monitoring**: Set up alerts before issues become critical\r\n- **Comprehensive Coverage**: Monitor all system components\r\n- **Historical Data**: Keep performance metrics for trend analysis\r\n- **Regular Review**: Weekly monitoring reports and monthly analysis\r\n\r\n### 2. Alert Management\r\n- **Severity Levels**: Use appropriate alert levels (INFO, WARNING, ERROR, CRITICAL)\r\n- **Alert Fatigue**: Avoid too many false positives\r\n- **Escalation**: Define clear escalation procedures\r\n- **Documentation**: Log all incidents and resolutions\r\n\r\n### 3. Performance Optimization\r\n- **Baseline Metrics**: Establish performance baselines\r\n- **Regular Audits**: Monthly performance reviews\r\n- **Capacity Planning**: Monitor trends for scaling decisions\r\n- **Optimization**: Continuously improve based on metrics\r\n\r\n## Troubleshooting Common Issues\r\n\r\n### High CPU Usage\r\n```bash\r\n# Identify processes consuming CPU\r\ntop -p $(pgrep -f orthodox-metrics)\r\n\r\n# Check for memory leaks\r\npm2 monit\r\n\r\n# Analyze application logs\r\ngrep -i \"error\\|exception\" /var/log/orthodox-metrics/application.log\r\n```\r\n\r\n### Database Performance Issues\r\n```sql\r\n-- Check for long-running queries\r\nSELECT * FROM INFORMATION_SCHEMA.PROCESSLIST \r\nWHERE TIME > 10 AND COMMAND != 'Sleep';\r\n\r\n-- Analyze slow query log\r\nmysqldumpslow /var/log/mysql/slow.log\r\n```\r\n\r\n### Memory Issues\r\n```bash\r\n# Check memory usage by process\r\nps aux --sort=-%mem | head -20\r\n\r\n# Check for memory leaks\r\nvalgrind --tool=memcheck --leak-check=full node index.js\r\n```\r\n\r\n## Conclusion\r\n\r\nEffective monitoring is crucial for maintaining system reliability and performance. This guide provides the foundation for comprehensive monitoring of the Orthodox Metrics system. Regular monitoring, combined with proactive alerting and performance optimization, ensures optimal system operation.\r\n\r\nFor additional monitoring tools and advanced configurations, refer to the [OPERATIONS_GUIDE.md](OPERATIONS_GUIDE.md) and [TROUBLESHOOTING_500_ERRORS.md](TROUBLESHOOTING_500_ERRORS.md) documentation.\r\n"
    },
    "complexity": {
      "totalLines": 677,
      "codeLines": 440,
      "commentLines": 113,
      "commentRatio": 0.20433996383363473,
      "averageLineLength": 30.27124773960217
    },
    "lastAnalyzed": "2025-07-28T07:19:58.181Z"
  },
  "contentHash": "eb288c14ac54b1c7f6e2ea6aa982adf6671c0a9000a821cd8b2b7f4141f8b347",
  "discoveredAt": "2025-07-28T07:19:58.181Z"
}