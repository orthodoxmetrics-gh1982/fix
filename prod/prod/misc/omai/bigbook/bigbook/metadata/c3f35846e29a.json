{
  "id": "c3f35846e29a",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/debug-public-ocr-simple.js",
  "relativePath": "server/testing/debug-public-ocr-simple.js",
  "name": "debug-public-ocr-simple.js",
  "extension": ".js",
  "size": 5833,
  "modified": "2025-07-11T10:49:29.380Z",
  "created": "2025-07-11T00:56:20.518Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 165,
      "characters": 5765,
      "words": 594
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "fs",
        "line": 17
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 18
      },
      {
        "type": "npm_package",
        "name": "@google-cloud/vision",
        "line": 37
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 48
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 78
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 79
      },
      {
        "type": "npm_package",
        "name": "canvas",
        "line": 80
      },
      {
        "type": "npm_package",
        "name": "multer",
        "line": 134
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 45,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 49,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 54,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n// Debug script for Public OCR Service - CommonJS version\r\n// Run with: node debug-public-ocr-simple.js\r\n\r\nconsole.log('üîç Simple Public OCR Service Debug\\n');\r\n\r\n// Test 1: Test OCR processing service directly\r\nconsole.log('1Ô∏è‚É£ Testing OCR processing service...');\r\ntry {\r\n  const ocrService = require('./services/ocrProcessingService');\r\n  console.log('‚úÖ OCR service imported successfully');\r\n  console.log('   - Service type:', typeof ocrService);\r\n  console.log('   - Available methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(ocrService)).filter(name => name !== 'constructor'));\r\n  \r\n  // Test if we can create a temp directory\r\n  const fs = require('fs');\r\n  const path = require('path');\r\n  \r\n  const tempDir = path.join(__dirname, 'temp');\r\n  if (!fs.existsSync(tempDir)) {\r\n    fs.mkdirSync(tempDir, { recursive: true });\r\n    console.log('‚úÖ Temp directory created');\r\n  } else {\r\n    console.log('‚úÖ Temp directory exists');\r\n  }\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå OCR service test error:', error.message);\r\n  console.error('   Stack:', error.stack);\r\n}\r\n\r\n// Test 2: Test Google Vision API directly\r\nconsole.log('\\n2Ô∏è‚É£ Testing Google Vision API...');\r\ntry {\r\n  // Test if we can import Google Vision\r\n  const vision = require('@google-cloud/vision');\r\n  console.log('‚úÖ Google Vision library imported');\r\n  \r\n  // Test client creation\r\n  const client = new vision.ImageAnnotatorClient();\r\n  console.log('‚úÖ Google Vision client created');\r\n  \r\n  // Check credentials\r\n  if (process.env.[REDACTED]) {\r\n    console.log('‚úÖ Google credentials configured');\r\n    \r\n    const fs = require('fs');\r\n    if (fs.existsSync(process.env.[REDACTED])) {\r\n      console.log('‚úÖ Credentials file exists');\r\n      \r\n      // Try to read the credentials file\r\n      try {\r\n        const credentialsContent = fs.readFileSync(process.env.[REDACTED], 'utf8');\r\n        const credentials = JSON.parse(credentialsContent);\r\n        console.log('‚úÖ Credentials file is valid JSON');\r\n        console.log(`   Project ID: ${credentials.project_id}`);\r\n        console.log(`   Client email: ${credentials.client_email}`);\r\n      } catch(credError) {\r\n        console.error('‚ùå Credentials file error:', credError.message);\r\n      }\r\n    } else {\r\n      console.error('‚ùå Credentials file not found');\r\n    }\r\n  } else {\r\n    console.error('‚ùå GOOGLE_APPLICATION_CREDENTIALS not set');\r\n  }\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå Google Vision test error:', error.message);\r\n  console.error('   Stack:', error.stack);\r\n}\r\n\r\n// Test 3: Test with a simple test image\r\nconsole.log('\\n3Ô∏è‚É£ Testing with simple image...');\r\nasync function testSimpleOCR() {\r\n  try {\r\n    const fs = require('fs');\r\n    const path = require('path');\r\n    const { createCanvas } = require('canvas');\r\n    \r\n    // Create a simple test image with text\r\n    const canvas = createCanvas(400, 200);\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // White background\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, 400, 200);\r\n    \r\n    // Black text\r\n    ctx.fillStyle = 'black';\r\n    ctx.font = '30px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Hello Orthodox Church', 200, 80);\r\n    ctx.fillText('Test OCR Document', 200, 130);\r\n    \r\n    // Save the image\r\n    const testImagePath = path.join(__dirname, 'temp', 'test-ocr.png');\r\n    const buffer = canvas.toBuffer('image/png');\r\n    fs.writeFileSync(testImagePath, buffer);\r\n    \r\n    console.log('‚úÖ Test image created');\r\n    console.log(`   Path: ${testImagePath}`);\r\n    console.log(`   Size: ${buffer.length} bytes`);\r\n    \r\n    // Now test OCR processing\r\n    const ocrService = require('./services/ocrProcessingService');\r\n    \r\n    console.log('üìÑ Testing OCR processing...');\r\n    const result = await ocrService.performOcr(testImagePath, 'en');\r\n    \r\n    console.log('‚úÖ OCR processing successful!');\r\n    console.log(`   Raw result:`, result);\r\n    \r\n    // Check if result has the expected structure\r\n    if (result && result.length > 0 && result[0].textAnnotations) {\r\n      const text = result[0].textAnnotations[0]?.description || '';\r\n      const confidence = result[0].textAnnotations[0]?.confidence || 0;\r\n      console.log(`   Detected text: \"${text}\"`);\r\n      console.log(`   Confidence: ${(confidence * 100).toFixed(1)}%`);\r\n    } else {\r\n      console.log('   No text detected in image');\r\n    }\r\n    \r\n  } catch(error) {\r\n    console.error('‚ùå Simple OCR test failed:', error.message);\r\n    console.error('   Stack:', error.stack);\r\n  }\r\n}\r\n\r\n// Test 4: Test multer file handling\r\nconsole.log('\\n4Ô∏è‚É£ Testing multer configuration...');\r\ntry {\r\n  const multer = require('multer');\r\n  console.log('‚úÖ Multer imported successfully');\r\n  \r\n  // Test multer storage configuration\r\n  const storage = multer.memoryStorage();\r\n  const upload = multer({\r\n    storage: storage,\r\n    limits: {\r\n      fileSize: 10 * 1024 * 1024, // 10MB limit\r\n      files: 5 // Maximum 5 files\r\n    }\r\n  });\r\n  \r\n  console.log('‚úÖ Multer configured successfully');\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå Multer test error:', error.message);\r\n}\r\n\r\n// Run the async test\r\nconsole.log('\\nüöÄ Running async OCR test...');\r\ntestSimpleOCR().then(() => {\r\n  console.log('\\nüéâ Debug Complete!');\r\n  console.log('\\nüìã Summary:');\r\n  console.log('   If OCR processing works here, the issue is in the HTTP route');\r\n  console.log('   If OCR processing fails, check Google Vision API setup');\r\n  console.log('\\nüí° Check the server console for any real-time errors during actual requests');\r\n}).catch((error) => {\r\n  console.error('\\n‚ùå Async test failed:', error.message);\r\n  console.error('   This indicates the core OCR processing has issues');\r\n});\r\n"
    },
    "complexity": {
      "totalLines": 165,
      "codeLines": 116,
      "commentLines": 20,
      "commentRatio": 0.14705882352941177,
      "averageLineLength": 40.47794117647059
    },
    "lastAnalyzed": "2025-07-28T07:20:01.189Z"
  },
  "contentHash": "f5110f033eba31037e1bf3f29872a7873e3dfc7c818b5e4f76dcc4588f8f2f0a",
  "discoveredAt": "2025-07-28T07:20:01.189Z"
}