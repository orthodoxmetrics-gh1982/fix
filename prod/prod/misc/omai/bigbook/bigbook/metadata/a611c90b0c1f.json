{
  "id": "a611c90b0c1f",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/test-session-fix.js",
  "relativePath": "server/debug/test-session-fix.js",
  "name": "test-session-fix.js",
  "extension": ".js",
  "size": 5612,
  "modified": "2025-07-24T14:50:26.348Z",
  "created": "2025-07-24T14:50:26.348Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 137,
      "characters": 5554,
      "words": 524
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 23
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 45,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 34,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 34,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 35,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 35,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 36,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 36,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 37,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 37,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 38,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 38,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 41,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 42,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 43,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 44,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 45,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\nconsole.log('üîç COMPREHENSIVE SESSION DEBUG ANALYSIS');\r\nconsole.log('========================================\\n');\r\n\r\n// Load environment variables - try multiple locations\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n// Try loading from various possible locations\r\nconst envPaths = [\r\n  path.resolve(__dirname, '../.env.production'),\r\n  path.resolve(__dirname, '../../.env.production'), \r\n  path.resolve(__dirname, '../.env'),\r\n  path.resolve(__dirname, '../../.env')\r\n];\r\n\r\nconsole.log('üîß Loading environment variables...');\r\nlet envLoaded = false;\r\nfor (const envPath of envPaths) {\r\n  if (fs.existsSync(envPath)) {\r\n    console.log(`   ‚úÖ Found env file: ${envPath}`);\r\n    require('dotenv').config({ path: envPath });\r\n    envLoaded = true;\r\n    break;\r\n  }\r\n}\r\n\r\nif (!envLoaded) {\r\n  console.log('   ‚ö†Ô∏è  No .env file found, using system environment');\r\n}\r\n\r\n// Set production environment variables as fallback (from start-production.sh)\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'production';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'localhost';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'orthodoxapps';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'Summerof1982@!';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'orthodoxmetrics_db';\r\n\r\nconsole.log('üîß Environment check:');\r\nconsole.log('   NODE_ENV:', process.env.[REDACTED]);\r\nconsole.log('   DB_HOST:', process.env.[REDACTED]);\r\nconsole.log('   DB_USER:', process.env.[REDACTED]);\r\nconsole.log('   DB_NAME:', process.env.[REDACTED]);\r\nconsole.log('   DB_PASSWORD:'[REDACTED]'SET' : 'NOT SET');\r\nconsole.log('');\r\n\r\nconst { promisePool } = require('../../config/db');\r\n\r\nasync function debugSessionIssue() {\r\n  try {\r\n    console.log('üìã ISSUE ANALYSIS:');\r\n    console.log('==================');\r\n    console.log('‚úÖ Login succeeds, but sessions don\\'t persist across requests');\r\n    console.log('‚úÖ Each request gets a different session ID');\r\n    console.log('‚úÖ Database schema fixed (no more \"status\" column error)');\r\n    console.log('‚ùå Session cookies not being transmitted properly\\n');\r\n\r\n    // 1. Test database connection\r\n    console.log('1Ô∏è‚É£ TESTING DATABASE CONNECTION:');\r\n    console.log('--------------------------------');\r\n    const [dbTest] = await promisePool.query('SELECT 1 as test');\r\n    console.log('‚úÖ Database connection: WORKING');\r\n    \r\n    // 2. Check user exists\r\n    console.log('\\n2Ô∏è‚É£ CHECKING USER IN DATABASE:');\r\n    console.log('------------------------------');\r\n    const [users] = await promisePool.query(\r\n      'SELECT id, email, role, is_active FROM users WHERE email = ?', \r\n      ['superadmin@orthodoxmetrics.com']\r\n    );\r\n    \r\n    if (users.length === 0) {\r\n      console.log('‚ùå User not found in database!');\r\n      return;\r\n    }\r\n    \r\n    const user = users[0];\r\n    console.log('‚úÖ User found:');\r\n    console.log(`   Email: ${user.email}`);\r\n    console.log(`   Role: ${user.role}`);\r\n    console.log(`   Active: ${user.is_active}`);\r\n\r\n    // 3. Check session table\r\n    console.log('\\n3Ô∏è‚É£ CHECKING SESSION STORAGE:');\r\n    console.log('-----------------------------');\r\n    try {\r\n      const [sessions] = await promisePool.query('SELECT COUNT(*) as count FROM sessions');\r\n      console.log(`‚úÖ Sessions table exists with ${sessions[0].count} sessions`);\r\n    } catch (sessionErr) {\r\n      console.log('‚ùå Sessions table issue:', sessionErr.message);\r\n    }\r\n\r\n    console.log('\\nüö® ROOT CAUSE ANALYSIS:');\r\n    console.log('=======================');\r\n    console.log('The issue is COOKIE TRANSMISSION, not session storage.');\r\n    console.log('Each request creates a NEW session instead of using the existing one.\\n');\r\n\r\n    console.log('üîß PROBABLE CAUSES:');\r\n    console.log('===================');\r\n    console.log('1. CORS configuration missing credentials: true');\r\n    console.log('2. Frontend not sending cookies with API requests');\r\n    console.log('3. Cookie domain/path mismatch');\r\n    console.log('4. SameSite policy blocking cookies');\r\n    console.log('5. Browser security settings blocking cookies\\n');\r\n\r\n    console.log('üéØ IMMEDIATE FIXES TO APPLY:');\r\n    console.log('============================');\r\n    console.log('1. Enable CORS credentials on server');\r\n    console.log('2. Configure frontend to send cookies with requests');\r\n    console.log('3. Adjust cookie settings for broader compatibility');\r\n    console.log('4. Add cookie debugging endpoints');\r\n    console.log('5. Test with simplified cookie configuration\\n');\r\n\r\n    console.log('üîç DEBUGGING STEPS:');\r\n    console.log('===================');\r\n    console.log('1. Check browser DevTools > Application > Cookies');\r\n    console.log('   - Is \"orthodox.sid\" cookie being set after login?');\r\n    console.log('   - What domain/path is set on the cookie?');\r\n    console.log('');\r\n    console.log('2. Check browser DevTools > Network > Any API request');\r\n    console.log('   - Are cookies being sent in Request Headers?');\r\n    console.log('   - Look for \"Cookie: orthodox.sid=...\" in request');\r\n    console.log('');\r\n    console.log('3. Check server logs for consistent session IDs');\r\n    console.log('   - Same session ID should appear across multiple requests');\r\n    console.log('   - If different IDs, cookies are not being transmitted\\n');\r\n\r\n    console.log('‚úÖ Database and user verification: COMPLETE');\r\n    console.log('üîß Next step: Fix CORS and cookie configuration');\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Debug error:', error);\r\n  }\r\n}\r\n\r\ndebugSessionIssue(); "
    },
    "complexity": {
      "totalLines": 137,
      "codeLines": 109,
      "commentLines": 7,
      "commentRatio": 0.0603448275862069,
      "averageLineLength": 46.422413793103445
    },
    "lastAnalyzed": "2025-07-28T07:20:00.251Z"
  },
  "contentHash": "ed1fc93dbcc9858eca1f0817e559bda8e953d376abac7381ccde6d31d9d0d459",
  "discoveredAt": "2025-07-28T07:20:00.251Z"
}