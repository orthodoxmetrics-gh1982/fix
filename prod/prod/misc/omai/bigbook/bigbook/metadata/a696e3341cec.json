{
  "id": "a696e3341cec",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/07-09-25/BACKUP_DISASTER_RECOVERY.md",
  "relativePath": "docs/archive/07-09-25/BACKUP_DISASTER_RECOVERY.md",
  "name": "BACKUP_DISASTER_RECOVERY.md",
  "extension": ".md",
  "size": 17258,
  "modified": "2025-07-09T04:32:16.331Z",
  "created": "2025-07-09T04:32:16.331Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 653,
      "characters": 17258,
      "words": 2001
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 7
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 56,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 96,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 343,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 387,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Orthodox Metrics System - Backup and Disaster Recovery Guide\r\n\r\n## Overview\r\n\r\nThis guide provides comprehensive backup and disaster recovery procedures for the Orthodox Metrics church management system. It covers data protection, backup strategies, recovery procedures, and business continuity planning.\r\n\r\n## Backup Strategy\r\n\r\n### 1. Backup Components\r\n\r\n#### Critical Data\r\n- **Database**: MySQL database with all church and user data\r\n- **Application Files**: Server-side application code and configurations\r\n- **User Uploads**: Documents, images, and other user-generated content\r\n- **Configuration Files**: Nginx, PM2, and system configurations\r\n- **SSL Certificates**: Security certificates and keys\r\n- **Logs**: System and application logs for forensic analysis\r\n\r\n#### Backup Locations\r\n- **Primary**: Local backup storage on the server\r\n- **Secondary**: Remote backup storage (cloud or offsite)\r\n- **Tertiary**: Offline backup storage (weekly full backups)\r\n\r\n### 2. Backup Frequency\r\n\r\n#### Daily Backups\r\n- Database dump (compressed)\r\n- Application logs\r\n- User uploads (incremental)\r\n- Configuration files\r\n\r\n#### Weekly Backups\r\n- Full system backup\r\n- Database optimization and repair\r\n- Log rotation and archival\r\n- SSL certificate verification\r\n\r\n#### Monthly Backups\r\n- Complete system image\r\n- Long-term archival\r\n- Backup verification tests\r\n- Disaster recovery testing\r\n\r\n## Database Backup\r\n\r\n### 1. MySQL Backup Scripts\r\n\r\n#### Daily Database Backup\r\n```bash\r\n#!/bin/bash\r\n# daily-db-backup.sh\r\n\r\n# Configuration\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"backup_user\"\r\nDB_PASS=\"[REDACTED]\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"$BACKUP_DIR/db_backup_$DATE.sql.gz\"\r\n\r\n# Create backup directory\r\nmkdir -p $BACKUP_DIR\r\n\r\n# Create database dump\r\nmysqldump -u$DB_USER -p$DB_PASS \\\r\n    --single-transaction \\\r\n    --routines \\\r\n    --triggers \\\r\n    --events \\\r\n    --hex-blob \\\r\n    $DB_NAME | gzip > $BACKUP_FILE\r\n\r\n# Verify backup\r\nif [ $? -eq 0 ]; then\r\n    echo \"Database backup completed: $BACKUP_FILE\"\r\n    \r\n    # Log backup success\r\n    echo \"$(date): Database backup successful - $BACKUP_FILE\" >> /var/log/orthodox-metrics/backup.log\r\n    \r\n    # Remove backups older than 7 days\r\n    find $BACKUP_DIR -name \"db_backup_*.sql.gz\" -mtime +7 -delete\r\nelse\r\n    echo \"Database backup failed!\"\r\n    echo \"$(date): Database backup FAILED\" >> /var/log/orthodox-metrics/backup.log\r\n    exit 1\r\nfi\r\n```\r\n\r\n#### Database Backup with Verification\r\n```bash\r\n#!/bin/bash\r\n# verified-db-backup.sh\r\n\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"backup_user\"\r\nDB_PASS=\"[REDACTED]\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"$BACKUP_DIR/db_backup_$DATE.sql.gz\"\r\nTEST_DB=\"orthodox_metrics_test\"\r\n\r\n# Create backup\r\nmysqldump -u$DB_USER -p$DB_PASS \\\r\n    --single-transaction \\\r\n    --routines \\\r\n    --triggers \\\r\n    --events \\\r\n    --hex-blob \\\r\n    $DB_NAME | gzip > $BACKUP_FILE\r\n\r\n# Verify backup by restoring to test database\r\necho \"Verifying backup...\"\r\nmysql -u$DB_USER -p$DB_PASS -e \"DROP DATABASE IF EXISTS $TEST_DB; CREATE DATABASE $TEST_DB;\"\r\ngunzip < $BACKUP_FILE | mysql -u$DB_USER -p$DB_PASS $TEST_DB\r\n\r\n# Check if restoration was successful\r\nTABLES=$(mysql -u$DB_USER -p$DB_PASS $TEST_DB -e \"SHOW TABLES;\" | wc -l)\r\nif [ $TABLES -gt 1 ]; then\r\n    echo \"Backup verification successful - $TABLES tables restored\"\r\n    mysql -u$DB_USER -p$DB_PASS -e \"DROP DATABASE $TEST_DB;\"\r\nelse\r\n    echo \"Backup verification failed!\"\r\n    exit 1\r\nfi\r\n```\r\n\r\n### 2. Point-in-Time Recovery Setup\r\n\r\n#### Enable Binary Logging\r\n```sql\r\n-- Add to MySQL configuration (/etc/mysql/my.cnf)\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nserver-id=1\r\nbinlog-format=ROW\r\nexpire_logs_days=7\r\nmax_binlog_size=100M\r\n```\r\n\r\n#### Binary Log Backup\r\n```bash\r\n#!/bin/bash\r\n# binlog-backup.sh\r\n\r\nMYSQL_DATA_DIR=\"/var/lib/mysql\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics/binlogs\"\r\nDATE=$(date +%Y%m%d)\r\n\r\n# Create backup directory\r\nmkdir -p $BACKUP_DIR/$DATE\r\n\r\n# Flush binary logs\r\nmysql -u root -p$MYSQL_ROOT_PASSWORD -e \"FLUSH LOGS;\"\r\n\r\n# Copy binary logs\r\ncp $MYSQL_DATA_DIR/mysql-bin.* $BACKUP_DIR/$DATE/\r\n\r\n# Compress old binary logs\r\nfind $BACKUP_DIR -name \"mysql-bin.*\" -mtime +1 -exec gzip {} \\;\r\n\r\n# Remove binary logs older than 7 days\r\nfind $BACKUP_DIR -name \"mysql-bin.*\" -mtime +7 -delete\r\n```\r\n\r\n## Application Backup\r\n\r\n### 1. Application Files Backup\r\n\r\n#### Server Application Backup\r\n```bash\r\n#!/bin/bash\r\n# app-backup.sh\r\n\r\nAPP_DIR=\"/var/www/orthodox-metrics\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"$BACKUP_DIR/app_backup_$DATE.tar.gz\"\r\n\r\n# Create backup directory\r\nmkdir -p $BACKUP_DIR\r\n\r\n# Create application backup\r\ntar -czf $BACKUP_FILE \\\r\n    --exclude=\"node_modules\" \\\r\n    --exclude=\"logs\" \\\r\n    --exclude=\"uploads\" \\\r\n    $APP_DIR\r\n\r\n# Verify backup\r\nif [ $? -eq 0 ]; then\r\n    echo \"Application backup completed: $BACKUP_FILE\"\r\n    \r\n    # Remove backups older than 30 days\r\n    find $BACKUP_DIR -name \"app_backup_*.tar.gz\" -mtime +30 -delete\r\nelse\r\n    echo \"Application backup failed!\"\r\n    exit 1\r\nfi\r\n```\r\n\r\n#### Configuration Files Backup\r\n```bash\r\n#!/bin/bash\r\n# config-backup.sh\r\n\r\nCONFIG_DIRS=(\r\n    \"/etc/nginx\"\r\n    \"/etc/mysql\"\r\n    \"/etc/ssl\"\r\n    \"/etc/systemd/system\"\r\n    \"/etc/cron.d\"\r\n)\r\n\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"$BACKUP_DIR/config_backup_$DATE.tar.gz\"\r\n\r\n# Create backup directory\r\nmkdir -p $BACKUP_DIR\r\n\r\n# Create configuration backup\r\ntar -czf $BACKUP_FILE ${CONFIG_DIRS[@]}\r\n\r\necho \"Configuration backup completed: $BACKUP_FILE\"\r\n```\r\n\r\n### 2. User Uploads Backup\r\n\r\n#### Incremental Uploads Backup\r\n```bash\r\n#!/bin/bash\r\n# uploads-backup.sh\r\n\r\nUPLOADS_DIR=\"/var/www/orthodox-metrics/uploads\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics/uploads\"\r\nDATE=$(date +%Y%m%d)\r\n\r\n# Create backup directory\r\nmkdir -p $BACKUP_DIR\r\n\r\n# Incremental backup using rsync\r\nrsync -av \\\r\n    --delete \\\r\n    --backup \\\r\n    --backup-dir=$BACKUP_DIR/deleted_$DATE \\\r\n    $UPLOADS_DIR/ \\\r\n    $BACKUP_DIR/current/\r\n\r\n# Compress old backups\r\nfind $BACKUP_DIR -name \"deleted_*\" -mtime +7 -exec tar -czf {}.tar.gz {} \\; -exec rm -rf {} \\;\r\n\r\necho \"Uploads backup completed\"\r\n```\r\n\r\n## Remote Backup\r\n\r\n### 1. Cloud Backup Setup\r\n\r\n#### AWS S3 Backup\r\n```bash\r\n#!/bin/bash\r\n# s3-backup.sh\r\n\r\nAWS_BUCKET=\"orthodox-metrics-backups\"\r\nLOCAL_BACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nS3_PREFIX=\"daily-backups\"\r\nDATE=$(date +%Y%m%d)\r\n\r\n# Upload database backup\r\naws s3 sync $LOCAL_BACKUP_DIR/ s3://$AWS_BUCKET/$S3_PREFIX/$DATE/ \\\r\n    --exclude \"*\" \\\r\n    --include \"db_backup_*.sql.gz\"\r\n\r\n# Upload application backup\r\naws s3 sync $LOCAL_BACKUP_DIR/ s3://$AWS_BUCKET/$S3_PREFIX/$DATE/ \\\r\n    --exclude \"*\" \\\r\n    --include \"app_backup_*.tar.gz\"\r\n\r\n# Remove old backups from S3 (keep 30 days)\r\naws s3 ls s3://$AWS_BUCKET/$S3_PREFIX/ | \\\r\n    awk '{print $4}' | \\\r\n    xargs -I {} aws s3 rm s3://$AWS_BUCKET/$S3_PREFIX/{} \\\r\n    --recursive --exclude \"*\" --include \"*$(date -d '30 days ago' +%Y%m%d)*\"\r\n```\r\n\r\n#### Google Cloud Storage Backup\r\n```bash\r\n#!/bin/bash\r\n# gcs-backup.sh\r\n\r\nGCS_BUCKET=\"orthodox-metrics-backups\"\r\nLOCAL_BACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d)\r\n\r\n# Upload to Google Cloud Storage\r\ngsutil -m rsync -r -d $LOCAL_BACKUP_DIR/ gs://$GCS_BUCKET/daily-backups/$DATE/\r\n\r\n# Set lifecycle policy to delete old backups\r\ngsutil lifecycle set backup-lifecycle.json gs://$GCS_BUCKET\r\n```\r\n\r\n### 2. Secure Remote Backup\r\n\r\n#### Encrypted Backup Transfer\r\n```bash\r\n#!/bin/bash\r\n# encrypted-backup.sh\r\n\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nREMOTE_HOST=\"backup.example.com\"\r\nREMOTE_USER=\"backup_user\"\r\nREMOTE_DIR=\"/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d)\r\n\r\n# Encrypt and transfer database backup\r\nfind $BACKUP_DIR -name \"db_backup_*.sql.gz\" -mtime -1 | while read file; do\r\n    # Encrypt file\r\n    gpg --cipher-algo AES256 --compress-algo 1 --s2k-cipher-algo AES256 \\\r\n        --s2k-digest-algo SHA512 --s2k-mode 3 --s2k-count 65011712 \\\r\n        --force-mdc --quiet --no-greeting --batch --yes \\\r\n        --passphrase-file /etc/orthodox-metrics/backup.key \\\r\n        --output \"$file.gpg\" --encrypt \"$file\"\r\n    \r\n    # Transfer encrypted file\r\n    scp \"$file.gpg\" $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR/\r\n    \r\n    # Remove local encrypted file\r\n    rm \"$file.gpg\"\r\ndone\r\n```\r\n\r\n## Disaster Recovery\r\n\r\n### 1. Recovery Procedures\r\n\r\n#### Database Recovery\r\n```bash\r\n#!/bin/bash\r\n# db-recovery.sh\r\n\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"root\"\r\nDB_PASS=\"[REDACTED]\"\r\nBACKUP_FILE=\"$1\"\r\n\r\nif [ -z \"$BACKUP_FILE\" ]; then\r\n    echo \"Usage: $0 <backup_file.sql.gz>\"\r\n    exit 1\r\nfi\r\n\r\n# Verify backup file exists\r\nif [ ! -f \"$BACKUP_FILE\" ]; then\r\n    echo \"Backup file not found: $BACKUP_FILE\"\r\n    exit 1\r\nfi\r\n\r\n# Stop application\r\npm2 stop orthodox-metrics\r\n\r\n# Drop and recreate database\r\nmysql -u$DB_USER -p$DB_PASS -e \"DROP DATABASE IF EXISTS $DB_NAME; CREATE DATABASE $DB_NAME;\"\r\n\r\n# Restore database\r\necho \"Restoring database from $BACKUP_FILE...\"\r\ngunzip < $BACKUP_FILE | mysql -u$DB_USER -p$DB_PASS $DB_NAME\r\n\r\n# Verify restoration\r\nTABLES=$(mysql -u$DB_USER -p$DB_PASS $DB_NAME -e \"SHOW TABLES;\" | wc -l)\r\nif [ $TABLES -gt 1 ]; then\r\n    echo \"Database restoration successful - $TABLES tables restored\"\r\n    \r\n    # Start application\r\n    pm2 start orthodox-metrics\r\nelse\r\n    echo \"Database restoration failed!\"\r\n    exit 1\r\nfi\r\n```\r\n\r\n#### Point-in-Time Recovery\r\n```bash\r\n#!/bin/bash\r\n# point-in-time-recovery.sh\r\n\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"root\"\r\nDB_PASS=\"[REDACTED]\"\r\nBACKUP_FILE=\"$1\"\r\nRECOVERY_TIME=\"$2\"\r\n\r\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\r\n    echo \"Usage: $0 <backup_file.sql.gz> <recovery_time>\"\r\n    echo \"Example: $0 db_backup_20241207.sql.gz '2024-12-07 14:30:00'\"\r\n    exit 1\r\nfi\r\n\r\n# Restore from backup\r\necho \"Restoring from backup...\"\r\nmysql -u$DB_USER -p$DB_PASS -e \"DROP DATABASE IF EXISTS $DB_NAME; CREATE DATABASE $DB_NAME;\"\r\ngunzip < $BACKUP_FILE | mysql -u$DB_USER -p$DB_PASS $DB_NAME\r\n\r\n# Apply binary logs up to recovery time\r\necho \"Applying binary logs up to $RECOVERY_TIME...\"\r\nmysqlbinlog --stop-datetime=\"$RECOVERY_TIME\" /var/lib/mysql/mysql-bin.* | \\\r\n    mysql -u$DB_USER -p$DB_PASS $DB_NAME\r\n\r\necho \"Point-in-time recovery completed\"\r\n```\r\n\r\n### 2. Application Recovery\r\n\r\n#### Complete System Recovery\r\n```bash\r\n#!/bin/bash\r\n# system-recovery.sh\r\n\r\nAPP_BACKUP=\"$1\"\r\nDB_BACKUP=\"$2\"\r\nCONFIG_BACKUP=\"$3\"\r\n\r\nif [ -z \"$APP_BACKUP\" ] || [ -z \"$DB_BACKUP\" ] || [ -z \"$CONFIG_BACKUP\" ]; then\r\n    echo \"Usage: $0 <app_backup.tar.gz> <db_backup.sql.gz> <config_backup.tar.gz>\"\r\n    exit 1\r\nfi\r\n\r\necho \"Starting system recovery...\"\r\n\r\n# Stop services\r\nsystemctl stop nginx\r\npm2 stop all\r\n\r\n# Restore application\r\necho \"Restoring application files...\"\r\ntar -xzf $APP_BACKUP -C /\r\n\r\n# Restore configuration\r\necho \"Restoring configuration files...\"\r\ntar -xzf $CONFIG_BACKUP -C /\r\n\r\n# Restore database\r\necho \"Restoring database...\"\r\n./db-recovery.sh $DB_BACKUP\r\n\r\n# Restore permissions\r\nchown -R www-data:www-data /var/www/orthodox-metrics\r\nchmod -R 755 /var/www/orthodox-metrics\r\n\r\n# Start services\r\nsystemctl start nginx\r\npm2 start /var/www/orthodox-metrics/ecosystem.config.js\r\n\r\necho \"System recovery completed\"\r\n```\r\n\r\n## Business Continuity\r\n\r\n### 1. Disaster Recovery Plan\r\n\r\n#### Recovery Time Objectives (RTO)\r\n- **Critical System Failure**: 4 hours\r\n- **Database Corruption**: 2 hours\r\n- **Complete Server Failure**: 24 hours\r\n- **Natural Disaster**: 72 hours\r\n\r\n#### Recovery Point Objectives (RPO)\r\n- **Database**: 1 hour maximum data loss\r\n- **Application Files**: 24 hours maximum data loss\r\n- **User Uploads**: 24 hours maximum data loss\r\n\r\n### 2. Emergency Procedures\r\n\r\n#### Emergency Contact List\r\n```text\r\nPrimary Administrator: admin@orthodoxmetrics.com\r\nSecondary Administrator: backup-admin@orthodoxmetrics.com\r\nHosting Provider: support@hostingcompany.com\r\nDatabase Administrator: dba@orthodoxmetrics.com\r\n```\r\n\r\n#### Emergency Recovery Steps\r\n1. **Assess the situation**\r\n   - Identify the scope of the failure\r\n   - Determine recovery priority\r\n   - Notify stakeholders\r\n\r\n2. **Immediate Actions**\r\n   - Stop affected services\r\n   - Secure the environment\r\n   - Begin recovery procedures\r\n\r\n3. **Recovery Implementation**\r\n   - Follow documented procedures\r\n   - Verify each step\r\n   - Document actions taken\r\n\r\n4. **Post-Recovery**\r\n   - Verify system functionality\r\n   - Notify users of service restoration\r\n   - Conduct post-incident review\r\n\r\n### 3. Testing and Validation\r\n\r\n#### Monthly Recovery Tests\r\n```bash\r\n#!/bin/bash\r\n# recovery-test.sh\r\n\r\nTEST_DB=\"orthodox_metrics_recovery_test\"\r\nLATEST_BACKUP=$(ls -t /var/backups/orthodox-metrics/db_backup_*.sql.gz | head -1)\r\n\r\necho \"Testing recovery with backup: $LATEST_BACKUP\"\r\n\r\n# Test database recovery\r\nmysql -u root -p$MYSQL_ROOT_PASSWORD -e \"DROP DATABASE IF EXISTS $TEST_DB; CREATE DATABASE $TEST_DB;\"\r\ngunzip < $LATEST_BACKUP | mysql -u root -p$MYSQL_ROOT_PASSWORD $TEST_DB\r\n\r\n# Verify recovery\r\nTABLES=$(mysql -u root -p$MYSQL_ROOT_PASSWORD $TEST_DB -e \"SHOW TABLES;\" | wc -l)\r\nif [ $TABLES -gt 1 ]; then\r\n    echo \"Recovery test PASSED - $TABLES tables restored\"\r\n    \r\n    # Test data integrity\r\n    USERS=$(mysql -u root -p$MYSQL_ROOT_PASSWORD $TEST_DB -e \"SELECT COUNT(*) FROM users;\" | tail -1)\r\n    CHURCHES=$(mysql -u root -p$MYSQL_ROOT_PASSWORD $TEST_DB -e \"SELECT COUNT(*) FROM churches;\" | tail -1)\r\n    \r\n    echo \"Data integrity: $USERS users, $CHURCHES churches\"\r\nelse\r\n    echo \"Recovery test FAILED\"\r\nfi\r\n\r\n# Cleanup\r\nmysql -u root -p$MYSQL_ROOT_PASSWORD -e \"DROP DATABASE $TEST_DB;\"\r\n```\r\n\r\n## Backup Automation\r\n\r\n### 1. Cron Job Configuration\r\n\r\n#### Daily Backup Cron Jobs\r\n```bash\r\n# /etc/cron.d/orthodox-metrics-backup\r\n\r\n# Database backup at 2:00 AM\r\n0 2 * * * root /usr/local/bin/daily-db-backup.sh\r\n\r\n# Application backup at 3:00 AM\r\n0 3 * * * root /usr/local/bin/app-backup.sh\r\n\r\n# Uploads backup at 4:00 AM\r\n0 4 * * * root /usr/local/bin/uploads-backup.sh\r\n\r\n# Remote backup at 5:00 AM\r\n0 5 * * * root /usr/local/bin/s3-backup.sh\r\n```\r\n\r\n#### Weekly Backup Cron Jobs\r\n```bash\r\n# Weekly full backup on Sunday at 1:00 AM\r\n0 1 * * 0 root /usr/local/bin/weekly-full-backup.sh\r\n\r\n# Weekly backup verification on Sunday at 6:00 AM\r\n0 6 * * 0 root /usr/local/bin/recovery-test.sh\r\n```\r\n\r\n### 2. Monitoring and Alerting\r\n\r\n#### Backup Status Monitoring\r\n```bash\r\n#!/bin/bash\r\n# backup-monitor.sh\r\n\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nLOG_FILE=\"/var/log/orthodox-metrics/backup.log\"\r\nALERT_EMAIL=\"admin@orthodoxmetrics.com\"\r\n\r\n# Check if daily backup completed\r\nTODAY=$(date +%Y%m%d)\r\nDB_BACKUP=$(find $BACKUP_DIR -name \"db_backup_${TODAY}_*.sql.gz\" | wc -l)\r\nAPP_BACKUP=$(find $BACKUP_DIR -name \"app_backup_${TODAY}_*.tar.gz\" | wc -l)\r\n\r\nif [ $DB_BACKUP -eq 0 ]; then\r\n    echo \"ALERT: Database backup missing for $TODAY\" | \\\r\n        mail -s \"Backup Alert - Database\" $ALERT_EMAIL\r\nfi\r\n\r\nif [ $APP_BACKUP -eq 0 ]; then\r\n    echo \"ALERT: Application backup missing for $TODAY\" | \\\r\n        mail -s \"Backup Alert - Application\" $ALERT_EMAIL\r\nfi\r\n```\r\n\r\n## Security Considerations\r\n\r\n### 1. Backup Security\r\n\r\n#### Encryption\r\n- All backups should be encrypted before storage\r\n- Use strong encryption algorithms (AES-256)\r\n- Secure key management practices\r\n- Regular key rotation\r\n\r\n#### Access Control\r\n- Limit backup access to authorized personnel\r\n- Use separate credentials for backup operations\r\n- Implement audit logging for backup access\r\n- Regular access review\r\n\r\n### 2. Secure Storage\r\n\r\n#### Local Storage\r\n- Secure backup directory permissions\r\n- Use dedicated backup user account\r\n- Implement file integrity checking\r\n- Regular security audits\r\n\r\n#### Remote Storage\r\n- Use secure transport protocols (HTTPS, SFTP)\r\n- Implement multi-factor authentication\r\n- Use service-specific access keys\r\n- Regular security assessments\r\n\r\n## Maintenance\r\n\r\n### 1. Backup Maintenance\r\n\r\n#### Weekly Tasks\r\n- Verify backup completion\r\n- Test random backup restoration\r\n- Check backup storage usage\r\n- Review backup logs\r\n\r\n#### Monthly Tasks\r\n- Full disaster recovery test\r\n- Backup policy review\r\n- Storage capacity planning\r\n- Security assessment\r\n\r\n### 2. Documentation Updates\r\n\r\n#### Change Management\r\n- Document all backup procedure changes\r\n- Update recovery procedures\r\n- Maintain emergency contact information\r\n- Regular procedure reviews\r\n\r\n## Conclusion\r\n\r\nA comprehensive backup and disaster recovery strategy is essential for maintaining business continuity and protecting critical data. This guide provides the foundation for implementing robust backup procedures and disaster recovery capabilities for the Orthodox Metrics system.\r\n\r\nRegular testing, monitoring, and maintenance of backup systems ensure that recovery procedures work effectively when needed. The combination of automated backups, secure storage, and documented procedures provides comprehensive protection against data loss and system failures.\r\n\r\nFor additional information on system monitoring and maintenance, refer to the [MONITORING_GUIDE.md](MONITORING_GUIDE.md) and [OPERATIONS_GUIDE.md](OPERATIONS_GUIDE.md) documentation.\r\n"
    },
    "complexity": {
      "totalLines": 653,
      "codeLines": 351,
      "commentLines": 150,
      "commentRatio": 0.2994011976047904,
      "averageLineLength": 32.78043912175649
    },
    "lastAnalyzed": "2025-07-28T07:19:57.858Z"
  },
  "contentHash": "fc33c08d0d7f259f0e87865b37d70f121c1c6d007ddc7fed1b690a27b2d11e96",
  "discoveredAt": "2025-07-28T07:19:57.858Z"
}