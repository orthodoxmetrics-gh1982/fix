{
  "id": "d2491d9fc0d4",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scrapers/setup-database.js",
  "relativePath": "server/scrapers/setup-database.js",
  "name": "setup-database.js",
  "extension": ".js",
  "size": 6590,
  "modified": "2025-07-24T14:51:40.412Z",
  "created": "2025-07-24T14:51:40.412Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 178,
      "characters": 6558,
      "words": 473
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "readline",
        "line": 100
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 62,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 63,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 64,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 65,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 116,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 117,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 118,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 119,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// üìÅ server/scrapers/setup-database.js\r\n// Database setup script for Orthodox Church Directory\r\n\r\nrequire('dotenv').config();\r\nconst ChurchDatabase = require('./database/church-database');\r\n\r\nasync function setupDatabase() {\r\n    console.log('üóÑÔ∏è  Setting up Orthodox Church Directory database...\\n');\r\n    \r\n    const dbConfig = {\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'orthodoxapps',\r\n        password: process.env.[REDACTED] || 'Summerof1982@!',\r\n        database: process.env.[REDACTED] || 'orthodoxmetrics'\r\n    };\r\n    \r\n    console.log('Database Configuration:');\r\n    console.log(`- Host: ${dbConfig.host}`);\r\n    console.log(`- User: ${dbConfig.user}`);\r\n    console.log(`- Database: ${dbConfig.database}`);\r\n    console.log('');\r\n    \r\n    try {\r\n        const database = new ChurchDatabase({ ...dbConfig });\r\n        \r\n        console.log('Connecting to database...');\r\n        await database.initialize();\r\n        \r\n        console.log('‚úÖ Database setup completed successfully!');\r\n        console.log('');\r\n        console.log('Tables created:');\r\n        console.log('- orthodox_churches');\r\n        console.log('- scraping_sessions');\r\n        console.log('- scraping_errors');\r\n        console.log('- url_validations');\r\n        console.log('- duplicate_groups');\r\n        console.log('');\r\n        console.log('Views created:');\r\n        console.log('- v_churches_by_jurisdiction');\r\n        console.log('- v_churches_by_state');\r\n        console.log('- v_recent_scraping_activity');\r\n        console.log('');\r\n        console.log('Stored procedures created:');\r\n        console.log('- GetChurchesByJurisdiction');\r\n        console.log('- GetChurchesByLocation');\r\n        console.log('- SearchChurches');\r\n        console.log('- GetScrapingStatistics');\r\n        \r\n        await database.close();\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Database setup failed:', error.message);\r\n        process.exit(1);\r\n    }\r\n}\r\n\r\n// Verify database connection\r\nasync function verifyConnection() {\r\n    console.log('üîç Verifying database connection...\\n');\r\n    \r\n    const dbConfig = {\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'orthodoxapps',\r\n        password: process.env.[REDACTED] || 'Summerof1982@!',\r\n        database: process.env.[REDACTED] || 'orthodoxmetrics'\r\n    };\r\n    \r\n    try {\r\n        const database = new ChurchDatabase({ ...dbConfig });\r\n        await database.initialize();\r\n        \r\n        // Test basic queries\r\n        const stats = await database.getStatistics();\r\n        console.log('üìä Current Statistics:');\r\n        console.log(`- Total Churches: ${stats.overall.total_churches}`);\r\n        console.log(`- Total Jurisdictions: ${stats.overall.total_jurisdictions}`);\r\n        console.log(`- Churches with Websites: ${stats.overall.churches_with_websites}`);\r\n        \r\n        if (stats.byJurisdiction.length > 0) {\r\n            console.log('\\nüìà By Jurisdiction:');\r\n            stats.byJurisdiction.forEach(j => {\r\n                console.log(`   ${j.jurisdiction}: ${j.count}`);\r\n            });\r\n        }\r\n        \r\n        await database.close();\r\n        console.log('\\n‚úÖ Database connection verified!');\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Database verification failed:', error.message);\r\n        process.exit(1);\r\n    }\r\n}\r\n\r\n// Reset database (WARNING: This will delete all data)\r\nasync function resetDatabase() {\r\n    console.log('‚ö†Ô∏è  WARNING: This will delete all Orthodox Church Directory data!');\r\n    console.log('Type \"CONFIRM\" to proceed: ');\r\n    \r\n    const readline = require('readline').createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n    \r\n    return new Promise((resolve) => {\r\n        readline.question('', async (answer) => {\r\n            readline.close();\r\n            \r\n            if (answer !== 'CONFIRM') {\r\n                console.log('Reset cancelled.');\r\n                return resolve();\r\n            }\r\n            \r\n            try {\r\n                const dbConfig = {\r\n                    host: process.env.[REDACTED] || 'localhost',\r\n                    user: process.env.[REDACTED] || 'orthodoxapps',\r\n                    password: process.env.[REDACTED] || 'Summerof1982@!',\r\n                    database: process.env.[REDACTED] || 'orthodoxmetrics'\r\n                };\r\n                \r\n                const database = new ChurchDatabase({ ...dbConfig });\r\n                await database.initialize();\r\n                \r\n                // Drop all tables\r\n                const dropTables = [\r\n                    'DROP VIEW IF EXISTS v_recent_scraping_activity',\r\n                    'DROP VIEW IF EXISTS v_churches_by_state',\r\n                    'DROP VIEW IF EXISTS v_churches_by_jurisdiction',\r\n                    'DROP TABLE IF EXISTS duplicate_groups',\r\n                    'DROP TABLE IF EXISTS url_validations',\r\n                    'DROP TABLE IF EXISTS scraping_errors',\r\n                    'DROP TABLE IF EXISTS scraping_sessions',\r\n                    'DROP TABLE IF EXISTS orthodox_churches'\r\n                ];\r\n                \r\n                for (const sql of dropTables) {\r\n                    await database.pool.execute(sql);\r\n                }\r\n                \r\n                console.log('üóëÔ∏è  All tables dropped.');\r\n                \r\n                // Recreate schema\r\n                await database.createSchema();\r\n                console.log('‚úÖ Database reset completed!');\r\n                \r\n                await database.close();\r\n                \r\n            } catch (error) {\r\n                console.error('‚ùå Database reset failed:', error.message);\r\n                process.exit(1);\r\n            }\r\n            \r\n            resolve();\r\n        });\r\n    });\r\n}\r\n\r\n// Main execution\r\nif (require.main === module) {\r\n    const args = process.argv.slice(2);\r\n    \r\n    if (args.includes('--verify')) {\r\n        verifyConnection();\r\n    } else if (args.includes('--reset')) {\r\n        resetDatabase();\r\n    } else {\r\n        console.log('Usage:');\r\n        console.log('  node setup-database.js          # Setup database schema');\r\n        console.log('  node setup-database.js --verify # Verify connection and show stats');\r\n        console.log('  node setup-database.js --reset  # Reset database (WARNING: deletes all data)');\r\n        console.log('');\r\n        setupDatabase();\r\n    }\r\n}\r\n\r\nmodule.exports = { setupDatabase, verifyConnection, resetDatabase };\r\n"
    },
    "complexity": {
      "totalLines": 178,
      "codeLines": 137,
      "commentLines": 8,
      "commentRatio": 0.05517241379310345,
      "averageLineLength": 42.10344827586207
    },
    "lastAnalyzed": "2025-07-28T07:20:00.618Z"
  },
  "contentHash": "1e002e5e34998cc3500aeecab5de9c0f26a1e4e5e938aa3fd77c701528b79c67",
  "discoveredAt": "2025-07-28T07:20:00.618Z"
}