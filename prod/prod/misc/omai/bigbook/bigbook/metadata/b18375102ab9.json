{
  "id": "b18375102ab9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/debug-public-ocr-detailed.js",
  "relativePath": "server/testing/debug-public-ocr-detailed.js",
  "name": "debug-public-ocr-detailed.js",
  "extension": ".js",
  "size": 4678,
  "modified": "2025-07-14T02:38:01.621Z",
  "created": "2025-07-11T00:54:07.974Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 132,
      "characters": 4620,
      "words": 474
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "@google-cloud/vision",
        "line": 28
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 47
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 48
      },
      {
        "type": "npm_package",
        "name": "sharp",
        "line": 80
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 93
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 94
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 36,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 37,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n// Debug script for Public OCR Service Issues\r\n// Run with: node debug-public-ocr-detailed.js\r\n\r\nconsole.log('üîç Detailed Public OCR Service Debug\\n');\r\n\r\n// Test 1: Check OCR processing service directly\r\nconsole.log('1Ô∏è‚É£ Testing OCR processing service directly...');\r\ntry {\r\n  const OcrProcessingService = require('../services/ocrProcessingService');\r\n  const ocrService = new OcrProcessingService();\r\n  console.log('‚úÖ OCR processing service imported and instantiated successfully');\r\n  \r\n  // Test with a simple function call\r\n  console.log('   - performOcr method type:', typeof ocrService.performOcr);\r\n  console.log('   - translateText method type:', typeof ocrService.translateText);\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå OCR service import error:', error.message);\r\n  console.error('   Stack:', error.stack);\r\n}\r\n\r\n// Test 2: Check Google Vision setup\r\nconsole.log('\\n2Ô∏è‚É£ Testing Google Vision API setup...');\r\ntry {\r\n  // Try to import and initialize Google Vision\r\n  const vision = require('@google-cloud/vision');\r\n  console.log('‚úÖ Google Vision client library imported');\r\n  \r\n  const client = new vision.ImageAnnotatorClient();\r\n  console.log('‚úÖ Google Vision client created');\r\n  \r\n  // Check credentials\r\n  console.log('üìã Environment variables:');\r\n  console.log('   - GOOGLE_APPLICATION_CREDENTIALS:', process.env.[REDACTED]);\r\n  console.log('   - GOOGLE_CLOUD_PROJECT:', process.env.[REDACTED]);\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå Google Vision setup error:', error.message);\r\n  console.error('   Stack:', error.stack);\r\n}\r\n\r\n// Test 3: Test file system operations\r\nconsole.log('\\n3Ô∏è‚É£ Testing file system operations...');\r\ntry {\r\n  const fs = require('fs').promises;\r\n  const path = require('path');\r\n  \r\n  // Check temp directory\r\n  const tempDir = path.join(__dirname, 'temp');\r\n  console.log('üìÅ Temp directory path:', tempDir);\r\n  \r\n  // Try to create temp directory\r\n  await fs.mkdir(tempDir, { recursive: true });\r\n  console.log('‚úÖ Temp directory created/exists');\r\n  \r\n  // Test file write/read\r\n  const testFile = path.join(tempDir, 'test-write.txt');\r\n  await fs.writeFile(testFile, 'test content');\r\n  const content = await fs.readFile(testFile, 'utf8');\r\n  console.log('‚úÖ File write/read operations work');\r\n  \r\n  // Clean up\r\n  await fs.unlink(testFile);\r\n  console.log('‚úÖ File cleanup successful');\r\n  \r\n} catch(error) {\r\n  console.error('‚ùå File system error:', error.message);\r\n  console.error('   Stack:', error.stack);\r\n}\r\n\r\n// Test 4: Test with actual OCR processing\r\nconsole.log('\\n4Ô∏è‚É£ Testing actual OCR processing...');\r\nasync function testOCRProcessing() {\r\n  try {\r\n    const OcrProcessingService = require('../services/ocrProcessingService');\r\n    \r\n    // Create a simple test image with text\r\n    const sharp = require('sharp');\r\n    \r\n    const testImageBuffer = await sharp({\r\n      create: {\r\n        width: 200,\r\n        height: 100,\r\n        channels: 4,\r\n        background: { r: 255, g: 255, b: 255, alpha: 1 }\r\n      }\r\n    })\r\n    .png()\r\n    .toBuffer();\r\n    \r\n    const fs = require('fs').promises;\r\n    const path = require('path');\r\n    const testImagePath = path.join(__dirname, 'test-ocr-image.png');\r\n    \r\n    await fs.writeFile(testImagePath, testImageBuffer);\r\n    console.log('‚úÖ Test image created');\r\n    \r\n    // Try OCR processing\r\n    console.log('üîç Attempting OCR processing...');\r\n    const ocrService = new OcrProcessingService();\r\n    const result = await ocrService.performOcr(testImagePath, 'en');\r\n    console.log('‚úÖ OCR processing successful!');\r\n    console.log('   - Text:', result.text);\r\n    console.log('   - Confidence:', result.confidence);\r\n    console.log('   - Detected language:', result.detectedLanguage);\r\n    \r\n    // Clean up\r\n    await fs.unlink(testImagePath);\r\n    console.log('üßπ Test image cleaned up');\r\n    \r\n  } catch(error) {\r\n    console.error('‚ùå OCR processing test error:', error.message);\r\n    console.error('   Stack:', error.stack);\r\n  }\r\n}\r\n\r\n// Run async test\r\ntestOCRProcessing().then(() => {\r\n  console.log('\\nüéØ Debug Complete!');\r\n  console.log('\\nüìã Summary:');\r\n  console.log('   If all tests pass, the issue is likely in the HTTP request handling');\r\n  console.log('   If any test fails, that indicates the root cause');\r\n  console.log('\\nüí° Next steps:');\r\n  console.log('   1. Fix any failing tests above');\r\n  console.log('   2. Check server logs during actual OCR requests');\r\n  console.log('   3. Verify the public OCR route is correctly handling file uploads');\r\n}).catch(err => {\r\n  console.error('‚ùå Debug script error:', err);\r\n});\r\n"
    },
    "complexity": {
      "totalLines": 132,
      "codeLines": 89,
      "commentLines": 18,
      "commentRatio": 0.16822429906542055,
      "averageLineLength": 41.2803738317757
    },
    "lastAnalyzed": "2025-07-28T07:20:01.188Z"
  },
  "contentHash": "d21af83531acb7ad5d80c7599947948cb18cbd7f4d161537d47581bbfd8d5a3c",
  "discoveredAt": "2025-07-28T07:20:01.188Z"
}