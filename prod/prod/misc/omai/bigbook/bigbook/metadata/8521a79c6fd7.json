{
  "id": "8521a79c6fd7",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/d7cd35084281.json",
  "relativePath": "bigbook/metadata/d7cd35084281.json",
  "name": "d7cd35084281.json",
  "extension": ".json",
  "size": 15658,
  "modified": "2025-07-26T04:17:11.794Z",
  "created": "2025-07-26T04:17:11.794Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 110,
      "characters": 15650,
      "words": 1323
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "nodemailer",
        "line": 97
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 97,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"d7cd35084281\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/sendProvisionEmail.js\",\n  \"relativePath\": \"server/utils/sendProvisionEmail.js\",\n  \"name\": \"sendProvisionEmail.js\",\n  \"extension\": \".js\",\n  \"size\": 11919,\n  \"modified\": \"2025-07-04T23:08:09.000Z\",\n  \"created\": \"2025-07-09T00:48:38.534Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 413,\n      \"characters\": 11911,\n      \"words\": 1157\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"nodemailer\",\n        \"line\": 4\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 34,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 10,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 11,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 12,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 14,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 15,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 19,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 20,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 27,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 107,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// Email Notification Utility for Church Provisioning\\r\\n// Sends multilingual emails during the provisioning process\\r\\n\\r\\nconst nodemailer = require('nodemailer');\\r\\nconst db = require('../../config/db');\\r\\nconst logger = require('./logger');\\r\\n\\r\\n// Email configuration\\r\\nconst EMAIL_CONFIG = {\\r\\n  host: process.env.[REDACTED] || 'localhost',\\r\\n  port: process.env.[REDACTED] || 587,\\r\\n  secure: process.env.[REDACTED] === 'true',\\r\\n  auth: {\\r\\n    user: process.env.[REDACTED],\\r\\n    pass: process.env.[REDACTED]\\r\\n  }\\r\\n};\\r\\n\\r\\nconst FROM_EMAIL = process.env.[REDACTED] || 'noreply@orthodoxmetrics.com';\\r\\nconst FROM_NAME = process.env.[REDACTED] || 'OrthodoxMetrics Team';\\r\\n\\r\\n// Create transporter\\r\\nlet transporter = null;\\r\\n\\r\\nfunction getTransporter() {\\r\\n  if (!transporter) {\\r\\n    if (process.env.[REDACTED] === 'development') {\\r\\n      // Use ethereal email for development\\r\\n      transporter = nodemailer.createTransporter({\\r\\n        host: 'smtp.ethereal.email',\\r\\n        port: 587,\\r\\n        auth: {\\r\\n          user: 'ethereal.user@ethereal.email',\\r\\n          pass: '[REDACTED]'\\r\\n        }\\r\\n      });\\r\\n    } else {\\r\\n      transporter = nodemailer.createTransporter(EMAIL_CONFIG);\\r\\n    }\\r\\n  }\\r\\n  return transporter;\\r\\n}\\r\\n\\r\\n// Send provision email\\r\\nasync function sendProvisionEmail(queueId, templateType, extraData = {}) {\\r\\n  try {\\r\\n    logger.info(`Sending ${templateType} email for queue ${queueId}`);\\r\\n\\r\\n    // Get queue entry with church data\\r\\n    const [queueRows] = await db.execute(`\\r\\n      SELECT \\r\\n        cpq.*,\\r\\n        c.name as church_name,\\r\\n        c.location as church_location,\\r\\n        c.contact_email,\\r\\n        c.contact_name\\r\\n      FROM church_provision_queue cpq\\r\\n      LEFT JOIN churches c ON cpq.church_id = c.id\\r\\n      WHERE cpq.id = ?\\r\\n    `, [queueId]);\\r\\n\\r\\n    if (queueRows.length === 0) {\\r\\n      throw new Error(`Queue entry ${queueId} not found`);\\r\\n    }\\r\\n\\r\\n    const queueEntry = queueRows[0];\\r\\n    const language = queueEntry.language_preference || 'en';\\r\\n\\r\\n    // Get email template\\r\\n    const [templateRows] = await db.execute(`\\r\\n      SELECT subject_template, body_template\\r\\n      FROM provision_notification_templates\\r\\n      WHERE language_code = ? AND template_type = ? AND is_active = TRUE\\r\\n    `, [language, templateType]);\\r\\n\\r\\n    if (templateRows.length === 0) {\\r\\n      // Fallback to English if language template not found\\r\\n      const [englishRows] = await db.execute(`\\r\\n        SELECT subject_template, body_template\\r\\n        FROM provision_notification_templates\\r\\n        WHERE language_code = 'en' AND template_type = ? AND is_active = TRUE\\r\\n      `, [templateType]);\\r\\n\\r\\n      if (englishRows.length === 0) {\\r\\n        throw new Error(`No email template found for type: ${templateType}`);\\r\\n      }\\r\\n\\r\\n      templateRows.push(englishRows[0]);\\r\\n    }\\r\\n\\r\\n    const template = templateRows[0];\\r\\n\\r\\n    // Prepare template variables\\r\\n    const templateVars = {\\r\\n      contactName: queueEntry.contact_name || 'Dear Friend',\\r\\n      churchName: queueEntry.church_name,\\r\\n      churchLocation: queueEntry.church_location,\\r\\n      siteSlug: queueEntry.site_slug,\\r\\n      adminEmail: queueEntry.admin_email,\\r\\n      ...extraData\\r\\n    };\\r\\n\\r\\n    // If we have a site URL, use it, otherwise construct it\\r\\n    if (extraData.siteUrl) {\\r\\n      templateVars.siteUrl = extraData.siteUrl;\\r\\n    } else if (queueEntry.site_slug) {\\r\\n      templateVars.siteUrl = `${process.env.[REDACTED] || 'https://orthodoxmetrics.com'}/churches/${queueEntry.site_slug}`;\\r\\n    }\\r\\n\\r\\n    // Process template variables\\r\\n    const subject = processTemplate(template.subject_template, templateVars);\\r\\n    const body = processTemplate(template.body_template, templateVars);\\r\\n\\r\\n    // Send email\\r\\n    const mailOptions = {\\r\\n      from: `${FROM_NAME} <${FROM_EMAIL}>`,\\r\\n      to: queueEntry.admin_email,\\r\\n      subject: subject,\\r\\n      text: body,\\r\\n      html: convertToHtml(body),\\r\\n      headers: {\\r\\n        'X-Church-Queue-ID': queueId,\\r\\n        'X-Church-Slug': queueEntry.site_slug,\\r\\n        'X-Template-Type': templateType,\\r\\n        'X-Language': language\\r\\n      }\\r\\n    };\\r\\n\\r\\n    const transporter = getTransporter();\\r\\n    const result = await transporter.sendMail(mailOptions);\\r\\n\\r\\n    logger.info(`Email sent successfully to ${queueEntry.admin_email}:`, result.messageId);\\r\\n\\r\\n    // Log email in database\\r\\n    await logEmailSent({\\r\\n      queueId,\\r\\n      templateType,\\r\\n      recipient: queueEntry.admin_email,\\r\\n      subject,\\r\\n      messageId: result.messageId,\\r\\n      language\\r\\n    });\\r\\n\\r\\n    return {\\r\\n      success: true,\\r\\n      messageId: result.messageId,\\r\\n      recipient: queueEntry.admin_email,\\r\\n      subject,\\r\\n      templateType\\r\\n    };\\r\\n\\r\\n  } catch (error) {\\r\\n    logger.error(`Failed to send ${templateType} email for queue ${queueId}:`, error);\\r\\n    \\r\\n    // Log failed email attempt\\r\\n    try {\\r\\n      await logEmailFailed({\\r\\n        queueId,\\r\\n        templateType,\\r\\n        error: error.message\\r\\n      });\\r\\n    } catch (logError) {\\r\\n      logger.error('Failed to log email failure:', logError);\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      success: false,\\r\\n      error: error.message\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n// Process template with variables\\r\\nfunction processTemplate(template, variables) {\\r\\n  let processed = template;\\r\\n  \\r\\n  for (const [key, value] of Object.entries(variables)) {\\r\\n    const placeholder = `{{${key}}}`;\\r\\n    processed = processed.replace(new RegExp(placeholder, 'g'), value || '');\\r\\n  }\\r\\n  \\r\\n  return processed;\\r\\n}\\r\\n\\r\\n// Convert plain text to basic HTML\\r\\nfunction convertToHtml(text) {\\r\\n  return text\\r\\n    .replace(/\\\\n\\\\n/g, '</p><p>')\\r\\n    .replace(/\\\\n/g, '<br>')\\r\\n    .replace(/^/, '<p>')\\r\\n    .replace(/$/, '</p>')\\r\\n    .replace(/🔗 (https?:\\\\/\\\\/[^\\\\s]+)/g, '🔗 <a href=\\\"$1\\\" style=\\\"color: #007bff; text-decoration: none;\\\">$1</a>')\\r\\n    .replace(/📧 ([^\\\\s]+@[^\\\\s]+)/g, '📧 <a href=\\\"mailto:$1\\\" style=\\\"color: #007bff; text-decoration: none;\\\">$1</a>')\\r\\n    .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>');\\r\\n}\\r\\n\\r\\n// Log successful email\\r\\nasync function logEmailSent({ queueId, templateType, recipient, subject, messageId, language }) {\\r\\n  try {\\r\\n    await db.execute(`\\r\\n      INSERT INTO provision_email_log (\\r\\n        queue_id, template_type, recipient, subject, message_id, \\r\\n        language, status, sent_at\\r\\n      ) VALUES (?, ?, ?, ?, ?, ?, 'sent', NOW())\\r\\n    `, [queueId, templateType, recipient, subject, messageId, language]);\\r\\n  } catch (error) {\\r\\n    logger.error('Failed to log email:', error);\\r\\n  }\\r\\n}\\r\\n\\r\\n// Log failed email\\r\\nasync function logEmailFailed({ queueId, templateType, error }) {\\r\\n  try {\\r\\n    await db.execute(`\\r\\n      INSERT INTO provision_email_log (\\r\\n        queue_id, template_type, status, error_message, created_at\\r\\n      ) VALUES (?, ?, 'failed', ?, NOW())\\r\\n    `, [queueId, templateType, error]);\\r\\n  } catch (logError) {\\r\\n    logger.error('Failed to log email failure:', logError);\\r\\n  }\\r\\n}\\r\\n\\r\\n// Send custom email (for manual notifications)\\r\\nasync function sendCustomEmail({ to, subject, body, language = 'en', churchSlug = null }) {\\r\\n  try {\\r\\n    const transporter = getTransporter();\\r\\n    \\r\\n    const mailOptions = {\\r\\n      from: `${FROM_NAME} <${FROM_EMAIL}>`,\\r\\n      to: to,\\r\\n      subject: subject,\\r\\n      text: body,\\r\\n      html: convertToHtml(body),\\r\\n      headers: {\\r\\n        'X-Language': language,\\r\\n        'X-Church-Slug': churchSlug,\\r\\n        'X-Email-Type': 'custom'\\r\\n      }\\r\\n    };\\r\\n\\r\\n    const result = await transporter.sendMail(mailOptions);\\r\\n    \\r\\n    logger.info(`Custom email sent successfully to ${to}:`, result.messageId);\\r\\n    \\r\\n    return {\\r\\n      success: true,\\r\\n      messageId: result.messageId\\r\\n    };\\r\\n\\r\\n  } catch (error) {\\r\\n    logger.error(`Failed to send custom email to ${to}:`, error);\\r\\n    return {\\r\\n      success: false,\\r\\n      error: error.message\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n// Send bulk emails (for announcements)\\r\\nasync function sendBulkEmails({ recipients, subject, body, language = 'en' }) {\\r\\n  const results = [];\\r\\n  \\r\\n  for (const recipient of recipients) {\\r\\n    try {\\r\\n      const result = await sendCustomEmail({\\r\\n        to: recipient.email,\\r\\n        subject: processTemplate(subject, recipient),\\r\\n        body: processTemplate(body, recipient),\\r\\n        language,\\r\\n        churchSlug: recipient.churchSlug\\r\\n      });\\r\\n      \\r\\n      results.push({\\r\\n        recipient: recipient.email,\\r\\n        ...result\\r\\n      });\\r\\n      \\r\\n      // Add delay to avoid rate limiting\\r\\n      await new Promise(resolve => setTimeout(resolve, 1000));\\r\\n      \\r\\n    } catch (error) {\\r\\n      results.push({\\r\\n        recipient: recipient.email,\\r\\n        success: false,\\r\\n        error: error.message\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  return results;\\r\\n}\\r\\n\\r\\n// Test email configuration\\r\\nasync function testEmailConfig() {\\r\\n  try {\\r\\n    const transporter = getTransporter();\\r\\n    await transporter.verify();\\r\\n    \\r\\n    logger.info('Email configuration is valid');\\r\\n    return { success: true };\\r\\n    \\r\\n  } catch (error) {\\r\\n    logger.error('Email configuration test failed:', error);\\r\\n    return { \\r\\n      success: false, \\r\\n      error: error.message \\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n// Get email templates for a language\\r\\nasync function getEmailTemplates(language = 'en') {\\r\\n  try {\\r\\n    const [rows] = await db.execute(`\\r\\n      SELECT template_type, subject_template, body_template\\r\\n      FROM provision_notification_templates\\r\\n      WHERE language_code = ? AND is_active = TRUE\\r\\n      ORDER BY template_type\\r\\n    `, [language]);\\r\\n\\r\\n    return {\\r\\n      success: true,\\r\\n      templates: rows\\r\\n    };\\r\\n\\r\\n  } catch (error) {\\r\\n    logger.error(`Failed to get email templates for ${language}:`, error);\\r\\n    return {\\r\\n      success: false,\\r\\n      error: error.message\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n// Update email template\\r\\nasync function updateEmailTemplate({ language, templateType, subjectTemplate, bodyTemplate }) {\\r\\n  try {\\r\\n    const [result] = await db.execute(`\\r\\n      UPDATE provision_notification_templates \\r\\n      SET subject_template = ?, body_template = ?, updated_at = NOW()\\r\\n      WHERE language_code = ? AND template_type = ?\\r\\n    `, [subjectTemplate, bodyTemplate, language, templateType]);\\r\\n\\r\\n    if (result.affectedRows === 0) {\\r\\n      // Insert new template if it doesn't exist\\r\\n      await db.execute(`\\r\\n        INSERT INTO provision_notification_templates \\r\\n        (language_code, template_type, subject_template, body_template)\\r\\n        VALUES (?, ?, ?, ?)\\r\\n      `, [language, templateType, subjectTemplate, bodyTemplate]);\\r\\n    }\\r\\n\\r\\n    logger.info(`Updated email template: ${language}/${templateType}`);\\r\\n    \\r\\n    return { success: true };\\r\\n\\r\\n  } catch (error) {\\r\\n    logger.error(`Failed to update email template ${language}/${templateType}:`, error);\\r\\n    return {\\r\\n      success: false,\\r\\n      error: error.message\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\\r\\n// Create email log table if it doesn't exist\\r\\nasync function initializeEmailLog() {\\r\\n  try {\\r\\n    await db.execute(`\\r\\n      CREATE TABLE IF NOT EXISTS provision_email_log (\\r\\n        id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n        queue_id INT,\\r\\n        template_type VARCHAR(50),\\r\\n        recipient VARCHAR(255),\\r\\n        subject TEXT,\\r\\n        message_id VARCHAR(255),\\r\\n        language VARCHAR(5),\\r\\n        status ENUM('sent', 'failed', 'bounced') DEFAULT 'sent',\\r\\n        error_message TEXT,\\r\\n        sent_at TIMESTAMP NULL,\\r\\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n        \\r\\n        INDEX idx_queue_id (queue_id),\\r\\n        INDEX idx_template_type (template_type),\\r\\n        INDEX idx_status (status),\\r\\n        INDEX idx_sent_at (sent_at)\\r\\n      )\\r\\n    `);\\r\\n    \\r\\n    logger.info('Email log table initialized');\\r\\n    \\r\\n  } catch (error) {\\r\\n    logger.error('Failed to initialize email log table:', error);\\r\\n  }\\r\\n}\\r\\n\\r\\n// Initialize email system\\r\\nasync function initializeEmailSystem() {\\r\\n  await initializeEmailLog();\\r\\n  return testEmailConfig();\\r\\n}\\r\\n\\r\\nmodule.exports = {\\r\\n  sendProvisionEmail,\\r\\n  sendCustomEmail,\\r\\n  sendBulkEmails,\\r\\n  testEmailConfig,\\r\\n  getEmailTemplates,\\r\\n  updateEmailTemplate,\\r\\n  initializeEmailSystem\\r\\n};\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 413,\n      \"codeLines\": 324,\n      \"commentLines\": 28,\n      \"commentRatio\": 0.07954545454545454,\n      \"averageLineLength\": 32.29829545454545\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.794Z\"\n  },\n  \"contentHash\": \"ebe3dceb29f0282a836454f1589aff2bb348cd069213456e576b4f61a6ea077a\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.794Z\"\n}"
    },
    "complexity": {
      "totalLines": 110,
      "codeLines": 110,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 141.28181818181818
    },
    "lastAnalyzed": "2025-07-28T07:19:57.503Z"
  },
  "contentHash": "f3c609028223b2bb2b3a59c3cc08e7b95e17b375f53f88311961aef2c811ba38",
  "discoveredAt": "2025-07-28T07:19:57.503Z"
}