{
  "id": "9e3dd89449d2",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/migration/migrate-church-info.js",
  "relativePath": "server/migration/migrate-church-info.js",
  "name": "migrate-church-info.js",
  "extension": ".js",
  "size": 6262,
  "modified": "2025-07-24T14:50:26.280Z",
  "created": "2025-07-24T14:50:26.280Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 171,
      "characters": 6216,
      "words": 611
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 10,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Migration script to update church_info table with comprehensive fields\r\n// Run this script to apply the database schema changes\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Database configuration\r\nconst dbConfig = {\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  user: process.env.[REDACTED] || 'orthodoxapps',\r\n  password: process.env.[REDACTED] || 'Summerof1982@!',\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  port: process.env.[REDACTED] || 3306\r\n};\r\n\r\nasync function runMigration() {\r\n  console.log('üîÑ Starting church_info table migration...');\r\n  \r\n  try {\r\n    // Create database connection with multipleStatements enabled\r\n    const connection = await mysql.createConnection({\r\n      ...dbConfig,\r\n      multipleStatements: true\r\n    });\r\n    console.log('‚úÖ Database connection established');\r\n\r\n    // Execute the migration in logical steps\r\n    console.log('üîß Step 1: Creating church_info table...');\r\n    \r\n    // Step 1: Create the table\r\n    await connection.execute(`\r\n      CREATE TABLE IF NOT EXISTS church_info (\r\n          id INT AUTO_INCREMENT PRIMARY KEY,\r\n          church_id VARCHAR(50) UNIQUE,\r\n          \r\n          -- Core church information\r\n          name VARCHAR(255) NOT NULL DEFAULT '',\r\n          email VARCHAR(255) NOT NULL DEFAULT '',\r\n          phone VARCHAR(50) DEFAULT NULL,\r\n          website VARCHAR(255) DEFAULT NULL,\r\n          \r\n          -- Address information\r\n          address TEXT DEFAULT NULL,\r\n          city VARCHAR(100) DEFAULT NULL,\r\n          state_province VARCHAR(100) DEFAULT NULL,\r\n          postal_code VARCHAR(20) DEFAULT NULL,\r\n          country VARCHAR(100) DEFAULT NULL,\r\n          \r\n          -- Church details\r\n          description TEXT DEFAULT NULL,\r\n          founded_year INT DEFAULT NULL,\r\n          \r\n          -- Preferences and settings\r\n          language_preference VARCHAR(10) DEFAULT 'en',\r\n          timezone VARCHAR(50) DEFAULT 'UTC',\r\n          currency VARCHAR(10) DEFAULT 'USD',\r\n          \r\n          -- Administrative\r\n          tax_id VARCHAR(50) DEFAULT NULL,\r\n          is_active BOOLEAN DEFAULT TRUE,\r\n          \r\n          -- Timestamps\r\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n      )\r\n    `);\r\n    console.log('‚úÖ Step 1 completed: church_info table created');\r\n\r\n    // Step 2: Create indexes\r\n    console.log('üîß Step 2: Creating indexes...');\r\n    \r\n    const indexes = [\r\n      'CREATE INDEX IF NOT EXISTS idx_church_info_name ON church_info(name)',\r\n      'CREATE INDEX IF NOT EXISTS idx_church_info_email ON church_info(email)',\r\n      'CREATE INDEX IF NOT EXISTS idx_church_info_active ON church_info(is_active)',\r\n      'CREATE INDEX IF NOT EXISTS idx_church_info_country ON church_info(country)'\r\n    ];\r\n\r\n    for (const indexSQL of indexes) {\r\n      try {\r\n        await connection.execute(indexSQL);\r\n        console.log(`   ‚úÖ Index created: ${indexSQL.substring(0, 50)}...`);\r\n      } catch (error) {\r\n        if (error.code === 'ER_DUP_KEYNAME') {\r\n          console.log(`   ‚ö†Ô∏è  Index already exists (skipping)`);\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Step 3: Add unique constraint\r\n    console.log('ÔøΩ Step 3: Adding unique constraints...');\r\n    try {\r\n      await connection.execute('ALTER TABLE church_info ADD CONSTRAINT uk_church_info_email UNIQUE (email)');\r\n      console.log('‚úÖ Step 3 completed: unique constraint added');\r\n    } catch (error) {\r\n      if (error.code === 'ER_DUP_KEYNAME') {\r\n        console.log('‚ö†Ô∏è  Unique constraint already exists (skipping)');\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    // Step 4: Insert sample data\r\n    console.log('üîß Step 4: Inserting sample data...');\r\n    try {\r\n      await connection.execute(`\r\n        INSERT IGNORE INTO church_info (\r\n            church_id, name, email, phone, website, \r\n            address, city, state_province, postal_code, country,\r\n            description, founded_year, language_preference, timezone, currency, is_active\r\n        ) VALUES (\r\n            'SSPPOC_001', \r\n            'Saints Peter and Paul Orthodox Church',\r\n            'admin@ssppoc.org',\r\n            '(555) 123-4567',\r\n            'https://ssppoc.org',\r\n            '123 Orthodox Way',\r\n            'Springfield',\r\n            'Illinois',\r\n            '62701',\r\n            'United States',\r\n            'A traditional Orthodox church serving the Springfield community since 1952.',\r\n            1952,\r\n            'en',\r\n            'America/Chicago',\r\n            'USD',\r\n            TRUE\r\n        )\r\n      `);\r\n      console.log('‚úÖ Step 4 completed: sample data inserted');\r\n    } catch (error) {\r\n      console.log('‚ö†Ô∏è  Sample data may already exist (skipping)');\r\n    }\r\n\r\n    // Verify the migration by checking table structure\r\n    console.log('\\nüîç Verifying migration results...');\r\n    const [columns] = await connection.execute('DESCRIBE church_info');\r\n    console.log('üìã Current church_info table structure:');\r\n    columns.forEach(col => {\r\n      console.log(`   ${col.Field}: ${col.Type} ${col.Null === 'YES' ? 'NULL' : 'NOT NULL'} ${col.Default ? `DEFAULT ${col.Default}` : ''}`);\r\n    });\r\n\r\n    // Check if sample data was inserted\r\n    const [sampleData] = await connection.execute('SELECT COUNT(*) as count FROM church_info');\r\n    console.log(`üìä Total records in church_info: ${sampleData[0].count}`);\r\n\r\n    // Close connection\r\n    await connection.end();\r\n    console.log('\\nüéâ Migration completed successfully!');\r\n    console.log('‚úÖ church_info table has been updated with all required fields');\r\n    console.log('üìå Next steps:');\r\n    console.log('   1. Test the updated /api/churches/create endpoint');\r\n    console.log('   2. Update frontend forms to use new field names');\r\n    console.log('   3. Test church creation through the UI');\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Migration failed:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Run the migration if this script is executed directly\r\nif (require.main === module) {\r\n  runMigration();\r\n}\r\n\r\nmodule.exports = runMigration;\r\n"
    },
    "complexity": {
      "totalLines": 171,
      "codeLines": 134,
      "commentLines": 13,
      "commentRatio": 0.08843537414965986,
      "averageLineLength": 40.49659863945578
    },
    "lastAnalyzed": "2025-07-28T07:20:00.319Z"
  },
  "contentHash": "7eb211fb08ff1197179b71b2cd12902b9ca4a33e16ac68e61a15c213bdbbaa37",
  "discoveredAt": "2025-07-28T07:20:00.319Z"
}