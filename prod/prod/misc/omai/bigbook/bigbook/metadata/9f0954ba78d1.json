{
  "id": "9f0954ba78d1",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/run-church-linkage-fix.sh",
  "relativePath": "server/scripts/run-church-linkage-fix.sh",
  "name": "run-church-linkage-fix.sh",
  "extension": ".sh",
  "size": 12327,
  "modified": "2025-07-24T14:50:26.364Z",
  "created": "2025-07-24T14:50:26.364Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 371,
      "characters": 12319,
      "words": 1223
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 3
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 313,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/bin/bash\n\n# ================================================================================\n# ORTHODOX METRICS CHURCH LINKAGE FIX RUNNER\n# ================================================================================\n# Purpose: Safely execute the church database linkage migration\n# Author: Orthodox Metrics Development Team\n# Date: 2025-01-24\n# ================================================================================\n\nset -e  # Exit on error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Default configuration\nDB_HOST=${DB_HOST:-\"localhost\"}\nDB_USER=${DB_USER:-\"root\"}\nDB_PASSWORD=${DB_PASSWORD:-\"Summerof1982@!\"}\nBACKUP_DIR=\"./backups/church-linkage-fix-$(date +%Y%m%d_%H%M%S)\"\nDRY_RUN=${DRY_RUN:-\"true\"}\n\n# Print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Print header\nprint_header() {\n    echo \"================================================================================\"\n    echo \"🏛️  ORTHODOX METRICS CHURCH LINKAGE FIX\"\n    echo \"================================================================================\"\n    echo \"Purpose: Fix linkage between orthodoxmetrics_db.churches and church databases\"\n    echo \"Date: $(date)\"\n    echo \"Mode: $([ \"$DRY_RUN\" = \"true\" ] && echo \"DRY RUN (audit only)\" || echo \"LIVE MIGRATION\")\"\n    echo \"================================================================================\"\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check if mysql command is available\n    if ! command -v mysql &> /dev/null; then\n        print_error \"mysql command not found. Please install MySQL client.\"\n        exit 1\n    fi\n    \n    # Check if we can connect to database\n    if ! mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" -e \"SELECT 1;\" &> /dev/null; then\n        print_error \"Cannot connect to MySQL database. Please check credentials.\"\n        exit 1\n    fi\n    \n    # Check if orthodoxmetrics_db exists\n    if ! mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" -e \"USE orthodoxmetrics_db; SELECT 1;\" &> /dev/null; then\n        print_error \"orthodoxmetrics_db database not found.\"\n        exit 1\n    fi\n    \n    print_success \"Prerequisites check passed\"\n}\n\n# Create backup directory\ncreate_backup_dir() {\n    print_status \"Creating backup directory: $BACKUP_DIR\"\n    mkdir -p \"$BACKUP_DIR\"\n    print_success \"Backup directory created\"\n}\n\n# Backup critical databases\nbackup_databases() {\n    print_status \"Creating database backups...\"\n    \n    # Backup orthodoxmetrics_db\n    print_status \"Backing up orthodoxmetrics_db...\"\n    mysqldump -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" \\\n        --single-transaction --routines --triggers \\\n        orthodoxmetrics_db > \"$BACKUP_DIR/orthodoxmetrics_db_backup.sql\"\n    \n    # Find and backup church databases\n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" \\\n        -e \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA \n            WHERE SCHEMA_NAME LIKE '%church%' \n               OR SCHEMA_NAME LIKE '%orthodox%' \n               OR SCHEMA_NAME LIKE '%ssppoc%' \n               OR SCHEMA_NAME LIKE '%saints%'\n               AND SCHEMA_NAME != 'orthodoxmetrics_db'\n               AND SCHEMA_NAME NOT IN ('information_schema', 'performance_schema', 'mysql', 'sys');\" \\\n        --skip-column-names | while read db_name; do\n        \n        if [ ! -z \"$db_name\" ]; then\n            print_status \"Backing up $db_name...\"\n            mysqldump -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" \\\n                --single-transaction --routines --triggers \\\n                \"$db_name\" > \"$BACKUP_DIR/${db_name}_backup.sql\"\n        fi\n    done\n    \n    print_success \"Database backups completed\"\n}\n\n# Run the audit phase\nrun_audit() {\n    print_status \"Running church database audit...\"\n    \n    # Create temporary SQL file for audit only\n    cat > \"$BACKUP_DIR/audit_only.sql\" << 'EOF'\n-- Audit-only version of the church linkage fix script\nSET SESSION FOREIGN_KEY_CHECKS = 0;\nSET SESSION SQL_SAFE_UPDATES = 0;\n\nUSE orthodoxmetrics_db;\n\n-- Create audit table\nDROP TABLE IF EXISTS temp_church_audit;\nCREATE TABLE temp_church_audit (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    database_name VARCHAR(100),\n    table_name VARCHAR(100),\n    has_church_id BOOLEAN DEFAULT FALSE,\n    church_id_type VARCHAR(50),\n    has_foreign_key BOOLEAN DEFAULT FALSE,\n    foreign_key_target VARCHAR(100),\n    record_count INT DEFAULT 0,\n    missing_church_id_count INT DEFAULT 0,\n    needs_migration BOOLEAN DEFAULT TRUE,\n    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Audit procedure (simplified for standalone execution)\nDELIMITER $$\nDROP PROCEDURE IF EXISTS AuditChurchDatabase$$\nCREATE PROCEDURE AuditChurchDatabase(IN db_name VARCHAR(100))\nBEGIN\n    DECLARE done INT DEFAULT FALSE;\n    DECLARE table_name VARCHAR(100);\n    \n    DECLARE table_cursor CURSOR FOR\n        SELECT TABLE_NAME \n        FROM INFORMATION_SCHEMA.TABLES \n        WHERE TABLE_SCHEMA = db_name \n        AND TABLE_NAME IN ('baptism_records', 'marriage_records', 'funeral_records');\n    \n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\n    \n    OPEN table_cursor;\n    \n    table_loop: LOOP\n        FETCH table_cursor INTO table_name;\n        IF done THEN\n            LEAVE table_loop;\n        END IF;\n        \n        SET @has_church_id = 0;\n        SET @church_id_type = '';\n        SET @has_fk = 0;\n        SET @fk_target = '';\n        SET @record_count = 0;\n        SET @missing_church_id = 0;\n        \n        -- Check if church_id column exists\n        SELECT COUNT(*), IFNULL(COLUMN_TYPE, '')\n        INTO @has_church_id, @church_id_type\n        FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE TABLE_SCHEMA = db_name\n        AND TABLE_NAME = table_name\n        AND COLUMN_NAME = 'church_id';\n        \n        -- Check for foreign key constraints\n        SELECT COUNT(*), IFNULL(REFERENCED_TABLE_NAME, '')\n        INTO @has_fk, @fk_target\n        FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n        WHERE TABLE_SCHEMA = db_name\n        AND TABLE_NAME = table_name\n        AND COLUMN_NAME = 'church_id'\n        AND REFERENCED_TABLE_NAME IS NOT NULL;\n        \n        -- Insert audit record\n        INSERT INTO temp_church_audit (\n            database_name, table_name, has_church_id, church_id_type,\n            has_foreign_key, foreign_key_target, record_count, missing_church_id_count\n        ) VALUES (\n            db_name, table_name, @has_church_id > 0, @church_id_type,\n            @has_fk > 0, @fk_target, @record_count, @missing_church_id\n        );\n        \n    END LOOP;\n    \n    CLOSE table_cursor;\nEND$$\nDELIMITER ;\n\n-- Run audits for known databases\nCALL AuditChurchDatabase('ssppoc_records_db');\nCALL AuditChurchDatabase('saints_peter_and_paul_orthodox_church_db');\n\n-- Display results\nSELECT \n    database_name,\n    table_name,\n    has_church_id,\n    church_id_type,\n    has_foreign_key,\n    foreign_key_target,\n    record_count,\n    missing_church_id_count,\n    CASE \n        WHEN NOT has_church_id THEN 'ADD church_id column'\n        WHEN missing_church_id_count > 0 THEN 'BACKFILL church_id values'\n        WHEN has_foreign_key AND foreign_key_target != 'churches' THEN 'FIX foreign key'\n        ELSE 'OK'\n    END as required_action\nFROM temp_church_audit\nORDER BY database_name, table_name;\n\n-- Re-enable safety checks\nSET SESSION FOREIGN_KEY_CHECKS = 1;\nSET SESSION SQL_SAFE_UPDATES = 1;\nEOF\n\n    # Run the audit\n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" < \"$BACKUP_DIR/audit_only.sql\" > \"$BACKUP_DIR/audit_results.txt\"\n    \n    print_success \"Audit completed. Results saved to $BACKUP_DIR/audit_results.txt\"\n    \n    # Display key findings\n    print_status \"Audit Summary:\"\n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" orthodoxmetrics_db \\\n        -e \"SELECT COUNT(DISTINCT database_name) as databases_found, \n                   COUNT(*) as tables_audited,\n                   SUM(CASE WHEN NOT has_church_id THEN 1 ELSE 0 END) as missing_church_id_columns,\n                   SUM(CASE WHEN missing_church_id_count > 0 THEN 1 ELSE 0 END) as tables_needing_backfill\n            FROM temp_church_audit;\" 2>/dev/null || true\n}\n\n# Run the full migration\nrun_migration() {\n    print_warning \"Running LIVE MIGRATION - this will modify your databases!\"\n    print_status \"Executing church linkage fix script...\"\n    \n    # Run the full migration script\n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" < \"$(dirname \"$0\")/../database/fix-church-linkage.sql\" \\\n        > \"$BACKUP_DIR/migration_results.txt\" 2>&1\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Migration completed successfully!\"\n        print_status \"Results saved to $BACKUP_DIR/migration_results.txt\"\n    else\n        print_error \"Migration failed! Check $BACKUP_DIR/migration_results.txt for details\"\n        print_warning \"You can restore from backups in $BACKUP_DIR\"\n        exit 1\n    fi\n}\n\n# Validate the migration results\nvalidate_results() {\n    print_status \"Validating migration results...\"\n    \n    # Check if the validation view exists and run it\n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" orthodoxmetrics_db \\\n        -e \"SELECT * FROM v_church_record_summary;\" > \"$BACKUP_DIR/validation_results.txt\" 2>/dev/null || true\n    \n    print_success \"Validation completed. Results in $BACKUP_DIR/validation_results.txt\"\n}\n\n# Cleanup temporary data\ncleanup() {\n    print_status \"Cleaning up temporary data...\"\n    \n    mysql -h \"$DB_HOST\" -u \"$DB_USER\" -p\"$DB_PASSWORD\" orthodoxmetrics_db \\\n        -e \"DROP TABLE IF EXISTS temp_church_audit;\" 2>/dev/null || true\n    \n    print_success \"Cleanup completed\"\n}\n\n# Main execution function\nmain() {\n    print_header\n    \n    # Parse command line arguments\n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            --live)\n                DRY_RUN=\"false\"\n                shift\n                ;;\n            --host)\n                DB_HOST=\"$2\"\n                shift 2\n                ;;\n            --user)\n                DB_USER=\"$2\"\n                shift 2\n                ;;\n            --password)\n                DB_PASSWORD=\"[REDACTED]\"\n                shift 2\n                ;;\n            --help)\n                echo \"Usage: $0 [OPTIONS]\"\n                echo \"Options:\"\n                echo \"  --live         Run actual migration (default: dry run)\"\n                echo \"  --host HOST    Database host (default: localhost)\"\n                echo \"  --user USER    Database user (default: orthodoxapps)\"\n                echo \"  --password PWD Database password\"\n                echo \"  --help         Show this help\"\n                exit 0\n                ;;\n            *)\n                print_error \"Unknown option: $1\"\n                exit 1\n                ;;\n        esac\n    done\n    \n    # Confirm if running live migration\n    if [ \"$DRY_RUN\" = \"false\" ]; then\n        print_warning \"You are about to run a LIVE MIGRATION that will modify your databases!\"\n        print_warning \"This will:\"\n        print_warning \"- Add church_id columns to record tables\"\n        print_warning \"- Remove local church_info tables\"\n        print_warning \"- Update foreign key constraints\"\n        echo \"\"\n        read -p \"Are you sure you want to continue? (yes/no): \" confirm\n        if [ \"$confirm\" != \"yes\" ]; then\n            print_status \"Migration cancelled by user\"\n            exit 0\n        fi\n    fi\n    \n    # Execute the migration steps\n    check_prerequisites\n    create_backup_dir\n    backup_databases\n    run_audit\n    \n    if [ \"$DRY_RUN\" = \"false\" ]; then\n        run_migration\n        validate_results\n        cleanup\n        \n        print_success \"🎉 Church linkage migration completed successfully!\"\n        print_status \"Backups are available in: $BACKUP_DIR\"\n        print_status \"Please test your application and verify the results.\"\n    else\n        print_success \"🔍 Audit completed (dry run mode)\"\n        print_status \"Review the audit results in: $BACKUP_DIR/audit_results.txt\"\n        print_status \"To run the actual migration, use: $0 --live\"\n    fi\n}\n\n# Run the script\nmain \"$@\" \n"
    },
    "complexity": {
      "totalLines": 371,
      "codeLines": 278,
      "commentLines": 35,
      "commentRatio": 0.11182108626198083,
      "averageLineLength": 37.677316293929714
    },
    "lastAnalyzed": "2025-07-28T07:20:01.065Z"
  },
  "contentHash": "40ac2e94e76ce6f8f58f124e67d61e35d7ae757e0a13bfc5a08745542cd89507",
  "discoveredAt": "2025-07-28T07:20:01.065Z"
}