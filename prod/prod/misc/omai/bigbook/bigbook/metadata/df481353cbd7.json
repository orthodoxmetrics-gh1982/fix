{
  "id": "df481353cbd7",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/backend/services/gitOpsService.js",
  "relativePath": "backend/services/gitOpsService.js",
  "name": "gitOpsService.js",
  "extension": ".js",
  "size": 11526,
  "modified": "2025-07-25T06:20:15.713Z",
  "created": "2025-07-25T06:19:14.698Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 390,
      "characters": 11526,
      "words": 1090
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 16,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 17,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 18,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 19,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 20,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 21,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 22,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 23,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// GitOps Service\r\n// Handles Git repository operations for Site Editor including commits, branches, and PR creation\r\n\r\nconst { execSync } = require('child_process');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nclass GitOpsService {\r\n  constructor() {\r\n    this.config = this.loadDefaultConfig();\r\n    this.repoPath = process.cwd();\r\n  }\r\n\r\n  loadDefaultConfig() {\r\n    return {\r\n      enabled: process.env.[REDACTED] === 'true',\r\n      autoCommit: process.env.[REDACTED] === 'true',\r\n      branchPrefix: process.env.[REDACTED] || 'site-editor-fix',\r\n      defaultBranch: process.env.[REDACTED] || 'main',\r\n      remoteOrigin: process.env.[REDACTED] || 'origin',\r\n      createPR: process.env.[REDACTED] === 'true',\r\n      prTemplate: process.env.[REDACTED] || '',\r\n      maxCommitsPerBranch: parseInt(process.env.[REDACTED]) || 10\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create commit for a component fix\r\n   */\r\n  async createFixCommit({ componentPath, backupToken, user, message }) {\r\n    if (!this.config.enabled) {\r\n      return { success: false, error: 'GitOps is disabled' };\r\n    }\r\n\r\n    try {\r\n      const branchName = `${this.config.branchPrefix}/${path.basename(componentPath, path.extname(componentPath))}-${Date.now()}`;\r\n      \r\n      // Check if repo is clean\r\n      const status = await this.getRepoStatus();\r\n      if (!status.isClean && !status.hasOnlyTargetFile) {\r\n        return { \r\n          success: false, \r\n          error: 'Repository has uncommitted changes. Please commit or stash them first.' \r\n        };\r\n      }\r\n\r\n      // Create new branch\r\n      await this.createBranch(branchName);\r\n\r\n      // Add and commit the file\r\n      const commitResult = await this.commitFile(componentPath, message, user);\r\n      \r\n      if (!commitResult.success) {\r\n        return commitResult;\r\n      }\r\n\r\n      // Push branch to remote (if configured)\r\n      const pushResult = await this.pushBranch(branchName);\r\n\r\n      return {\r\n        success: true,\r\n        branch: branchName,\r\n        commit: commitResult.commit,\r\n        pushed: pushResult.success,\r\n        backupToken,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to create fix commit:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create pull request\r\n   */\r\n  async createPullRequest({ backupToken, title, description, branch, user }) {\r\n    if (!this.config.enabled || !this.config.createPR) {\r\n      return { success: false, error: 'Pull request creation is disabled' };\r\n    }\r\n\r\n    try {\r\n      // This is a simplified implementation\r\n      // In a real environment, you'd integrate with GitHub/GitLab APIs\r\n      \r\n      const prData = {\r\n        title,\r\n        description: this.formatPRDescription(description, user, backupToken),\r\n        branch,\r\n        baseBranch: this.config.defaultBranch,\r\n        user: user.name,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      // Simulate PR creation\r\n      const prNumber = Math.floor(Math.random() * 1000) + 1;\r\n      const prUrl = `https://github.com/yourorg/yourrepo/pull/${prNumber}`;\r\n\r\n      // Log PR creation\r\n      console.log(`[GitOps] Pull request created: ${prUrl}`);\r\n      console.log(`Title: ${title}`);\r\n      console.log(`Branch: ${branch} -> ${this.config.defaultBranch}`);\r\n\r\n      return {\r\n        success: true,\r\n        prNumber,\r\n        prUrl,\r\n        title,\r\n        branch,\r\n        ...prData\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to create pull request:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get repository status\r\n   */\r\n  async getRepoStatus() {\r\n    try {\r\n      // Check if we're in a git repository\r\n      const isGitRepo = await this.isGitRepository();\r\n      if (!isGitRepo) {\r\n        return {\r\n          isGitRepo: false,\r\n          error: 'Not a git repository'\r\n        };\r\n      }\r\n\r\n      // Get current branch\r\n      const currentBranch = this.executeGitCommand('git rev-parse --abbrev-ref HEAD').trim();\r\n      \r\n      // Get status\r\n      const statusOutput = this.executeGitCommand('git status --porcelain');\r\n      const isClean = statusOutput.trim() === '';\r\n      \r\n      // Get commit info\r\n      let lastCommit = null;\r\n      try {\r\n        const commitHash = this.executeGitCommand('git rev-parse HEAD').trim();\r\n        const commitMessage = this.executeGitCommand('git log -1 --pretty=%s').trim();\r\n        const commitAuthor = this.executeGitCommand('git log -1 --pretty=%an').trim();\r\n        const commitDate = this.executeGitCommand('git log -1 --pretty=%ci').trim();\r\n        \r\n        lastCommit = {\r\n          hash: commitHash,\r\n          message: commitMessage,\r\n          author: commitAuthor,\r\n          date: commitDate\r\n        };\r\n      } catch (error) {\r\n        console.warn('[GitOps] Failed to get commit info:', error.message);\r\n      }\r\n\r\n      // Get remote info\r\n      let remoteUrl = null;\r\n      try {\r\n        remoteUrl = this.executeGitCommand(`git remote get-url ${this.config.remoteOrigin}`).trim();\r\n      } catch (error) {\r\n        console.warn('[GitOps] Failed to get remote URL:', error.message);\r\n      }\r\n\r\n      return {\r\n        isGitRepo: true,\r\n        currentBranch,\r\n        isClean,\r\n        hasChanges: !isClean,\r\n        lastCommit,\r\n        remoteUrl,\r\n        untracked: this.parseStatusOutput(statusOutput, '??'),\r\n        modified: this.parseStatusOutput(statusOutput, ' M'),\r\n        added: this.parseStatusOutput(statusOutput, 'A '),\r\n        deleted: this.parseStatusOutput(statusOutput, ' D')\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to get repo status:', error);\r\n      return {\r\n        isGitRepo: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new branch\r\n   */\r\n  async createBranch(branchName) {\r\n    try {\r\n      // Ensure we're on the default branch\r\n      this.executeGitCommand(`git checkout ${this.config.defaultBranch}`);\r\n      \r\n      // Pull latest changes\r\n      try {\r\n        this.executeGitCommand(`git pull ${this.config.remoteOrigin} ${this.config.defaultBranch}`);\r\n      } catch (error) {\r\n        console.warn('[GitOps] Failed to pull latest changes:', error.message);\r\n      }\r\n\r\n      // Create and checkout new branch\r\n      this.executeGitCommand(`git checkout -b ${branchName}`);\r\n      \r\n      console.log(`[GitOps] Created branch: ${branchName}`);\r\n      return { success: true, branch: branchName };\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to create branch:', error);\r\n      throw new Error(`Failed to create branch: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Commit file changes\r\n   */\r\n  async commitFile(filePath, message, user) {\r\n    try {\r\n      // Configure git user for this commit\r\n      this.executeGitCommand(`git config user.name \"${user.name}\"`);\r\n      this.executeGitCommand(`git config user.email \"${user.email || `${user.name.toLowerCase().replace(/\\s+/g, '.')}@orthodoxmetrics.local`}\"`);\r\n\r\n      // Add the file\r\n      this.executeGitCommand(`git add \"${filePath}\"`);\r\n      \r\n      // Check if there are changes to commit\r\n      const diffOutput = this.executeGitCommand('git diff --cached --stat');\r\n      if (!diffOutput.trim()) {\r\n        return { success: false, error: 'No changes to commit' };\r\n      }\r\n\r\n      // Commit the changes\r\n      const commitMessage = `${message}\\n\\nCommitted via Site Editor\\nUser: ${user.name} (${user.id})`;\r\n      this.executeGitCommand(`git commit -m \"${commitMessage}\"`);\r\n      \r\n      // Get commit hash\r\n      const commitHash = this.executeGitCommand('git rev-parse HEAD').trim();\r\n      \r\n      console.log(`[GitOps] Committed changes: ${commitHash}`);\r\n      \r\n      return {\r\n        success: true,\r\n        commit: commitHash,\r\n        message: commitMessage,\r\n        file: filePath\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to commit file:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Push branch to remote\r\n   */\r\n  async pushBranch(branchName) {\r\n    try {\r\n      this.executeGitCommand(`git push -u ${this.config.remoteOrigin} ${branchName}`);\r\n      \r\n      console.log(`[GitOps] Pushed branch: ${branchName}`);\r\n      \r\n      return { success: true, branch: branchName };\r\n\r\n    } catch (error) {\r\n      console.warn('[GitOps] Failed to push branch:', error.message);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        branch: branchName\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format PR description\r\n   */\r\n  formatPRDescription(description, user, backupToken) {\r\n    const template = `${description}\r\n\r\n## Site Editor Fix Details\r\n\r\n- **Fixed by:** ${user.name} (${user.id})\r\n- **Backup Token:** ${backupToken}\r\n- **Fixed at:** ${new Date().toISOString()}\r\n- **Tool:** OrthodoxMetrics Site Editor\r\n\r\n## Review Checklist\r\n\r\n- [ ] Code follows project standards\r\n- [ ] Changes are tested\r\n- [ ] No breaking changes introduced\r\n- [ ] Documentation updated if needed\r\n\r\n---\r\n*This PR was created automatically by the Site Editor*`;\r\n\r\n    return template;\r\n  }\r\n\r\n  // Helper methods\r\n\r\n  async isGitRepository() {\r\n    try {\r\n      this.executeGitCommand('git rev-parse --git-dir');\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  executeGitCommand(command, options = {}) {\r\n    try {\r\n      return execSync(command, {\r\n        cwd: this.repoPath,\r\n        encoding: 'utf8',\r\n        stdio: 'pipe',\r\n        ...options\r\n      });\r\n    } catch (error) {\r\n      console.error(`[GitOps] Git command failed: ${command}`);\r\n      console.error(`[GitOps] Error: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  parseStatusOutput(statusOutput, statusCode) {\r\n    const lines = statusOutput.split('\\n').filter(line => line.trim());\r\n    return lines\r\n      .filter(line => line.startsWith(statusCode))\r\n      .map(line => line.substring(2).trim());\r\n  }\r\n\r\n  /**\r\n   * Clean up old branches\r\n   */\r\n  async cleanupOldBranches() {\r\n    try {\r\n      // Get all branches with our prefix\r\n      const branches = this.executeGitCommand(`git branch --list \"${this.config.branchPrefix}/*\"`);\r\n      const branchList = branches.split('\\n')\r\n        .map(b => b.trim().replace(/^\\*\\s*/, ''))\r\n        .filter(b => b && b.startsWith(this.config.branchPrefix));\r\n\r\n      if (branchList.length > this.config.maxCommitsPerBranch) {\r\n        const toDelete = branchList.slice(this.config.maxCommitsPerBranch);\r\n        \r\n        for (const branch of toDelete) {\r\n          try {\r\n            this.executeGitCommand(`git branch -D ${branch}`);\r\n            console.log(`[GitOps] Deleted old branch: ${branch}`);\r\n          } catch (error) {\r\n            console.warn(`[GitOps] Failed to delete branch ${branch}:`, error.message);\r\n          }\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('[GitOps] Failed to cleanup old branches:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get configuration\r\n   */\r\n  getConfig() {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  updateConfig(newConfig) {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('[GitOps] Configuration updated');\r\n  }\r\n}\r\n\r\nmodule.exports = GitOpsService; "
    },
    "complexity": {
      "totalLines": 390,
      "codeLines": 270,
      "commentLines": 58,
      "commentRatio": 0.17682926829268292,
      "averageLineLength": 33.478658536585364
    },
    "lastAnalyzed": "2025-07-28T07:19:56.502Z"
  },
  "contentHash": "b587c031c6d322476776d26d78a6eb5fa51208b8c1a8b93a94acbdd80cea0361",
  "discoveredAt": "2025-07-28T07:19:56.502Z"
}