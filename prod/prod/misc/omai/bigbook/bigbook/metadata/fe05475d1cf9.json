{
  "id": "fe05475d1cf9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/debug-public-ocr.js",
  "relativePath": "server/testing/debug-public-ocr.js",
  "name": "debug-public-ocr.js",
  "extension": ".js",
  "size": 6909,
  "modified": "2025-07-11T10:49:29.380Z",
  "created": "2025-07-11T00:52:04.570Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 204,
      "characters": 6841,
      "words": 682
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "fs",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "form-data",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "node-fetch",
        "line": 9
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 154,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 155,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 157,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 166,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 167,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n// Test script for Public OCR Processing Endpoint\r\n// Run with: node debug-public-ocr.js\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst FormData = require('form-data');\r\nconst fetch = require('node-fetch');\r\n\r\nconsole.log('üîç Debugging Public OCR Processing\\n');\r\n\r\n// Test 1: Check if we have test images\r\nconsole.log('1Ô∏è‚É£ Checking for test images...');\r\nconst testImagePaths = [\r\n  './test-images/sample.jpg',\r\n  './test-images/sample.png',\r\n  '../uploads/test.jpg',\r\n  './uploads/test.jpg'\r\n];\r\n\r\nlet testImagePath = null;\r\nfor (const imagePath of testImagePaths) {\r\n  if (fs.existsSync(imagePath)) {\r\n    testImagePath = imagePath;\r\n    console.log(`‚úÖ Found test image: ${imagePath}`);\r\n    break;\r\n  }\r\n}\r\n\r\nif (!testImagePath) {\r\n  console.log('‚ö†Ô∏è  No test image found. Creating a simple test image...');\r\n  \r\n  // Create a simple test image (1x1 pixel PNG)\r\n  const simpleImageData = Buffer.from([\r\n    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,\r\n    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\r\n    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, 0x00, 0x00, 0x00,\r\n    0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0xF8, 0x0F, 0x00, 0x00,\r\n    0x01, 0x00, 0x01, 0x5C, 0xC2, 0xD5, 0x9B, 0x00, 0x00, 0x00, 0x00, 0x49,\r\n    0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\r\n  ]);\r\n  \r\n  testImagePath = './test-simple.png';\r\n  fs.writeFileSync(testImagePath, simpleImageData);\r\n  console.log(`‚úÖ Created simple test image: ${testImagePath}`);\r\n}\r\n\r\n// Test 2: Test the OCR processing endpoint\r\nasync function testOCRProcessing() {\r\n  console.log('\\n2Ô∏è‚É£ Testing OCR processing endpoint...');\r\n  \r\n  try {\r\n    // Read the test image\r\n    const imageBuffer = fs.readFileSync(testImagePath);\r\n    console.log(`üìÑ Image size: ${imageBuffer.length} bytes`);\r\n    \r\n    // Create form data\r\n    const formData = new FormData();\r\n    formData.append('image', imageBuffer, {\r\n      filename: path.basename(testImagePath),\r\n      contentType: testImagePath.endsWith('.png') ? 'image/png' : 'image/jpeg'\r\n    });\r\n    formData.append('language', 'auto');\r\n    \r\n    console.log('üì§ Sending OCR request...');\r\n    \r\n    // Make the request\r\n    const response = await fetch('http://localhost:3001/api/public/ocr/process', {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: formData.getHeaders()\r\n    });\r\n    \r\n    console.log(`üì• Response status: ${response.status} ${response.statusText}`);\r\n    \r\n    const responseText = await response.text();\r\n    console.log(`üìù Response body length: ${responseText.length} characters`);\r\n    \r\n    if (response.ok) {\r\n      const result = JSON.parse(responseText);\r\n      console.log('‚úÖ OCR processing successful!');\r\n      console.log(`   - Job ID: ${result.id}`);\r\n      console.log(`   - Filename: ${result.filename}`);\r\n      console.log(`   - Confidence: ${(result.confidence * 100).toFixed(1)}%`);\r\n      console.log(`   - Language: ${result.detectedLanguage || result.language}`);\r\n      console.log(`   - Text length: ${result.text?.length || 0} characters`);\r\n      console.log(`   - Translation: ${result.translatedText ? 'Yes' : 'No'}`);\r\n      \r\n      if (result.text && result.text.length > 0) {\r\n        console.log(`   - Sample text: \"${result.text.substring(0, 100)}${result.text.length > 100 ? '...' : ''}\"`);\r\n      }\r\n    } else {\r\n      console.log('‚ùå OCR processing failed');\r\n      console.log(`   Error response: ${responseText}`);\r\n      \r\n      try {\r\n        const errorObj = JSON.parse(responseText);\r\n        console.log(`   Error details: ${errorObj.error}`);\r\n        if (errorObj.details) {\r\n          console.log(`   Details: ${errorObj.details}`);\r\n        }\r\n      } catch (e) {\r\n        console.log(`   Raw error: ${responseText}`);\r\n      }\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.log('‚ùå Request failed');\r\n    console.log(`   Error: ${error.message}`);\r\n    console.log(`   Stack: ${error.stack}`);\r\n  }\r\n}\r\n\r\n// Test 3: Check server logs\r\nasync function checkServerLogs() {\r\n  console.log('\\n3Ô∏è‚É£ Checking server logs...');\r\n  \r\n  const logPaths = [\r\n    './logs/production.log',\r\n    './logs/development.log',\r\n    './logs/app.log'\r\n  ];\r\n  \r\n  for (const logPath of logPaths) {\r\n    if (fs.existsSync(logPath)) {\r\n      console.log(`üìã Found log file: ${logPath}`);\r\n      try {\r\n        const logContent = fs.readFileSync(logPath, 'utf8');\r\n        const lines = logContent.split('\\n').slice(-20); // Last 20 lines\r\n        console.log('   Recent log entries:');\r\n        lines.forEach(line => {\r\n          if (line.trim()) {\r\n            console.log(`   ${line}`);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.log(`   ‚ùå Could not read log file: ${error.message}`);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n// Test 4: Check OCR service dependencies\r\nasync function checkDependencies() {\r\n  console.log('\\n4Ô∏è‚É£ Checking OCR service dependencies...');\r\n  \r\n  try {\r\n    const { processOCRForImage, translateText } = require('./services/ocrProcessingService');\r\n    console.log('‚úÖ OCR processing service imported successfully');\r\n    \r\n    // Check Google Vision credentials\r\n    if (process.env.[REDACTED]) {\r\n      console.log(`‚úÖ Google credentials path: ${process.env.[REDACTED]}`);\r\n      \r\n      if (fs.existsSync(process.env.[REDACTED])) {\r\n        console.log('‚úÖ Credentials file exists');\r\n      } else {\r\n        console.log('‚ùå Credentials file not found');\r\n      }\r\n    } else {\r\n      console.log('‚ùå GOOGLE_APPLICATION_CREDENTIALS not set');\r\n    }\r\n    \r\n    if (process.env.[REDACTED]) {\r\n      console.log(`‚úÖ Google Cloud project: ${process.env.[REDACTED]}`);\r\n    } else {\r\n      console.log('‚ùå GOOGLE_CLOUD_PROJECT not set');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.log(`‚ùå OCR service import failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Run all tests\r\nasync function runTests() {\r\n  await testOCRProcessing();\r\n  await checkServerLogs();\r\n  await checkDependencies();\r\n  \r\n  console.log('\\nüéØ Debug Summary:');\r\n  console.log('   - Health endpoint: ‚úÖ Working');\r\n  console.log('   - OCR processing: Check results above');\r\n  console.log('   - Check server logs for detailed error information');\r\n  console.log('\\nüí° Next steps:');\r\n  console.log('   1. Check the server console for real-time error logs');\r\n  console.log('   2. Verify Google Vision API credentials and project setup');\r\n  console.log('   3. Test with a real image containing text');\r\n  \r\n  // Clean up test file\r\n  if (testImagePath === './test-simple.png') {\r\n    try {\r\n      fs.unlinkSync(testImagePath);\r\n      console.log('üßπ Cleaned up test image');\r\n    } catch (e) {\r\n      // Ignore cleanup errors\r\n    }\r\n  }\r\n}\r\n\r\nrunTests().catch(console.error);\r\n"
    },
    "complexity": {
      "totalLines": 204,
      "codeLines": 156,
      "commentLines": 15,
      "commentRatio": 0.08771929824561403,
      "averageLineLength": 38.198830409356724
    },
    "lastAnalyzed": "2025-07-28T07:20:01.190Z"
  },
  "contentHash": "97e84aa6078c17e28feabeaa0c126a165170bf128c2ca1640d99c4edac27a6e9",
  "discoveredAt": "2025-07-28T07:20:01.190Z"
}