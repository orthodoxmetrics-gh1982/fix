{
  "id": "8b0c911858ae",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/SERVER_CONFIGURATION_GUIDE.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/SERVER_CONFIGURATION_GUIDE.md",
  "name": "SERVER_CONFIGURATION_GUIDE.md",
  "extension": ".md",
  "size": 14301,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:06.956Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 9
  },
  "metadata": {
    "fileStats": {
      "lines": 507,
      "characters": 14115,
      "words": 1364
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 9
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 178
      },
      {
        "type": "npm_package",
        "name": "mysql2",
        "line": 196
      },
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 215
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 216
      },
      {
        "type": "npm_package",
        "name": "winston",
        "line": 272
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 199,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 200,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 201,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 202,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 203,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 233,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 240,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 407,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 418,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Orthodox Metrics Server Configuration Guide\r\n\r\n## Overview\r\nThis document outlines the default configurations for the Orthodox Metrics server components, including the main server file, routes, configuration files, and middleware.\r\n\r\n---\r\n\r\n## Server/index.js Configuration\r\n\r\n### Port and Host Settings\r\n```javascript\r\nconst PORT = process.env.[REDACTED] || 3001;\r\nconst HOST = process.env.[REDACTED] || '0.0.0.0';\r\n```\r\n\r\n### CORS Allowed Origins\r\n```javascript\r\nconst allowedOrigins = [\r\n  'http://localhost:3000',\r\n  'https://orthodoxmetrics.com',\r\n  'http://localhost:3001',\r\n  'http://localhost:5173',\r\n  'http://localhost:5174',\r\n  'http://127.0.0.1:3000',\r\n  'http://127.0.0.1:3001',\r\n  'http://127.0.0.1:5173',\r\n  'http://127.0.0.1:5174',\r\n  'http://192.168.1.239',\r\n  'http://192.168.1.239:3000',\r\n  'http://192.168.1.239:3001',\r\n  'http://192.168.1.239:5173',\r\n  'http://192.168.1.239:5174',\r\n  'http://192.168.1.221',\r\n  'http://192.168.1.221:3000',\r\n  'http://192.168.1.221:3001',\r\n  'http://192.168.1.221:5173',\r\n  'http://192.168.1.221:5174',\r\n  'https://orthodmetrics.com'\r\n];\r\n```\r\n\r\n### Middleware Stack (in order)\r\n1. `morgan('dev')` - HTTP request logger\r\n2. `express.json()` - JSON body parser\r\n3. `sessionMW` - Session management\r\n4. `requestLogger` - Custom request logging\r\n\r\n### Route Mounting Order\r\n```javascript\r\n// API prefixed routes (for direct API access)\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/admin', adminRoutes);\r\napp.use('/api/admin/backup', backupRouter);\r\napp.use('/api', notificationRouter);\r\napp.use('/api', debugRoutes);\r\n\r\n// Direct routes (for nginx proxy without /api prefix)\r\napp.use('/auth', authRoutes);\r\napp.use('/admin', adminRoutes);\r\napp.use('/admin/backup', backupRouter);\r\napp.use('/', notificationRouter);\r\napp.use('/debug', debugRoutes);\r\napp.use('/menu-management', menuManagementRoutes);\r\napp.use('/menu-permissions', menuPermissionsRoutes);\r\napp.use('/notes', notesRoutes);\r\napp.use('/kanban', kanbanRouter);\r\napp.use('/baptism-records', baptismRouter);\r\napp.use('/marriage-records', marriageRouter);\r\napp.use('/funeral-records', funeralRouter);\r\napp.use('/unique-values', uniqueValuesRouter);\r\napp.use('/dashboard', dashboardRouter);\r\napp.use('/calendar', calendarRouter);\r\napp.use('/billing', billingRouter);\r\napp.use('/invoices', invoicesRouter);\r\napp.use('/churches', churchesRouter);\r\napp.use('/logs', logsRouter);\r\n\r\n// API routes with /api prefix\r\napp.use('/api/menu-management', menuManagementRoutes);\r\napp.use('/api/menu-permissions', menuPermissionsRoutes);\r\napp.use('/api/notes', notesRoutes);\r\napp.use('/api/kanban', kanbanRouter);\r\napp.use('/api/baptism-records', baptismRouter);\r\napp.use('/api/marriage-records', marriageRouter);\r\napp.use('/api/funeral-records', funeralRouter);\r\napp.use('/api/unique-values', uniqueValuesRouter);\r\napp.use('/api/baptismCertificates', baptismCertificatesRouter);\r\napp.use('/api/certificate/baptism', baptismCertificatesRouter);\r\napp.use('/api/marriageCertificates', marriageCertificatesRouter);\r\napp.use('/api/certificate/marriage', marriageCertificatesRouter);\r\n\r\n// OCR Routes (mounted in specific order to prevent conflicts)\r\napp.post('/api/test-ocr', /* inline test route */);\r\napp.use('/api', ocrVisionRouter); // Google Vision OCR routes\r\napp.use('/api', uploadTokenRouter); // Upload token management\r\napp.use('/api', ocrRouter); // Generic OCR routes\r\n\r\n// Additional API routes\r\napp.use('/api/calendar', calendarRouter);\r\napp.use('/api/dashboard', dashboardRouter);\r\napp.use('/api/invoices', invoicesRouter);\r\napp.use('/api/invoices-enhanced', enhancedInvoicesRouter);\r\napp.use('/api/invoices-ml', invoicesMultilingualRouter);\r\napp.use('/api/enhanced-invoices', enhancedInvoicesRouter);\r\napp.use('/api/billing', billingRouter);\r\napp.use('/api/churches', churchesRouter);\r\napp.use('/api/provision', provisionRouter);\r\napp.use('/api/certificates', certificatesRouter);\r\napp.use('/api/ocr', ocrSessionsRouter);\r\napp.use('/api/eCommerce', ecommerceRouter);\r\napp.use('/api/logs', logsRouter);\r\n\r\n// Dropdown options (mounted last to prevent override)\r\napp.use('/api', dropdownOptionsRouter);\r\n\r\n// Direct routes for compatibility\r\napp.use('/', ocrRouter);\r\napp.use('/ocr', ocrSessionsRouter);\r\n```\r\n\r\n### Built-in Debug Routes\r\n- `GET /api/test` - Basic API test\r\n- `POST /api/debug-ocr` - OCR debug endpoint\r\n- `GET /test` - Direct test route\r\n- `GET /api/debug/routes` - Lists all registered routes\r\n\r\n### Email Queue Processing\r\n```javascript\r\n// Cron job runs every 5 minutes\r\ncron.schedule('*/5 * * * *', async () => {\r\n  const processedCount = await notificationService.processEmailQueue();\r\n});\r\n```\r\n\r\n---\r\n\r\n## Server/routes Directory Structure\r\n\r\n### Available Route Files\r\n```\r\nserver/routes/\r\n├── admin.js              # Admin panel functionality\r\n├── auth.js               # Authentication routes\r\n├── backup.js             # Database backup routes\r\n├── baptism.js            # Baptism records\r\n├── baptismCertificates.js # Baptism certificates\r\n├── billing.js            # Billing management\r\n├── calendar.js           # Calendar events\r\n├── certificates.js       # Certificate generation\r\n├── churches.js           # Church management\r\n├── dashboard.js          # Dashboard data\r\n├── debug.js              # Debug utilities\r\n├── dropdownOptions.js    # Dropdown data\r\n├── ecommerce.js          # E-commerce functionality\r\n├── enhancedInvoices.js   # Enhanced invoice features\r\n├── funeral.js            # Funeral records\r\n├── invoices.js           # Basic invoicing\r\n├── invoicesMultilingual.js # Multi-language invoices\r\n├── kanban.js             # Kanban board\r\n├── logs.js               # System logs\r\n├── marriage.js           # Marriage records\r\n├── marriageCertificates.js # Marriage certificates\r\n├── menuManagement.js     # Menu configuration\r\n├── menuPermissions.js    # Menu permissions\r\n├── notes.js              # Notes system\r\n├── notifications.js      # Notification system\r\n├── ocr.js                # Generic OCR routes\r\n├── ocrSessions.js        # OCR session management\r\n├── ocrVision.js          # Google Vision OCR\r\n├── provision.js          # User provisioning\r\n├── unique-values.js      # Unique value validation\r\n└── uploadToken.js        # File upload tokens\r\n```\r\n\r\n### Route Configuration Patterns\r\nEach route file typically follows this pattern:\r\n```javascript\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst { requireAuth } = require('../middleware/auth');\r\n\r\n// Route definitions with authentication\r\nrouter.get('/endpoint', requireAuth, (req, res) => {\r\n  // Route logic\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n---\r\n\r\n## Server/config Directory Structure\r\n\r\n### Database Configuration (config/db.js)\r\n```javascript\r\nconst mysql = require('mysql2');\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  port: process.env.[REDACTED] || 3306,\r\n  user: process.env.[REDACTED] || 'orthodoxapp',\r\n  password: process.env.[REDACTED],\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n  acquireTimeout: 60000,\r\n  timeout: 60000,\r\n  reconnect: true\r\n});\r\n```\r\n\r\n### Session Configuration (config/session.js)\r\n```javascript\r\nconst session = require('express-session');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\n\r\nconst sessionStore = new MySQLStore({\r\n  expiration: 24 * 60 * 60 * 1000, // 24 hours\r\n  createDatabaseTable: true,\r\n  schema: {\r\n    tableName: 'sessions',\r\n    columnNames: {\r\n      session_id: 'session_id',\r\n      expires: 'expires',\r\n      data: 'data'\r\n    }\r\n  }\r\n}, pool);\r\n\r\nmodule.exports = session({\r\n  key: 'orthodoxmetrics.sid',\r\n  secret: process.env.[REDACTED] || 'fallback-secret',\r\n  store: sessionStore,\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  cookie: {\r\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n    httpOnly: true,\r\n    secure: process.env.[REDACTED] === 'production',\r\n    sameSite: 'lax'\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Server/middleware Directory Structure\r\n\r\n### Authentication Middleware (middleware/auth.js)\r\n```javascript\r\nconst requireAuth = (req, res, next) => {\r\n  if (req.session && req.session.user) {\r\n    return next();\r\n  } else {\r\n    return res.status(401).json({ error: 'Authentication required' });\r\n  }\r\n};\r\n\r\nconst requireAdmin = (req, res, next) => {\r\n  if (req.session && req.session.user && \r\n      (req.session.user.role === 'admin' || req.session.user.role === 'super_admin')) {\r\n    return next();\r\n  } else {\r\n    return res.status(403).json({ error: 'Admin access required' });\r\n  }\r\n};\r\n```\r\n\r\n### Logging Middleware (middleware/logger.js)\r\n```javascript\r\nconst winston = require('winston');\r\n\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: winston.format.combine(\r\n    winston.format.timestamp(),\r\n    winston.format.errors({ stack: true }),\r\n    winston.format.json()\r\n  ),\r\n  defaultMeta: { service: 'orthodox-backend' },\r\n  transports: [\r\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\r\n    new winston.transports.File({ filename: 'logs/combined.log' })\r\n  ]\r\n});\r\n\r\nconst requestLogger = (req, res, next) => {\r\n  const start = Date.now();\r\n  res.on('finish', () => {\r\n    const duration = Date.now() - start;\r\n    logger.info({\r\n      method: req.method,\r\n      url: req.url,\r\n      statusCode: res.statusCode,\r\n      duration,\r\n      ip: req.ip,\r\n      userAgent: req.get('User-Agent')\r\n    });\r\n  });\r\n  next();\r\n};\r\n\r\nconst errorLogger = (err, req, res, next) => {\r\n  logger.error({\r\n    error: err.message,\r\n    stack: err.stack,\r\n    method: req.method,\r\n    url: req.url,\r\n    ip: req.ip\r\n  });\r\n  next(err);\r\n};\r\n```\r\n\r\n---\r\n\r\n## Environment Variables\r\n\r\n### Required Environment Variables\r\n```bash\r\n# Database\r\nDB_HOST=localhost\r\nDB_PORT=3306\r\nDB_USER=orthodoxapp\r\nDB_PASSWORD=your_db_password\r\nDB_NAME=orthodoxmetrics_db\r\n\r\n# Session\r\nSESSION_SECRET=your_session_secret\r\n\r\n# Server\r\nPORT=3001\r\nHOST=0.0.0.0\r\nNODE_ENV=production\r\n\r\n# OCR and File Upload\r\nUPLOAD_DIR=./uploads\r\nOCR_RESULTS_DIR=./ocr-results\r\nMAX_FILE_SIZE=20971520\r\n\r\n# Google Cloud Vision (optional)\r\nGOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json\r\n\r\n# Email (optional)\r\nSMTP_HOST=smtp.gmail.com\r\nSMTP_PORT=587\r\nSMTP_USER=your_email@gmail.com\r\nSMTP_PASS=your_app_password\r\n\r\n# Stripe (optional)\r\nSTRIPE_SECRET_KEY=sk_test_...\r\nSTRIPE_PUBLISHABLE_KEY=pk_test_...\r\n```\r\n\r\n---\r\n\r\n## PM2 Configuration\r\n\r\n### Default PM2 Ecosystem (ecosystem.config.cjs)\r\n```javascript\r\nmodule.exports = {\r\n  apps: [{\r\n    name: 'orthodox-backend',\r\n    script: './server/index.js',\r\n    instances: 1,\r\n    exec_mode: 'cluster',\r\n    env: {\r\n      NODE_ENV: 'development'\r\n    },\r\n    env_production: {\r\n      NODE_ENV: 'production'\r\n    },\r\n    error_file: './logs/orthodox-backend-error.log',\r\n    out_file: './logs/orthodox-backend-out.log',\r\n    log_file: './logs/orthodox-backend.log',\r\n    time: true\r\n  }, {\r\n    name: 'orthodox-frontend',\r\n    script: 'npm',\r\n    args: 'start',\r\n    cwd: './front-end',\r\n    instances: 1,\r\n    exec_mode: 'cluster',\r\n    env: {\r\n      NODE_ENV: 'development'\r\n    },\r\n    env_production: {\r\n      NODE_ENV: 'production'\r\n    },\r\n    error_file: './logs/orthodox-frontend-error.log',\r\n    out_file: './logs/orthodox-frontend-out.log',\r\n    log_file: './logs/orthodox-frontend.log',\r\n    time: true\r\n  }]\r\n};\r\n```\r\n\r\n---\r\n\r\n## File Upload Configuration\r\n\r\n### Multer Configuration (in ocrVision.js)\r\n```javascript\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, process.env.[REDACTED] || './uploads');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\r\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\r\n  }\r\n});\r\n\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fileSize: parseInt(process.env.[REDACTED]) || 20 * 1024 * 1024, // 20MB\r\n    files: 1\r\n  },\r\n  fileFilter: (req, file, cb) => {\r\n    const allowedTypes = [\r\n      'image/jpeg', 'image/png', 'image/tiff', 'image/gif',\r\n      'image/bmp', 'image/webp', 'application/pdf'\r\n    ];\r\n    if (allowedTypes.includes(file.mimetype)) {\r\n      cb(null, true);\r\n    } else {\r\n      cb(new Error('Invalid file type'), false);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Security Configuration\r\n\r\n### CORS Configuration\r\n```javascript\r\napp.use(cors({\r\n  origin: function (origin, callback) {\r\n    if (!origin) return callback(null, true);\r\n    if (allowedOrigins.includes(origin)) return callback(null, true);\r\n    callback(new Error('CORS policy does not allow access from origin: ' + origin));\r\n  },\r\n  credentials: true\r\n}));\r\n```\r\n\r\n### Session Security\r\n- HTTP-only cookies\r\n- Secure cookies in production\r\n- SameSite protection\r\n- 24-hour expiration\r\n- MySQL session store\r\n\r\n---\r\n\r\n## Logging Configuration\r\n\r\n### Log Levels\r\n- `error`: Error messages only\r\n- `info`: General information\r\n- `debug`: Detailed debug information\r\n\r\n### Log Files\r\n- `logs/error.log`: Error-level logs only\r\n- `logs/combined.log`: All log levels\r\n- `logs/orthodox-backend-error.log`: PM2 error output\r\n- `logs/orthodox-backend-out.log`: PM2 standard output\r\n- `logs/orthodox-backend.log`: PM2 combined output\r\n\r\n---\r\n\r\n## Performance Settings\r\n\r\n### Database Connection Pool\r\n- Connection limit: 10\r\n- Queue limit: 0 (unlimited)\r\n- Acquire timeout: 60 seconds\r\n- Query timeout: 60 seconds\r\n- Auto-reconnect: enabled\r\n\r\n### File Upload Limits\r\n- Maximum file size: 20MB\r\n- Maximum files per request: 1\r\n- Allowed file types: Images and PDFs\r\n\r\n---\r\n\r\n## Troubleshooting\r\n\r\n### Common Configuration Issues\r\n1. **Port conflicts**: Check if port 3001 is available\r\n2. **Database connection**: Verify database credentials\r\n3. **Session issues**: Ensure session secret is set\r\n4. **File upload failures**: Check upload directory permissions\r\n5. **CORS errors**: Verify origin is in allowed list\r\n\r\n### Debug Endpoints\r\n- `GET /api/test`: Basic connectivity test\r\n- `GET /api/debug/routes`: List all registered routes\r\n- `POST /api/debug-ocr`: OCR endpoint testing\r\n\r\nLast Updated: July 8, 2025\r\n"
    },
    "complexity": {
      "totalLines": 507,
      "codeLines": 384,
      "commentLines": 53,
      "commentRatio": 0.12128146453089245,
      "averageLineLength": 30.983981693363845
    },
    "lastAnalyzed": "2025-07-28T07:19:58.216Z"
  },
  "contentHash": "657647179a2913e2fc7896cdeeb647004e40cbf9cfd743e4ea5d83b03b61e408",
  "discoveredAt": "2025-07-28T07:19:58.216Z"
}