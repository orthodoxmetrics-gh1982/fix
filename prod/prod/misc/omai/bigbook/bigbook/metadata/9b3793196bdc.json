{
  "id": "9b3793196bdc",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/check-frontend-auth-context.js",
  "relativePath": "server/debug/check-frontend-auth-context.js",
  "name": "check-frontend-auth-context.js",
  "extension": ".js",
  "size": 3577,
  "modified": "2025-07-24T14:50:26.344Z",
  "created": "2025-07-24T14:50:26.344Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 87,
      "characters": 3561,
      "words": 312
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 1
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 8
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 5,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 15,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "const mysql = require('mysql2/promise');\r\nconst path = require('path');\r\n\r\n// Load environment variables\r\nconst envFile = process.env.[REDACTED] === 'production' \r\n  ? '../.env.production' \r\n  : '../.env.development';\r\nrequire('dotenv').config({ path: path.resolve(__dirname, envFile) });\r\n\r\nconst dbConfig = {\r\n  host: process.env.[REDACTED] || '0.0.0.0',\r\n  port: process.env.[REDACTED] || 3306,\r\n  user: process.env.[REDACTED] || 'orthodoxapps',\r\n  password: process.env.[REDACTED] || 'Summerof1982@!',\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  charset: 'utf8mb4'\r\n};\r\n\r\nasync function checkFrontendAuthContext() {\r\n  let connection;\r\n  \r\n  try {\r\n    console.log('üîç Debugging Frontend AuthContext vs Backend Database...');\r\n    \r\n    connection = await mysql.createConnection(dbConfig);\r\n    \r\n    // Check database state\r\n    console.log('\\nüìä BACKEND DATABASE STATE:');\r\n    const [userResult] = await connection.execute(\r\n      'SELECT id, email, role, is_active, first_name, last_name FROM users WHERE email = ?',\r\n      ['superadmin@orthodoxmetrics.com']\r\n    );\r\n    \r\n    if (userResult.length === 0) {\r\n      console.log('‚ùå User not found in database!');\r\n      return;\r\n    }\r\n    \r\n    const dbUser = userResult[0];\r\n    console.log('Database User:', JSON.stringify(dbUser, null, 2));\r\n    \r\n    // Expected frontend behavior\r\n    console.log('\\nüéØ EXPECTED FRONTEND BEHAVIOR:');\r\n    console.log('isSuperAdmin() should return:', dbUser.role === 'super_admin');\r\n    console.log('hasRole([\\'admin\\', \\'super_admin\\']) should return:', ['admin', 'super_admin'].includes(dbUser.role));\r\n    console.log('Content & Services tabs should be:', (dbUser.role === 'super_admin') ? 'VISIBLE' : 'HIDDEN');\r\n    \r\n    console.log('\\nüîß DEBUGGING STEPS FOR FRONTEND:');\r\n    console.log('1. Open browser dev tools (F12)');\r\n    console.log('2. Go to Console tab');\r\n    console.log('3. Type these commands to debug AuthContext:');\r\n    console.log('');\r\n    console.log('// Check localStorage user data:');\r\n    console.log('console.log(\"LocalStorage user:\", JSON.parse(localStorage.getItem(\"auth_user\") || \"null\"));');\r\n    console.log('');\r\n    console.log('// Check current AuthContext state (add this to AdminSettings.tsx temporarily):');\r\n    console.log('const { user, isSuperAdmin, hasRole } = useAuth();');\r\n    console.log('console.log(\"AuthContext user:\", user);');\r\n    console.log('console.log(\"AuthContext isSuperAdmin():\", isSuperAdmin());');\r\n    console.log('console.log(\"AuthContext hasRole():\", hasRole([\"admin\", \"super_admin\"]));');\r\n    console.log('');\r\n    \r\n    console.log('\\nüö® POTENTIAL ISSUES TO CHECK:');\r\n    console.log('A) LocalStorage has stale user data with wrong role');\r\n    console.log('B) Login response not properly updating AuthContext');\r\n    console.log('C) AuthContext user object missing or malformed');\r\n    console.log('D) JavaScript errors preventing permission checks');\r\n    \r\n    console.log('\\nüîÑ IF STILL GREYED OUT, TRY:');\r\n    console.log('1. Check browser console for JavaScript errors');\r\n    console.log('2. Clear localStorage completely:');\r\n    console.log('   localStorage.clear(); sessionStorage.clear();');\r\n    console.log('3. Hard refresh (Ctrl+F5)');\r\n    console.log('4. Login again');\r\n    console.log('5. Check if user object updates in AuthContext');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error:', error.message);\r\n  } finally {\r\n    if (connection) {\r\n      await connection.end();\r\n    }\r\n  }\r\n}\r\n\r\n// Run the check\r\ncheckFrontendAuthContext().catch(console.error); "
    },
    "complexity": {
      "totalLines": 87,
      "codeLines": 69,
      "commentLines": 4,
      "commentRatio": 0.0547945205479452,
      "averageLineLength": 46.89041095890411
    },
    "lastAnalyzed": "2025-07-28T07:20:00.071Z"
  },
  "contentHash": "8eb389e29110b4057648aeb5d08c607198364463c98dc4767129514ed642762d",
  "discoveredAt": "2025-07-28T07:20:00.071Z"
}