{
  "id": "470dbe90c847",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/setup/master-setup.js",
  "relativePath": "server/setup/master-setup.js",
  "name": "master-setup.js",
  "extension": ".js",
  "size": 8775,
  "modified": "2025-07-18T19:04:40.662Z",
  "created": "2025-07-18T19:11:06.084Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 283,
      "characters": 8713,
      "words": 848
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 10
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 11
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 12
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 95,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 96,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 97,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 98,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Orthodox Metrics - Master Setup Script\r\n * Replaces: phase1-master-runner.js, phase2-master-runner.js\r\n * Provides: Complete system setup in logical order\r\n */\r\n\r\nconst { spawn } = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs').promises;\r\nconst mysql = require('mysql2/promise');\r\n\r\n// ANSI color codes for enhanced output\r\nconst colors = {\r\n  reset: '\\x1b[0m',\r\n  bright: '\\x1b[1m',\r\n  red: '\\x1b[31m',\r\n  green: '\\x1b[32m',\r\n  yellow: '\\x1b[33m',\r\n  blue: '\\x1b[34m',\r\n  magenta: '\\x1b[35m',\r\n  cyan: '\\x1b[36m',\r\n};\r\n\r\nfunction colorLog(message, color = 'white') {\r\n  console.log(`${colors[color] || ''}${message}${colors.reset}`);\r\n}\r\n\r\nclass OrthodoxSetup {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      skipDatabase: false,\r\n      skipOcr: false,\r\n      skipChurch: false,\r\n      verbose: false,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  async runScript(scriptPath, scriptName, required = true) {\r\n    return new Promise((resolve, reject) => {\r\n      const absolutePath = path.resolve(scriptPath);\r\n      \r\n      colorLog(`\\nüöÄ Running: ${scriptName}`, 'cyan');\r\n      colorLog(`üìç Path: ${absolutePath}`, 'blue');\r\n      colorLog('‚ïê'.repeat(80), 'blue');\r\n      \r\n      const child = spawn('node', [absolutePath], {\r\n        stdio: 'inherit',\r\n        shell: true,\r\n        cwd: path.dirname(absolutePath)\r\n      });\r\n      \r\n      child.on('close', (code) => {\r\n        if (code === 0) {\r\n          colorLog(`\\n‚úÖ SUCCESS: ${scriptName} completed`, 'green');\r\n          resolve({ success: true, code });\r\n        } else {\r\n          const message = `‚ùå FAILED: ${scriptName} (exit code: ${code})`;\r\n          colorLog(`\\n${message}`, 'red');\r\n          \r\n          if (required) {\r\n            reject(new Error(message));\r\n          } else {\r\n            colorLog(`‚ö†Ô∏è  Continuing despite failure (non-critical)`, 'yellow');\r\n            resolve({ success: false, code });\r\n          }\r\n        }\r\n      });\r\n      \r\n      child.on('error', (error) => {\r\n        const message = `‚ùå ERROR: ${scriptName} - ${error.message}`;\r\n        colorLog(`\\n${message}`, 'red');\r\n        \r\n        if (required) {\r\n          reject(error);\r\n        } else {\r\n          resolve({ success: false, error });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  async checkPrerequisites() {\r\n    colorLog('\\nüîç Checking Prerequisites...', 'cyan');\r\n    \r\n    // Check Node.js version\r\n    const nodeVersion = process.version;\r\n    colorLog(`   Node.js: ${nodeVersion}`, 'green');\r\n    \r\n    // Check database connection\r\n    try {\r\n      const connection = await mysql.createConnection({\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'root',\r\n        password: process.env.[REDACTED],\r\n        port: process.env.[REDACTED] || 3306\r\n      });\r\n      await connection.end();\r\n      colorLog('   Database: Connection successful', 'green');\r\n    } catch (error) {\r\n      colorLog(`   Database: Connection failed - ${error.message}`, 'red');\r\n      throw new Error('Database connection required for setup');\r\n    }\r\n    \r\n    colorLog('‚úÖ Prerequisites check passed', 'green');\r\n  }\r\n\r\n  async setupDatabase() {\r\n    if (this.options.skipDatabase) {\r\n      colorLog('‚è≠Ô∏è  Skipping database setup', 'yellow');\r\n      return;\r\n    }\r\n\r\n    colorLog('\\nüìÇ Phase 1: Database Setup', 'magenta');\r\n    \r\n    const dbScripts = [\r\n      { path: '../database/create-schema.js', name: 'Create Database Schema', required: true },\r\n      { path: '../database/setup-ocr-tables.js', name: 'Setup OCR Tables', required: true },\r\n      { path: '../database/create-field-mappings.js', name: 'Create Field Mappings', required: false }\r\n    ];\r\n\r\n    for (const script of dbScripts) {\r\n      try {\r\n        await this.runScript(script.path, script.name, script.required);\r\n      } catch (error) {\r\n        if (script.required) throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  async setupOcrPipeline() {\r\n    if (this.options.skipOcr) {\r\n      colorLog('‚è≠Ô∏è  Skipping OCR pipeline setup', 'yellow');\r\n      return;\r\n    }\r\n\r\n    colorLog('\\nüîç Phase 2: OCR Pipeline Setup', 'magenta');\r\n    \r\n    const ocrScripts = [\r\n      { path: '../testing/test-google-vision.js', name: 'Test Google Vision API', required: true },\r\n      { path: '../database/setup-ocr-processing.js', name: 'Setup OCR Processing', required: true },\r\n      { path: '../testing/test-ocr-pipeline.js', name: 'Test OCR Pipeline', required: false }\r\n    ];\r\n\r\n    for (const script of ocrScripts) {\r\n      try {\r\n        await this.runScript(script.path, script.name, script.required);\r\n      } catch (error) {\r\n        if (script.required) throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  async setupChurchRegistration() {\r\n    if (this.options.skipChurch) {\r\n      colorLog('‚è≠Ô∏è  Skipping church registration setup', 'yellow');\r\n      return;\r\n    }\r\n\r\n    colorLog('\\n‚õ™ Phase 3: Church Registration Setup', 'magenta');\r\n    \r\n    const churchScripts = [\r\n      { path: '../setup/create-default-church.js', name: 'Create Default Church', required: false },\r\n      { path: '../setup/setup-kanban-boards.js', name: 'Setup Kanban Boards', required: false }\r\n    ];\r\n\r\n    for (const script of churchScripts) {\r\n      try {\r\n        await this.runScript(script.path, script.name, script.required);\r\n      } catch (error) {\r\n        if (script.required) throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  async runValidation() {\r\n    colorLog('\\n‚úÖ Phase 4: Validation', 'magenta');\r\n    \r\n    const validationScripts = [\r\n      { path: '../testing/health-check.js', name: 'System Health Check', required: true },\r\n      { path: '../testing/test-api-endpoints.js', name: 'Test API Endpoints', required: false }\r\n    ];\r\n\r\n    for (const script of validationScripts) {\r\n      try {\r\n        await this.runScript(script.path, script.name, script.required);\r\n      } catch (error) {\r\n        if (script.required) throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    const startTime = Date.now();\r\n    \r\n    colorLog('üèõÔ∏è  Orthodox Metrics - Master Setup', 'cyan');\r\n    colorLog('‚ïê'.repeat(80), 'blue');\r\n    colorLog('Setting up complete Orthodox church management system...', 'white');\r\n    \r\n    try {\r\n      await this.checkPrerequisites();\r\n      await this.setupDatabase();\r\n      await this.setupOcrPipeline();\r\n      await this.setupChurchRegistration();\r\n      await this.runValidation();\r\n      \r\n      const duration = ((Date.now() - startTime) / 1000).toFixed(1);\r\n      \r\n      colorLog('\\nüéâ SETUP COMPLETE!', 'green');\r\n      colorLog('‚ïê'.repeat(80), 'green');\r\n      colorLog(`‚è±Ô∏è  Total time: ${duration}s`, 'green');\r\n      colorLog('\\nüéØ Next Steps:', 'cyan');\r\n      colorLog('   1. Start the server: npm start', 'white');\r\n      colorLog('   2. Open browser: http://localhost:3000', 'white');\r\n      colorLog('   3. Login with default admin credentials', 'white');\r\n      colorLog('   4. Configure your church settings', 'white');\r\n      \r\n    } catch (error) {\r\n      colorLog(`\\nüí• SETUP FAILED: ${error.message}`, 'red');\r\n      colorLog('‚ïê'.repeat(80), 'red');\r\n      colorLog('\\nüîß Troubleshooting:', 'yellow');\r\n      colorLog('   1. Check database credentials in .env', 'white');\r\n      colorLog('   2. Ensure MySQL is running', 'white');\r\n      colorLog('   3. Verify Google Cloud credentials', 'white');\r\n      colorLog('   4. Check logs for detailed errors', 'white');\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n\r\n// CLI interface\r\nasync function main() {\r\n  const args = process.argv.slice(2);\r\n  const options = {};\r\n  \r\n  for (let i = 0; i < args.length; i++) {\r\n    switch (args[i]) {\r\n      case '--skip-database':\r\n        options.skipDatabase = true;\r\n        break;\r\n      case '--skip-ocr':\r\n        options.skipOcr = true;\r\n        break;\r\n      case '--skip-church':\r\n        options.skipChurch = true;\r\n        break;\r\n      case '--verbose':\r\n        options.verbose = true;\r\n        break;\r\n      case '--help':\r\n        console.log(`\r\nOrthodox Metrics Setup Script\r\n\r\nUsage: node master-setup.js [options]\r\n\r\nOptions:\r\n  --skip-database    Skip database setup\r\n  --skip-ocr         Skip OCR pipeline setup  \r\n  --skip-church      Skip church registration setup\r\n  --verbose          Enable verbose logging\r\n  --help             Show this help message\r\n\r\nExamples:\r\n  node master-setup.js                    # Full setup\r\n  node master-setup.js --skip-church      # Skip church setup\r\n  node master-setup.js --verbose          # Detailed logging\r\n        `);\r\n        process.exit(0);\r\n    }\r\n  }\r\n  \r\n  const setup = new OrthodoxSetup(options);\r\n  await setup.run();\r\n}\r\n\r\nif (require.main === module) {\r\n  main().catch(console.error);\r\n}\r\n\r\nmodule.exports = OrthodoxSetup;\r\n"
    },
    "complexity": {
      "totalLines": 283,
      "codeLines": 227,
      "commentLines": 10,
      "commentRatio": 0.04219409282700422,
      "averageLineLength": 34.962025316455694
    },
    "lastAnalyzed": "2025-07-28T07:20:01.135Z"
  },
  "contentHash": "7a3642e3f03a1905d75dadc7a795a2fad4b947346a016481c1c8eca1a58e2d85",
  "discoveredAt": "2025-07-28T07:20:01.135Z"
}