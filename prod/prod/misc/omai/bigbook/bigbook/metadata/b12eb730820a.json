{
  "id": "b12eb730820a",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/70f3a9c94f5c.json",
  "relativePath": "bigbook/metadata/70f3a9c94f5c.json",
  "name": "70f3a9c94f5c.json",
  "extension": ".json",
  "size": 12814,
  "modified": "2025-07-26T04:17:10.230Z",
  "created": "2025-07-26T04:17:10.230Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 50,
      "characters": 12814,
      "words": 1028
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 37,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"70f3a9c94f5c\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/front-end/src/services/userService.ts\",\n  \"relativePath\": \"front-end/src/services/userService.ts\",\n  \"name\": \"userService.ts\",\n  \"extension\": \".ts\",\n  \"size\": 10873,\n  \"modified\": \"2025-07-24T19:20:29.276Z\",\n  \"created\": \"2025-07-13T21:01:06.947Z\",\n  \"classification\": {\n    \"type\": \"Testing Scripts\",\n    \"category\": \"DevOps > Test\",\n    \"confidence\": 1\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 345,\n      \"characters\": 10873,\n      \"words\": 963\n    },\n    \"classification\": {\n      \"type\": \"Testing Scripts\",\n      \"category\": \"DevOps > Test\",\n      \"confidence\": 1\n    },\n    \"dependencies\": [],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 244,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// src/services/userService.ts\\r\\nexport interface User {\\r\\n    id: number;\\r\\n    email: string;\\r\\n    first_name: string;\\r\\n    last_name: string;\\r\\n    role: 'admin' | 'super_admin' | 'user' | 'priest' | 'deacon' | 'manager' | 'viewer';\\r\\n    church_id: number | null;\\r\\n    church_name?: string;\\r\\n    is_active: boolean;\\r\\n    phone?: string;\\r\\n    preferred_language?: string;\\r\\n    created_at: string;\\r\\n    updated_at: string;\\r\\n    last_login?: string;\\r\\n    email_verified?: boolean;\\r\\n    timezone?: string;\\r\\n}\\r\\n\\r\\nexport interface NewUser {\\r\\n    email: string;\\r\\n    first_name: string;\\r\\n    last_name: string;\\r\\n    role: string;\\r\\n    church_id: string | null;\\r\\n    phone?: string;\\r\\n    preferred_language?: string;\\r\\n    send_welcome_email?: boolean;\\r\\n}\\r\\n\\r\\nexport interface UpdateUser {\\r\\n    email: string;\\r\\n    first_name: string;\\r\\n    last_name: string;\\r\\n    role: string;\\r\\n    church_id: string | null;\\r\\n    preferred_language?: string;\\r\\n    is_active: boolean;\\r\\n}\\r\\n\\r\\nexport interface ResetPasswordData {\\r\\n    new_password: string;\\r\\n    confirm_password: string;\\r\\n    auto_generate?: boolean;\\r\\n}\\r\\n\\r\\nexport interface Church {\\r\\n    id: number;\\r\\n    name: string;\\r\\n    email: string;\\r\\n    phone?: string;\\r\\n    city?: string;\\r\\n    country?: string;\\r\\n    is_active: boolean;\\r\\n}\\r\\n\\r\\nexport interface ApiResponse<T = any> {\\r\\n    success: boolean;\\r\\n    message?: string;\\r\\n    data?: T;\\r\\n    tempPassword?: string;\\r\\n    newPassword?: string;\\r\\n    users?: User[];\\r\\n    churches?: Church[];\\r\\n}\\r\\n\\r\\nclass UserService {\\r\\n    private baseUrl = '/api/admin';\\r\\n\\r\\n    // Get all users\\r\\n    async getUsers(): Promise<ApiResponse<User[]>> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users`, {\\r\\n                credentials: 'include'\\r\\n            });\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(`HTTP error! status: ${response.status}`);\\r\\n            }\\r\\n\\r\\n            const data = await response.json();\\r\\n            return {\\r\\n                success: data.success,\\r\\n                users: data.users || [],\\r\\n                message: data.message\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error fetching users:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: 'Failed to fetch users',\\r\\n                users: []\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Create new user\\r\\n    async createUser(userData: NewUser): Promise<ApiResponse> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users`, {\\r\\n                method: 'POST',\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json',\\r\\n                },\\r\\n                credentials: 'include',\\r\\n                body: JSON.stringify({\\r\\n                    ...userData,\\r\\n                    church_id: userData.church_id || null\\r\\n                })\\r\\n            });\\r\\n\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(data.message || 'Failed to create user');\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                success: data.success,\\r\\n                message: data.message,\\r\\n                tempPassword: data.tempPassword\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error creating user:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: error instanceof Error ? error.message : 'Failed to create user'\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update user\\r\\n    async updateUser(userId: number, userData: UpdateUser): Promise<ApiResponse> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users/${userId}`, {\\r\\n                method: 'PUT',\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json',\\r\\n                },\\r\\n                credentials: 'include',\\r\\n                body: JSON.stringify({\\r\\n                    ...userData,\\r\\n                    church_id: userData.church_id || null\\r\\n                })\\r\\n            });\\r\\n\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(data.message || 'Failed to update user');\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                success: data.success,\\r\\n                message: data.message\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error updating user:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: error instanceof Error ? error.message : 'Failed to update user'\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Delete user\\r\\n    async deleteUser(userId: number): Promise<ApiResponse> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users/${userId}`, {\\r\\n                method: 'DELETE',\\r\\n                credentials: 'include'\\r\\n            });\\r\\n\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(data.message || 'Failed to delete user');\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                success: data.success,\\r\\n                message: data.message\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error deleting user:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: error instanceof Error ? error.message : 'Failed to delete user'\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Toggle user status\\r\\n    async toggleUserStatus(userId: number): Promise<ApiResponse> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users/${userId}/toggle-status`, {\\r\\n                method: 'PUT',\\r\\n                credentials: 'include'\\r\\n            });\\r\\n\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(data.message || 'Failed to update user status');\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                success: data.success,\\r\\n                message: data.message\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error toggling user status:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: error instanceof Error ? error.message : 'Failed to update user status'\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Reset user password\\r\\n    async resetPassword(userId: number, passwordData?: ResetPasswordData): Promise<ApiResponse> {\\r\\n        try {\\r\\n            const response = await fetch(`${this.baseUrl}/users/${userId}/reset-password`, {\\r\\n                method: 'PATCH',\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json',\\r\\n                },\\r\\n                credentials: 'include',\\r\\n                body: JSON.stringify(passwordData || {})\\r\\n            });\\r\\n\\r\\n            const data = await response.json();\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(data.message || 'Failed to reset password');\\r\\n            }\\r\\n\\r\\n            return {\\r\\n                success: data.success,\\r\\n                message: data.message,\\r\\n                newPassword: data.newPassword\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error resetting password:'[REDACTED]'Failed to reset password'\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Get all churches\\r\\n    async getChurches(): Promise<ApiResponse<Church[]>> {\\r\\n        try {\\r\\n            const response = await fetch('/api/churches', {\\r\\n                credentials: 'include'\\r\\n            });\\r\\n\\r\\n            if (!response.ok) {\\r\\n                throw new Error(`HTTP error! status: ${response.status}`);\\r\\n            }\\r\\n\\r\\n            const data = await response.json();\\r\\n            return {\\r\\n                success: data.success,\\r\\n                churches: data.data?.churches || [],\\r\\n                message: data.message\\r\\n            };\\r\\n        } catch (error) {\\r\\n            console.error('Error fetching churches:', error);\\r\\n            return {\\r\\n                success: false,\\r\\n                message: 'Failed to fetch churches',\\r\\n                churches: []\\r\\n            };\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Utility functions\\r\\n    formatLastLogin(lastLogin?: string): string {\\r\\n        if (!lastLogin) return 'Never';\\r\\n\\r\\n        const date = new Date(lastLogin);\\r\\n        const now = new Date();\\r\\n        const diffInMs = now.getTime() - date.getTime();\\r\\n        const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\\r\\n\\r\\n        if (diffInDays === 0) {\\r\\n            const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\\r\\n            if (diffInHours === 0) {\\r\\n                const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\\r\\n                return diffInMinutes <= 1 ? 'Just now' : `${diffInMinutes} minutes ago`;\\r\\n            }\\r\\n            return diffInHours === 1 ? '1 hour ago' : `${diffInHours} hours ago`;\\r\\n        } else if (diffInDays === 1) {\\r\\n            return 'Yesterday';\\r\\n        } else if (diffInDays < 7) {\\r\\n            return `${diffInDays} days ago`;\\r\\n        } else {\\r\\n            return date.toLocaleDateString();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getRoleBadgeColor(role: string): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' {\\r\\n        switch (role) {\\r\\n            case 'super_admin': return 'error';\\r\\n            case 'admin': return 'warning';\\r\\n            case 'priest': return 'primary';\\r\\n            case 'deacon': return 'info';\\r\\n            case 'manager': return 'secondary';\\r\\n            case 'user': return 'default';\\r\\n            case 'viewer': return 'default';\\r\\n            default: return 'default';\\r\\n        }\\r\\n    }\\r\\n\\r\\n    generateSecurePassword(): string {\\r\\n        const length = 16;\\r\\n        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\\r\\n        let password = '';\\r\\n\\r\\n        // Ensure at least one character from each category\\r\\n        const lowercase = 'abcdefghijklmnopqrstuvwxyz';\\r\\n        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\\r\\n        const numbers = '0123456789';\\r\\n        const symbols = '!@#$%^&*';\\r\\n\\r\\n        password += lowercase[Math.floor(Math.random() * lowercase.length)];\\r\\n        password += uppercase[Math.floor(Math.random() * uppercase.length)];\\r\\n        password += numbers[Math.floor(Math.random() * numbers.length)];\\r\\n        password += symbols[Math.floor(Math.random() * symbols.length)];\\r\\n\\r\\n        // Fill the rest randomly\\r\\n        for (let i = 4; i < length; i++) {\\r\\n            password += charset[Math.floor(Math.random() * charset.length)];\\r\\n        }\\r\\n\\r\\n        // Shuffle the password\\r\\n        return password.split('').sort(() => Math.random() - 0.5).join('');\\r\\n    }\\r\\n}\\r\\n\\r\\nexport const userService = new UserService();\\r\\nexport default userService;\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 345,\n      \"codeLines\": 290,\n      \"commentLines\": 12,\n      \"commentRatio\": 0.039735099337748346,\n      \"averageLineLength\": 34.72516556291391\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.230Z\"\n  },\n  \"contentHash\": \"8ee1a861269bbd15725cfccc3fcc029efc0e425eff80cd424fc68bc7292ee87d\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.230Z\"\n}"
    },
    "complexity": {
      "totalLines": 50,
      "codeLines": 50,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 255.3
    },
    "lastAnalyzed": "2025-07-28T07:19:57.086Z"
  },
  "contentHash": "c256a18d682fadb2cf26e6372234c00483dbfab3ae69deef0bb26cfb0d90401e",
  "discoveredAt": "2025-07-28T07:19:57.087Z"
}