{
  "id": "daeeb47ce716",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/dbSwitcher.js",
  "relativePath": "server/utils/dbSwitcher.js",
  "name": "dbSwitcher.js",
  "extension": ".js",
  "size": 1908,
  "modified": "2025-07-24T14:50:26.280Z",
  "created": "2025-07-24T14:50:26.280Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 64,
      "characters": 1908,
      "words": 197
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 9
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 6,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 22,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 23,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 24,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// utils/dbSwitcher.js\r\nconst mysql = require('mysql2/promise');\r\nconst path = require('path');\r\n\r\n// Load environment variables based on NODE_ENV\r\nconst envFile = process.env.[REDACTED] === 'production'\r\n  ? '../.env.production'\r\n  : '../.env.development';\r\nrequire('dotenv').config({ path: path.resolve(__dirname, envFile) });\r\n\r\nconst dbPool = {}; // cache for database connections\r\n\r\n/**\r\n * Get a MariaDB connection pool for a specific church database\r\n * @param {string} dbName - The name of the church database\r\n * @returns {Promise<mysql.Pool>} - The database connection pool\r\n */\r\nasync function getChurchDbConnection(dbName) {\r\n  if (!dbPool[dbName]) {\r\n    try {\r\n      dbPool[dbName] = mysql.createPool({\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'orthodoxapps',\r\n        password: process.env.[REDACTED] || 'Summerof1982@!',\r\n        database: dbName,\r\n        waitForConnections: true,\r\n        connectionLimit: 10,\r\n        queueLimit: 0\r\n      });\r\n      \r\n      // Test the connection\r\n      const connection = await dbPool[dbName].getConnection();\r\n      connection.release();\r\n      \r\n      console.log(`Successfully connected to church database: ${dbName}`);\r\n    } catch (error) {\r\n      console.error(`Failed to connect to church database ${dbName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  return dbPool[dbName];\r\n}\r\n\r\n/**\r\n * Close all database connections (useful for cleanup)\r\n */\r\nasync function closeAllConnections() {\r\n  for (const dbName in dbPool) {\r\n    try {\r\n      await dbPool[dbName].end();\r\n      console.log(`Closed connection to database: ${dbName}`);\r\n    } catch (error) {\r\n      console.error(`Error closing connection to ${dbName}:`, error);\r\n    }\r\n  }\r\n  // Clear the cache\r\n  Object.keys(dbPool).forEach(key => delete dbPool[key]);\r\n}\r\n\r\nmodule.exports = { \r\n  getChurchDbConnection,\r\n  closeAllConnections\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 64,
      "codeLines": 44,
      "commentLines": 12,
      "commentRatio": 0.21428571428571427,
      "averageLineLength": 32.607142857142854
    },
    "lastAnalyzed": "2025-07-28T07:20:01.243Z"
  },
  "contentHash": "cdc3c3e0dde30dd1b0c6816f7f90106d1bc906b1d55dc4965c91f6e4de1f3894",
  "discoveredAt": "2025-07-28T07:20:01.243Z"
}