{
  "id": "f4366dd8cff1",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/11d81ed0273c.json",
  "relativePath": "bigbook/metadata/11d81ed0273c.json",
  "name": "11d81ed0273c.json",
  "extension": ".json",
  "size": 7595,
  "modified": "2025-07-26T04:17:11.618Z",
  "created": "2025-07-26T04:17:11.618Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 7547,
      "words": 643
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"11d81ed0273c\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/fix-sessions-setup.js\",\n  \"relativePath\": \"server/scripts/fix-sessions-setup.js\",\n  \"name\": \"fix-sessions-setup.js\",\n  \"extension\": \".js\",\n  \"size\": 5756,\n  \"modified\": \"2025-07-20T18:21:22.343Z\",\n  \"created\": \"2025-07-20T18:14:00.531Z\",\n  \"classification\": {\n    \"type\": \"Troubleshooting Utilities\",\n    \"category\": \"Diagnostic Tools\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 169,\n      \"characters\": 5708,\n      \"words\": 525\n    },\n    \"classification\": {\n      \"type\": \"Troubleshooting Utilities\",\n      \"category\": \"Diagnostic Tools\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"bcrypt\",\n        \"line\": 11\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 66,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"#!/usr/bin/env node\\r\\n\\r\\n/**\\r\\n * Fix Sessions Management - Complete Setup Script\\r\\n * This script will:\\r\\n * 1. Check/create activity_log table\\r\\n * 2. Create a test user \\r\\n * 3. Verify the setup\\r\\n */\\r\\n\\r\\nconst bcrypt = require('bcrypt');\\r\\nconst DatabaseService = require('../services/databaseService');\\r\\n\\r\\nasync function fixSessionsSetup() {\\r\\n  try {\\r\\n    console.log('🚀 FIXING SESSIONS MANAGEMENT SETUP');\\r\\n    console.log('=' .repeat(50));\\r\\n    \\r\\n    // 1. Check and create activity_log table if needed\\r\\n    console.log('\\\\n📋 1. CHECKING ACTIVITY_LOG TABLE');\\r\\n    console.log('-'.repeat(30));\\r\\n    \\r\\n    try {\\r\\n      // Try to create table with IF NOT EXISTS - safer approach\\r\\n      const createTableQuery = `\\r\\n        CREATE TABLE IF NOT EXISTS activity_log (\\r\\n          id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n          user_id INT NULL,\\r\\n          church_id INT NULL,\\r\\n          action VARCHAR(50) NOT NULL,\\r\\n          ip_address VARCHAR(45) NULL,\\r\\n          user_agent TEXT NULL,\\r\\n          details JSON NULL,\\r\\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n          INDEX idx_user_id (user_id),\\r\\n          INDEX idx_church_id (church_id),\\r\\n          INDEX idx_action (action),\\r\\n          INDEX idx_created_at (created_at)\\r\\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\\r\\n      `;\\r\\n      \\r\\n      await DatabaseService.queryPlatform(createTableQuery);\\r\\n      console.log('✅ Activity_log table verified/created');\\r\\n      \\r\\n      // Check current record count\\r\\n      const logCount = await DatabaseService.queryPlatform('SELECT COUNT(*) as total FROM activity_log WHERE action = \\\"login\\\"');\\r\\n      console.log(`Current login entries: ${logCount[0]?.total || 0}`);\\r\\n      \\r\\n    } catch (error) {\\r\\n      console.log('⚠️  Error with activity_log table:', error.message);\\r\\n    }\\r\\n    \\r\\n    // 2. Check users and create test user if needed\\r\\n    console.log('\\\\n👥 2. CHECKING USERS');\\r\\n    console.log('-'.repeat(30));\\r\\n    \\r\\n    const usersCount = await DatabaseService.queryPlatform('SELECT COUNT(*) as total FROM users');\\r\\n    console.log(`Current users: ${usersCount[0]?.total || 0}`);\\r\\n    \\r\\n    if (usersCount[0]?.total === 0) {\\r\\n      console.log('⚠️  No users found. Creating test admin user...');\\r\\n      \\r\\n      // Create test user\\r\\n      const testUser = {\\r\\n        email: 'admin@orthodoxmetrics.com',\\r\\n        password: '[REDACTED]',\\r\\n        first_name: 'Test',\\r\\n        last_name: 'Admin',\\r\\n        role: 'super_admin',\\r\\n        preferred_language: 'en'\\r\\n      };\\r\\n      \\r\\n      const password_hash = await bcrypt.hash(testUser.password, 10);\\r\\n      \\r\\n      const [result] = await DatabaseService.queryPlatform(\\r\\n        `INSERT INTO users (email, password_hash, first_name, last_name, role, preferred_language, is_active, email_verified, created_at, updated_at) \\r\\n         VALUES (?, ?, ?, ?, ?, ?, 1, 1, NOW(), NOW())`,\\r\\n        [\\r\\n          testUser.email,\\r\\n          password_hash,\\r\\n          testUser.first_name,\\r\\n          testUser.last_name,\\r\\n          testUser.role,\\r\\n          testUser.preferred_language\\r\\n        ]\\r\\n      );\\r\\n      \\r\\n      console.log('✅ Test user created!');\\r\\n      console.log(`📧 Email: ${testUser.email}`);\\r\\n      console.log(`🔑 Password: ${testUser.password}`);\\r\\n      console.log(`🆔 User ID: ${result.insertId}`);\\r\\n      \\r\\n      // Create a sample login activity for testing\\r\\n      await DatabaseService.queryPlatform(\\r\\n        'INSERT INTO activity_log (user_id, action, ip_address, user_agent, details, created_at) VALUES (?, ?, ?, ?, ?, NOW())',\\r\\n        [\\r\\n          result.insertId,\\r\\n          'login',\\r\\n          '127.0.0.1',\\r\\n          'Setup Script Test Login',\\r\\n          JSON.stringify({ \\r\\n            email: testUser.email, \\r\\n            role: testUser.role,\\r\\n            note: 'Test login created by setup script'\\r\\n          })\\r\\n        ]\\r\\n      );\\r\\n      console.log('✅ Sample login activity created!');\\r\\n      \\r\\n    } else {\\r\\n      console.log('✅ Users already exist in database');\\r\\n    }\\r\\n    \\r\\n    // 3. Verify the setup\\r\\n    console.log('\\\\n🔧 3. VERIFYING SETUP');\\r\\n    console.log('-'.repeat(30));\\r\\n    \\r\\n    const testQuery = `\\r\\n      SELECT \\r\\n        al.user_id,\\r\\n        u.email,\\r\\n        u.first_name,\\r\\n        u.last_name,\\r\\n        u.role,\\r\\n        al.ip_address,\\r\\n        al.user_agent,\\r\\n        al.created_at as login_time\\r\\n      FROM activity_log al\\r\\n      JOIN users u ON al.user_id = u.id\\r\\n      WHERE al.action = 'login'\\r\\n      ORDER BY al.created_at DESC\\r\\n      LIMIT 3\\r\\n    `;\\r\\n    \\r\\n    const testResult = await DatabaseService.queryPlatform(testQuery);\\r\\n    console.log(`Sessions query returns: ${testResult.length} rows`);\\r\\n    \\r\\n    if (testResult.length > 0) {\\r\\n      console.log('Sample data:');\\r\\n      testResult.forEach((row, i) => {\\r\\n        console.log(`  ${i+1}. ${row.first_name} ${row.last_name} (${row.email})`);\\r\\n        console.log(`     IP: ${row.ip_address}, Time: ${row.login_time}`);\\r\\n      });\\r\\n    }\\r\\n    \\r\\n    console.log('\\\\n🎉 SETUP COMPLETE!');\\r\\n    console.log('✅ Activity_log table ready');\\r\\n    console.log('✅ Test user available'); \\r\\n    console.log('✅ Login route updated to log activities');\\r\\n    console.log('✅ Sessions management should now work');\\r\\n    console.log('\\\\n💡 Next steps:');\\r\\n    console.log('   1. Try logging in with admin@orthodoxmetrics.com / admin123');\\r\\n    console.log('   2. Check /admin/logs to see session data');\\r\\n    \\r\\n  } catch (error) {\\r\\n    console.error('❌ Setup failed:', error);\\r\\n    throw error;\\r\\n  }\\r\\n}\\r\\n\\r\\n// Run the setup\\r\\nfixSessionsSetup().then(() => {\\r\\n  console.log('\\\\n🏁 Setup script completed successfully');\\r\\n  process.exit(0);\\r\\n}).catch(error => {\\r\\n  console.error('💥 Setup script failed:', error);\\r\\n  process.exit(1);\\r\\n});\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 169,\n      \"codeLines\": 128,\n      \"commentLines\": 16,\n      \"commentRatio\": 0.1111111111111111,\n      \"averageLineLength\": 37.625\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.619Z\"\n  },\n  \"contentHash\": \"f0a344076b9fe73d8827218f7e3df272a244c58e6d01fe3effdf3424ef2c0252\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.619Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 133.78571428571428
    },
    "lastAnalyzed": "2025-07-28T07:19:56.660Z"
  },
  "contentHash": "6f5694fe6471e7135c9b4de0381f72d0852c01f66af53c0b37054709143b4fba",
  "discoveredAt": "2025-07-28T07:19:56.660Z"
}