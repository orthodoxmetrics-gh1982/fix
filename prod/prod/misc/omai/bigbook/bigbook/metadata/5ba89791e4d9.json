{
  "id": "5ba89791e4d9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/scripts/capture-task132-screenshots.js",
  "relativePath": "scripts/capture-task132-screenshots.js",
  "name": "capture-task132-screenshots.js",
  "extension": ".js",
  "size": 6602,
  "modified": "2025-07-28T05:43:07.602Z",
  "created": "2025-07-28T05:43:06.256Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 1
  },
  "metadata": {
    "fileStats": {
      "lines": 243,
      "characters": 6572,
      "words": 586
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 1
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "puppeteer",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 10
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 18,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 19,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Task 132 Blog System Screenshot Capture\r\n * Automated visual verification of the blog system using Puppeteer\r\n */\r\n\r\nconst puppeteer = require('puppeteer');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\n// Configuration\r\nconst BASE_URL = process.env.[REDACTED] || 'http://localhost:3000';\r\nconst OUTPUT_DIR = path.join(__dirname, '../screenshots');\r\n\r\n// Test credentials\r\nconst TEST_CREDENTIALS = {\r\n  username: process.env.[REDACTED] || 'admin',\r\n  password: process.env.[REDACTED] || 'admin123'\r\n};\r\n\r\n// Task 132 Screenshots to capture\r\nconst SCREENSHOT_TARGETS = [\r\n  {\r\n    name: 'task132-01',\r\n    path: '/admin/tools/page-editor',\r\n    description: 'PageEditor with Content Type Toggle'\r\n  },\r\n  {\r\n    name: 'task132-02',\r\n    path: '/admin/tools/page-editor?contentType=blog',\r\n    description: 'Blog Creation Interface'\r\n  },\r\n  {\r\n    name: 'task132-03',\r\n    path: '/admin/blog-admin',\r\n    description: 'Blog Admin Dashboard'\r\n  },\r\n  {\r\n    name: 'task132-04',\r\n    path: '/blog',\r\n    description: 'Public Blog Feed'\r\n  }\r\n];\r\n\r\nclass Task132ScreenshotCapture {\r\n  constructor() {\r\n    this.browser = null;\r\n    this.page = null;\r\n  }\r\n\r\n  async initialize() {\r\n    console.log('🚀 Initializing Task 132 Screenshot Capture...');\r\n    \r\n    // Ensure output directory exists\r\n    await fs.mkdir(OUTPUT_DIR, { recursive: true });\r\n    \r\n    // Launch browser\r\n    this.browser = await puppeteer.launch({\r\n      headless: 'new',\r\n      args: [\r\n        '--no-sandbox',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-dev-shm-usage',\r\n        '--disable-gpu'\r\n      ]\r\n    });\r\n    \r\n    this.page = await this.browser.newPage();\r\n    \r\n    // Set viewport for consistent screenshots\r\n    await this.page.setViewport({\r\n      width: 1920,\r\n      height: 1080,\r\n      deviceScaleFactor: 1\r\n    });\r\n    \r\n    console.log('✅ Browser initialized');\r\n  }\r\n\r\n  async login() {\r\n    console.log('🔐 Attempting login...');\r\n    \r\n    try {\r\n      await this.page.goto(`${BASE_URL}/auth/login`, { waitUntil: 'networkidle2' });\r\n      \r\n      // Wait for login form\r\n      await this.page.waitForSelector('input[name=\"username\"], input[type=\"email\"]', { timeout: 10000 });\r\n      \r\n      // Fill login form\r\n      await this.page.type('input[name=\"username\"], input[type=\"email\"]', TEST_CREDENTIALS.username);\r\n      await this.page.type('input[name=\"password\"], input[type=\"password\"]', TEST_CREDENTIALS.password);\r\n      \r\n      // Submit form\r\n      await this.page.click('button[type=\"submit\"], .login-button, .signin-button');\r\n      \r\n      // Wait for redirect after login\r\n      await this.page.waitForNavigation({ waitUntil: 'networkidle2' });\r\n      \r\n      console.log('✅ Login successful');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.log('⚠️ Login failed or not required:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async addUrlOverlay() {\r\n    // Add URL overlay to screenshot\r\n    const currentUrl = this.page.url();\r\n    \r\n    await this.page.evaluate((url) => {\r\n      // Create overlay element\r\n      const overlay = document.createElement('div');\r\n      overlay.style.cssText = `\r\n        position: fixed;\r\n        top: 10px;\r\n        right: 10px;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        padding: 8px 12px;\r\n        border-radius: 4px;\r\n        font-family: monospace;\r\n        font-size: 12px;\r\n        z-index: 9999;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n      `;\r\n      overlay.textContent = url;\r\n      document.body.appendChild(overlay);\r\n    }, currentUrl);\r\n    \r\n    // Wait a moment for overlay to render\r\n    await this.page.waitForTimeout(500);\r\n  }\r\n\r\n  async captureScreenshot(target) {\r\n    console.log(`📸 Capturing: ${target.name} - ${target.description}`);\r\n    \r\n    try {\r\n      // Navigate to target page\r\n      await this.page.goto(`${BASE_URL}${target.path}`, { \r\n        waitUntil: 'networkidle2',\r\n        timeout: 30000 \r\n      });\r\n      \r\n      // Wait for page to fully load\r\n      await this.page.waitForTimeout(3000);\r\n      \r\n      // Add URL overlay\r\n      await this.addUrlOverlay();\r\n      \r\n      // Capture screenshot\r\n      const screenshotPath = path.join(OUTPUT_DIR, `${target.name}.png`);\r\n      await this.page.screenshot({\r\n        path: screenshotPath,\r\n        fullPage: true,\r\n        type: 'png'\r\n      });\r\n      \r\n      console.log(`✅ Screenshot saved: ${screenshotPath}`);\r\n      \r\n      return {\r\n        success: true,\r\n        path: screenshotPath,\r\n        target: target.name,\r\n        description: target.description\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ Failed to capture ${target.name}:`, error.message);\r\n      return {\r\n        success: false,\r\n        target: target.name,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  async captureAllScreenshots() {\r\n    console.log(`📋 Capturing ${SCREENSHOT_TARGETS.length} screenshots for Task 132...`);\r\n    \r\n    const results = [];\r\n    \r\n    for (const target of SCREENSHOT_TARGETS) {\r\n      const result = await this.captureScreenshot(target);\r\n      results.push(result);\r\n      \r\n      // Brief pause between screenshots\r\n      await this.page.waitForTimeout(1000);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  async cleanup() {\r\n    if (this.browser) {\r\n      await this.browser.close();\r\n      console.log('🧹 Browser closed');\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    try {\r\n      await this.initialize();\r\n      \r\n      // Attempt login\r\n      await this.login();\r\n      \r\n      // Capture all screenshots\r\n      const results = await this.captureAllScreenshots();\r\n      \r\n      // Summary\r\n      const successful = results.filter(r => r.success).length;\r\n      console.log(`\\n🎉 Task 132 Screenshot capture complete!`);\r\n      console.log(`✅ Successful: ${successful}/${results.length}`);\r\n      console.log(`📁 Output directory: ${OUTPUT_DIR}`);\r\n      \r\n      return results;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Screenshot capture failed:', error);\r\n      throw error;\r\n    } finally {\r\n      await this.cleanup();\r\n    }\r\n  }\r\n}\r\n\r\n// CLI execution\r\nif (require.main === module) {\r\n  const capture = new Task132ScreenshotCapture();\r\n  \r\n  capture.run().then(results => {\r\n    const successful = results.filter(r => r.success).length;\r\n    process.exit(successful === results.length ? 0 : 1);\r\n  }).catch(error => {\r\n    console.error('Fatal error:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = Task132ScreenshotCapture; "
    },
    "complexity": {
      "totalLines": 243,
      "codeLines": 170,
      "commentLines": 27,
      "commentRatio": 0.13705583756345177,
      "averageLineLength": 31.096446700507613
    },
    "lastAnalyzed": "2025-07-28T07:19:59.077Z"
  },
  "contentHash": "b9f47e566ce56a77a3dc2732641dbd10ea9d0d0423485646fecbf5c40f81c89f",
  "discoveredAt": "2025-07-28T07:19:59.077Z"
}