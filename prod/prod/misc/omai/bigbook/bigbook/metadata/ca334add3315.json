{
  "id": "ca334add3315",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/middleware/userAuthorization.js",
  "relativePath": "server/middleware/userAuthorization.js",
  "name": "userAuthorization.js",
  "extension": ".js",
  "size": 6947,
  "modified": "2025-07-27T01:38:27.121Z",
  "created": "2025-07-13T21:13:28.035Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 213,
      "characters": 6925,
      "words": 715
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 5
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 7,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/middleware/userAuthorization.js - User Management Authorization\r\n// 🔄 Refactored to use unified role system (see utils/roles.js)\r\n\r\nconst { canManageUser: checkCanManageUser, getUserLevel } = require('../utils/roles');\r\n\r\n// Root super admin email - can be overridden via environment variable\r\nconst ROOT_SUPERADMIN_EMAIL = process.env.[REDACTED] || 'superadmin@orthodoxmetrics.com';\r\n\r\n/**\r\n * Check if current user is the root super admin\r\n */\r\nfunction isRootSuperAdmin(user) {\r\n    return user && user.email === ROOT_SUPERADMIN_EMAIL;\r\n}\r\n\r\n/**\r\n * Check if current user can manage the target user\r\n * @param {Object} currentUser - The user making the request\r\n * @param {Object} targetUser - The user being managed\r\n * @returns {boolean} - Whether the operation is allowed\r\n */\r\nfunction canManageUser(currentUser, targetUser) {\r\n    if (!currentUser || !targetUser) {\r\n        console.warn('canManageUser: Missing user parameters', { currentUser: !!currentUser, targetUser: !!targetUser });\r\n        return false;\r\n    }\r\n\r\n    const isRoot = isRootSuperAdmin(currentUser);\r\n    const isManagingSelf = currentUser.id === targetUser.id;\r\n    const isTargetRoot = isRootSuperAdmin(targetUser);\r\n\r\n    console.log('User management authorization check:', {\r\n        currentUserEmail: currentUser.email,\r\n        currentUserRole: currentUser.role,\r\n        targetUserEmail: targetUser.email,\r\n        targetUserRole: targetUser.role,\r\n        isRoot,\r\n        isManagingSelf,\r\n        isTargetRoot\r\n    });\r\n\r\n    // Root super admin can manage anyone (including other super_admins)\r\n    if (isRoot) {\r\n        console.log('✅ Root super admin can manage anyone');\r\n        return true;\r\n    }\r\n\r\n    // Nobody (except root) can manage the root super admin\r\n    if (isTargetRoot) {\r\n        console.warn('❌ Only root super admin can manage root account');\r\n        return false;\r\n    }\r\n\r\n    // Use unified role system for general user management\r\n    const canManage = checkCanManageUser(currentUser, targetUser);\r\n    \r\n    if (canManage) {\r\n        console.log('✅ User management authorized by unified role system');\r\n    } else {\r\n        console.warn('❌ User management denied by unified role system');\r\n    }\r\n    \r\n    return canManage;\r\n}\r\n\r\n/**\r\n * Check if current user can perform destructive operations (delete, disable)\r\n * @param {Object} currentUser - The user making the request\r\n * @param {Object} targetUser - The user being managed\r\n * @returns {boolean} - Whether destructive operations are allowed\r\n */\r\nfunction canPerformDestructiveOperation(currentUser, targetUser) {\r\n    console.log('🔍 canPerformDestructiveOperation called with:');\r\n    console.log('   currentUser:', currentUser);\r\n    console.log('   targetUser:', targetUser);\r\n    \r\n    if (!currentUser || !targetUser) {\r\n        console.log('❌ Missing user parameters');\r\n        return false;\r\n    }\r\n\r\n    const isRoot = isRootSuperAdmin(currentUser);\r\n    const isManagingSelf = currentUser.id === targetUser.id;\r\n    const isTargetRoot = isRootSuperAdmin(targetUser);\r\n\r\n    console.log('   isRoot:', isRoot);\r\n    console.log('   isManagingSelf:', isManagingSelf);\r\n    console.log('   isTargetRoot:', isTargetRoot);\r\n    console.log('   currentUser.email:', currentUser.email);\r\n    console.log('   ROOT_SUPERADMIN_EMAIL:', ROOT_SUPERADMIN_EMAIL);\r\n\r\n    // Root super admin can do anything\r\n    if (isRoot) {\r\n        console.log('✅ Root super admin can perform destructive operations');\r\n        return true;\r\n    }\r\n\r\n    // Cannot perform destructive operations on root super admin\r\n    if (isTargetRoot) {\r\n        return false;\r\n    }\r\n\r\n    // Cannot disable/delete yourself\r\n    if (isManagingSelf) {\r\n        return false;\r\n    }\r\n\r\n    // 🔄 Use unified role system for destructive operations\r\n    return checkCanManageUser(currentUser, targetUser);\r\n}\r\n\r\n/**\r\n * Check if current user can change roles\r\n * @param {Object} currentUser - The user making the request\r\n * @param {Object} targetUser - The user being managed\r\n * @param {string} newRole - The new role being assigned\r\n * @returns {boolean} - Whether role change is allowed\r\n */\r\nfunction canChangeRole(currentUser, targetUser, newRole) {\r\n    if (!currentUser || !targetUser || !newRole) {\r\n        return false;\r\n    }\r\n\r\n    const isRoot = isRootSuperAdmin(currentUser);\r\n    const isTargetRoot = isRootSuperAdmin(targetUser);\r\n\r\n    // Root super admin can change any role\r\n    if (isRoot) {\r\n        return true;\r\n    }\r\n\r\n    // Cannot change root super admin's role\r\n    if (isTargetRoot) {\r\n        return false;\r\n    }\r\n\r\n    // Cannot assign super_admin role unless you are root\r\n    if (newRole === 'super_admin' && !isRoot) {\r\n        return false;\r\n    }\r\n\r\n    // 🔄 Use unified role system for role change validation\r\n    const currentUserLevel = getUserLevel(currentUser);\r\n    const newRoleLevel = getUserLevel({ role: newRole });\r\n\r\n    // User must be able to manage the target user and have sufficient privileges for the new role\r\n    return checkCanManageUser(currentUser, targetUser) && currentUserLevel >= newRoleLevel;\r\n}\r\n\r\n/**\r\n * Middleware to check user management permissions\r\n */\r\nfunction requireUserManagementPermission(req, res, next) {\r\n    const currentUser = req.user;\r\n    const targetUserId = req.params.id || req.params.userId;\r\n\r\n    if (!currentUser) {\r\n        return res.status(401).json({\r\n            error: 'Authentication required',\r\n            code: 'NOT_AUTHENTICATED'\r\n        });\r\n    }\r\n\r\n    if (!targetUserId) {\r\n        return res.status(400).json({\r\n            error: 'Target user ID is required',\r\n            code: 'MISSING_TARGET_USER'\r\n        });\r\n    }\r\n\r\n    // Store target user ID for later use\r\n    req.targetUserId = targetUserId;\r\n    \r\n    next();\r\n}\r\n\r\n/**\r\n * Log unauthorized access attempts\r\n */\r\nfunction logUnauthorizedAttempt(currentUser, targetUser, operation) {\r\n    const logData = {\r\n        timestamp: new Date().toISOString(),\r\n        currentUser: {\r\n            id: currentUser?.id,\r\n            email: currentUser?.email,\r\n            role: currentUser?.role\r\n        },\r\n        targetUser: {\r\n            id: targetUser?.id,\r\n            email: targetUser?.email,\r\n            role: targetUser?.role\r\n        },\r\n        operation,\r\n        isRootAttempt: isRootSuperAdmin(targetUser),\r\n        severity: isRootSuperAdmin(targetUser) ? 'CRITICAL' : 'WARNING'\r\n    };\r\n\r\n    console.warn('🚨 UNAUTHORIZED USER MANAGEMENT ATTEMPT:', JSON.stringify(logData, null, 2));\r\n    \r\n    // In production, you might want to send this to a security monitoring system\r\n    // devLogger.warn('Unauthorized user management attempt', logData);\r\n}\r\n\r\nmodule.exports = {\r\n    ROOT_SUPERADMIN_EMAIL,\r\n    isRootSuperAdmin,\r\n    canManageUser,\r\n    canPerformDestructiveOperation,\r\n    canChangeRole,\r\n    requireUserManagementPermission,\r\n    logUnauthorizedAttempt\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 213,
      "codeLines": 131,
      "commentLines": 46,
      "commentRatio": 0.2598870056497175,
      "averageLineLength": 37.61581920903955
    },
    "lastAnalyzed": "2025-07-28T07:20:00.317Z"
  },
  "contentHash": "b51650fd45917077ee5c9c467fc49321cf8df58534eb8a8261842ec5863f27f2",
  "discoveredAt": "2025-07-28T07:20:00.317Z"
}