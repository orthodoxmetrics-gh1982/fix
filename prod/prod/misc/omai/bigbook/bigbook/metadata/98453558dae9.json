{
  "id": "98453558dae9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/MVP_CLIENT_CREATION_SYSTEM.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/MVP_CLIENT_CREATION_SYSTEM.md",
  "name": "MVP_CLIENT_CREATION_SYSTEM.md",
  "extension": ".md",
  "size": 13463,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:05.968Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 8
  },
  "metadata": {
    "fileStats": {
      "lines": 431,
      "characters": 13427,
      "words": 1391
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 8
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 47
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 109
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 110
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 111
      },
      {
        "type": "npm_package",
        "name": "express",
        "line": 286
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 287
      },
      {
        "type": "npm_package",
        "name": "express",
        "line": 372
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 120,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 155,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 156,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 296,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 297,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# MVP Client Creation System - Simplified Implementation\r\n\r\n## MVP Scope (Weeks 1-2)\r\n\r\nInstead of building the full enterprise system immediately, let's create a **Minimum Viable Product** that proves the concept and can be expanded.\r\n\r\n### **MVP Features:**\r\n- ✅ **Manual client database creation** (semi-automated)\r\n- ✅ **Basic template deployment**\r\n- ✅ **Simple subdomain routing**\r\n- ✅ **Client-specific branding**\r\n- ✅ **Basic user management**\r\n\r\n### **MVP Architecture:**\r\n\r\n```\r\nOrthodox Metrics (localhost:3001)\r\n├── /admin/clients          # Client management\r\n├── /client/ssppoc         # Client template\r\n├── /client/stmary         # Client A\r\n└── /client/holytrinity    # Client B\r\n```\r\n\r\n## Step 1: Add Client Context to Current System\r\n\r\n### **1.1 Modify Current index.js**\r\n\r\n```javascript\r\n// Add before existing routes\r\nconst clientMiddleware = require('./middleware/clientContext');\r\n\r\n// Client-aware routing\r\napp.use('/client/:clientSlug', clientMiddleware, (req, res, next) => {\r\n  // Serve client-specific content\r\n  req.clientSlug = req.params.clientSlug;\r\n  next();\r\n});\r\n\r\n// Client API routes\r\napp.use('/client/:clientSlug/api', clientMiddleware, require('./routes/clientApi'));\r\n```\r\n\r\n### **1.2 Client Context Middleware**\r\n\r\n```javascript\r\n// middleware/clientContext.js\r\nconst mysql = require('mysql2/promise');\r\n\r\nconst clientContext = async (req, res, next) => {\r\n  const clientSlug = req.params.clientSlug || req.headers['x-client-slug'];\r\n  \r\n  if (!clientSlug) {\r\n    return res.status(400).json({ error: 'Client not specified' });\r\n  }\r\n  \r\n  try {\r\n    // For MVP, use a simple clients table in existing database\r\n    const [clients] = await req.db.execute(\r\n      'SELECT * FROM clients WHERE slug = ? AND status = \"active\"',\r\n      [clientSlug]\r\n    );\r\n    \r\n    if (clients.length === 0) {\r\n      return res.status(404).json({ error: 'Client not found' });\r\n    }\r\n    \r\n    req.client = clients[0];\r\n    req.clientDatabase = `orthodox_${clientSlug}`;\r\n    \r\n    next();\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Client context error' });\r\n  }\r\n};\r\n\r\nmodule.exports = clientContext;\r\n```\r\n\r\n### **1.3 Add Clients Table to Current Database**\r\n\r\n```sql\r\n-- Add to existing orthodox database\r\nUSE orthodox;\r\n\r\nCREATE TABLE clients (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(255) NOT NULL,\r\n    slug VARCHAR(100) UNIQUE NOT NULL,\r\n    database_name VARCHAR(100) UNIQUE NOT NULL,\r\n    status ENUM('active', 'suspended', 'trial') DEFAULT 'trial',\r\n    contact_email VARCHAR(255) NOT NULL,\r\n    branding_config JSON,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Add sample clients\r\nINSERT INTO clients (name, slug, database_name, contact_email, branding_config) VALUES\r\n('Saints Peter & Paul Orthodox Church', 'ssppoc', 'orthodox_ssppoc', 'admin@ssppoc.org', '{\"primaryColor\": \"#1976d2\", \"secondaryColor\": \"#dc004e\"}'),\r\n('St. Mary Orthodox Church', 'stmary', 'orthodox_stmary', 'admin@stmary.org', '{\"primaryColor\": \"#d32f2f\", \"secondaryColor\": \"#1976d2\"}'),\r\n('Holy Trinity Cathedral', 'holytrinity', 'orthodox_holytrinity', 'admin@holytrinity.org', '{\"primaryColor\": \"#388e3c\", \"secondaryColor\": \"#d32f2f\"}');\r\n```\r\n\r\n## Step 2: Manual Database Creation Script\r\n\r\n### **2.1 Database Creation Script**\r\n\r\n```javascript\r\n// scripts/createClientDatabase.js\r\nconst mysql = require('mysql2/promise');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nasync function createClientDatabase(clientSlug, clientName, contactEmail) {\r\n    const databaseName = `orthodox_${clientSlug}`;\r\n    \r\n    // Connect as root to create database\r\n    const rootConnection = await mysql.createConnection({\r\n        host: 'localhost',\r\n        user: 'root',\r\n        password: process.env.[REDACTED]\r\n    });\r\n    \r\n    try {\r\n        console.log(`Creating database: ${databaseName}`);\r\n        \r\n        // Create database\r\n        await rootConnection.execute(`CREATE DATABASE IF NOT EXISTS ${databaseName}`);\r\n        \r\n        // Read template schema\r\n        const schemaPath = path.join(__dirname, 'clientDatabaseTemplate.sql');\r\n        const schemaSql = await fs.readFile(schemaPath, 'utf8');\r\n        \r\n        // Replace placeholders\r\n        const clientSql = schemaSql\r\n            .replace(/{DATABASE_NAME}/g, databaseName)\r\n            .replace(/{CLIENT_NAME}/g, clientName)\r\n            .replace(/{CONTACT_EMAIL}/g, contactEmail);\r\n        \r\n        // Execute schema\r\n        const statements = clientSql.split(';').filter(stmt => stmt.trim());\r\n        \r\n        await rootConnection.execute(`USE ${databaseName}`);\r\n        \r\n        for (const statement of statements) {\r\n            if (statement.trim()) {\r\n                await rootConnection.execute(statement);\r\n            }\r\n        }\r\n        \r\n        console.log(`✅ Database ${databaseName} created successfully`);\r\n        \r\n        // Update client status\r\n        const mainConnection = await mysql.createConnection({\r\n            host: 'localhost',\r\n            user: process.env.[REDACTED],\r\n            password: process.env.[REDACTED],\r\n            database: 'orthodox'\r\n        });\r\n        \r\n        await mainConnection.execute(\r\n            'UPDATE clients SET status = \"active\" WHERE slug = ?',\r\n            [clientSlug]\r\n        );\r\n        \r\n        await mainConnection.end();\r\n        \r\n    } catch (error) {\r\n        console.error('Error creating client database:', error);\r\n        throw error;\r\n    } finally {\r\n        await rootConnection.end();\r\n    }\r\n}\r\n\r\n// Usage: node createClientDatabase.js ssppoc \"Saints Peter & Paul Orthodox Church\" \"admin@ssppoc.org\"\r\nif (require.main === module) {\r\n    const [,, clientSlug, clientName, contactEmail] = process.argv;\r\n    \r\n    if (!clientSlug || !clientName || !contactEmail) {\r\n        console.log('Usage: node createClientDatabase.js <slug> <name> <email>');\r\n        process.exit(1);\r\n    }\r\n    \r\n    createClientDatabase(clientSlug, clientName, contactEmail)\r\n        .then(() => {\r\n            console.log('Client database creation completed');\r\n            process.exit(0);\r\n        })\r\n        .catch(error => {\r\n            console.error('Failed to create client database:', error);\r\n            process.exit(1);\r\n        });\r\n}\r\n\r\nmodule.exports = createClientDatabase;\r\n```\r\n\r\n### **2.2 Client Database Template**\r\n\r\n```sql\r\n-- scripts/clientDatabaseTemplate.sql\r\nUSE {DATABASE_NAME};\r\n\r\n-- Church information\r\nCREATE TABLE church_info (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(255) NOT NULL DEFAULT '{CLIENT_NAME}',\r\n    address TEXT,\r\n    phone VARCHAR(50),\r\n    email VARCHAR(255) DEFAULT '{CONTACT_EMAIL}',\r\n    website VARCHAR(255),\r\n    primary_color VARCHAR(7) DEFAULT '#1976d2',\r\n    secondary_color VARCHAR(7) DEFAULT '#dc004e',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Insert default church info\r\nINSERT INTO church_info (name, email) VALUES ('{CLIENT_NAME}', '{CONTACT_EMAIL}');\r\n\r\n-- Users table\r\nCREATE TABLE users (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    email VARCHAR(255) UNIQUE NOT NULL,\r\n    password_hash VARCHAR(255) NOT NULL,\r\n    first_name VARCHAR(100),\r\n    last_name VARCHAR(100),\r\n    role ENUM('admin', 'priest', 'deacon', 'secretary', 'viewer') DEFAULT 'viewer',\r\n    is_active BOOLEAN DEFAULT true,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Baptism records\r\nCREATE TABLE baptism_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(100) NOT NULL,\r\n    last_name VARCHAR(100) NOT NULL,\r\n    birth_date DATE,\r\n    reception_date DATE NOT NULL,\r\n    birthplace VARCHAR(150),\r\n    entry_type VARCHAR(50),\r\n    sponsors TEXT,\r\n    parents TEXT NOT NULL,\r\n    clergy VARCHAR(150) NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Marriage records  \r\nCREATE TABLE marriage_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    groom_first_name VARCHAR(100) NOT NULL,\r\n    groom_last_name VARCHAR(100) NOT NULL,\r\n    bride_first_name VARCHAR(100) NOT NULL,\r\n    bride_last_name VARCHAR(100) NOT NULL,\r\n    marriage_date DATE NOT NULL,\r\n    marriage_place VARCHAR(150),\r\n    witnesses TEXT,\r\n    clergy VARCHAR(150) NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Funeral records\r\nCREATE TABLE funeral_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(100) NOT NULL,\r\n    last_name VARCHAR(100) NOT NULL,\r\n    birth_date DATE,\r\n    death_date DATE NOT NULL,\r\n    funeral_date DATE,\r\n    burial_place VARCHAR(150),\r\n    clergy VARCHAR(150),\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Add sample data for testing\r\nINSERT INTO baptism_records (first_name, last_name, reception_date, parents, clergy) VALUES\r\n('John', 'Smith', '2024-01-15', 'Michael and Sarah Smith', 'Fr. Peter'),\r\n('Mary', 'Johnson', '2024-02-20', 'David and Anna Johnson', 'Fr. Paul');\r\n```\r\n\r\n## Step 3: Client-Aware Routing\r\n\r\n### **3.1 Client API Router**\r\n\r\n```javascript\r\n// routes/clientApi.js\r\nconst express = require('express');\r\nconst mysql = require('mysql2/promise');\r\n\r\nconst router = express.Router();\r\n\r\n// Middleware to connect to client database\r\nrouter.use(async (req, res, next) => {\r\n    try {\r\n        req.clientDb = await mysql.createConnection({\r\n            host: 'localhost',\r\n            user: process.env.[REDACTED],\r\n            password: process.env.[REDACTED],\r\n            database: req.clientDatabase\r\n        });\r\n        next();\r\n    } catch (error) {\r\n        res.status(500).json({ error: 'Client database connection failed' });\r\n    }\r\n});\r\n\r\n// Client-specific baptism records\r\nrouter.get('/baptism-records', async (req, res) => {\r\n    try {\r\n        const [records] = await req.clientDb.execute(\r\n            'SELECT * FROM baptism_records ORDER BY reception_date DESC'\r\n        );\r\n        res.json({ records });\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\n// Client church info\r\nrouter.get('/church-info', async (req, res) => {\r\n    try {\r\n        const [info] = await req.clientDb.execute('SELECT * FROM church_info LIMIT 1');\r\n        res.json(info[0] || {});\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\n// Clean up database connection\r\nrouter.use(async (req, res, next) => {\r\n    if (req.clientDb) {\r\n        await req.clientDb.end();\r\n    }\r\n    next();\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n## Step 4: Quick MVP Test\r\n\r\n### **4.1 Create Test Clients**\r\n\r\n```bash\r\n# Create client databases\r\nnode scripts/createClientDatabase.js ssppoc \"Saints Peter & Paul Orthodox Church\" \"admin@ssppoc.org\"\r\nnode scripts/createClientDatabase.js stmary \"St. Mary Orthodox Church\" \"admin@stmary.org\"\r\nnode scripts/createClientDatabase.js holytrinity \"Holy Trinity Cathedral\" \"admin@holytrinity.org\"\r\n```\r\n\r\n### **4.2 Test Client Access**\r\n\r\n```bash\r\n# Test client-specific APIs\r\ncurl http://localhost:3001/client/ssppoc/api/baptism-records\r\ncurl http://localhost:3001/client/stmary/api/baptism-records\r\ncurl http://localhost:3001/client/holytrinity/api/church-info\r\n```\r\n\r\n## Step 5: Simple Client Management UI\r\n\r\n### **5.1 Client Management Route**\r\n\r\n```javascript\r\n// Add to index.js\r\napp.use('/admin/clients', require('./routes/clientManagement'));\r\n```\r\n\r\n### **5.2 Client Management Interface**\r\n\r\n```javascript\r\n// routes/clientManagement.js\r\nconst express = require('express');\r\nconst createClientDatabase = require('../scripts/createClientDatabase');\r\n\r\nconst router = express.Router();\r\n\r\n// List clients\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const [clients] = await req.db.execute('SELECT * FROM clients ORDER BY created_at DESC');\r\n        res.json(clients);\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\n// Create new client (manual process)\r\nrouter.post('/', async (req, res) => {\r\n    const { name, slug, contactEmail } = req.body;\r\n    \r\n    try {\r\n        // Insert client record\r\n        await req.db.execute(\r\n            'INSERT INTO clients (name, slug, database_name, contact_email) VALUES (?, ?, ?, ?)',\r\n            [name, slug, `orthodox_${slug}`, contactEmail]\r\n        );\r\n        \r\n        // Create database (this could be async)\r\n        await createClientDatabase(slug, name, contactEmail);\r\n        \r\n        res.json({ success: true, message: 'Client created successfully' });\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n## MVP Implementation Checklist\r\n\r\n### **Week 1: Core Setup**\r\n- [ ] Add clients table to existing database\r\n- [ ] Create client context middleware\r\n- [ ] Build client database creation script\r\n- [ ] Test manual client creation\r\n\r\n### **Week 2: Basic UI**\r\n- [ ] Add client-aware routing\r\n- [ ] Create client API endpoints\r\n- [ ] Build simple client management interface\r\n- [ ] Test with 2-3 sample clients\r\n\r\n### **Success Criteria:**\r\n- [ ] Can create new client with separate database\r\n- [ ] Client-specific data isolation works\r\n- [ ] Basic church records management per client\r\n- [ ] Simple admin interface for client management\r\n\r\nThis MVP approach lets you **start small** and **prove the concept** while building the foundation for the full enterprise system. Each client gets their own database, but the deployment is manual/semi-automated rather than fully automated.\r\n"
    },
    "complexity": {
      "totalLines": 431,
      "codeLines": 296,
      "commentLines": 50,
      "commentRatio": 0.14450867052023122,
      "averageLineLength": 36.91618497109827
    },
    "lastAnalyzed": "2025-07-28T07:19:58.187Z"
  },
  "contentHash": "5e617c32e37195f17445660f6a9a0ccb7481cefb5c67dac6660e1eac7df0a48e",
  "discoveredAt": "2025-07-28T07:19:58.187Z"
}