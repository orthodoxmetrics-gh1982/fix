{
  "id": "072e21969d2e",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/uploadToken.js",
  "relativePath": "server/routes/uploadToken.js",
  "name": "uploadToken.js",
  "extension": ".js",
  "size": 3867,
  "modified": "2025-07-07T23:16:28.000Z",
  "created": "2025-07-09T00:48:38.482Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 127,
      "characters": 3867,
      "words": 327
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "jsonwebtoken",
        "line": 3
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 29,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 68,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/routes/uploadToken.js\r\nconst express = require('express');\r\nconst jwt = require('jsonwebtoken');\r\nconst { requireAuth } = require('../middleware/auth');\r\n\r\nconst router = express.Router();\r\n\r\n// Generate secure upload link (requires admin authentication)\r\nrouter.post('/upload-link', requireAuth, (req, res) => {\r\n    try {\r\n        const { church_id, language = 'en', record_type = 'baptism', expires_in = '24h' } = req.body;\r\n\r\n        if (!church_id) {\r\n            return res.status(400).json({\r\n                success: false,\r\n                message: 'Church ID is required'\r\n            });\r\n        }\r\n\r\n        // Create JWT token with upload permissions\r\n        const token = jwt.sign(\r\n            {\r\n                church_id,\r\n                language,\r\n                record_type,\r\n                created_by: req.session.user.id,\r\n                created_at: new Date().toISOString()\r\n            },\r\n            process.env.[REDACTED] || 'default-secret-change-in-production',\r\n            { expiresIn: expires_in }\r\n        );\r\n\r\n        const publicLink = `${req.protocol}://${req.get('host')}/public-upload/${token}`;\r\n\r\n        console.log(`Generated upload link for church ${church_id}:`, publicLink);\r\n\r\n        res.json({\r\n            success: true,\r\n            url: publicLink,\r\n            token,\r\n            expires_in,\r\n            church_id,\r\n            language,\r\n            record_type\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Error generating upload link:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            message: 'Failed to generate upload link'\r\n        });\r\n    }\r\n});\r\n\r\n// Verify upload token\r\nrouter.get('/verify-upload-token/:token', (req, res) => {\r\n    try {\r\n        const { token } = req.params;\r\n\r\n        if (!token) {\r\n            return res.status(400).json({\r\n                success: false,\r\n                message: 'Token is required'\r\n            });\r\n        }\r\n\r\n        const payload = jwt.verify(token, process.env.[REDACTED] || 'default-secret-change-in-production');\r\n\r\n        console.log('Token verified successfully:', payload);\r\n\r\n        res.json({\r\n            success: true,\r\n            payload: {\r\n                church_id: payload.church_id,\r\n                language: payload.language,\r\n                record_type: payload.record_type,\r\n                created_by: payload.created_by,\r\n                created_at: payload.created_at\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Token verification failed:', error);\r\n\r\n        if (error.name === 'TokenExpiredError') {\r\n            return res.status(401).json({\r\n                success: false,\r\n                message: 'Upload link has expired'\r\n            });\r\n        }\r\n\r\n        if (error.name === 'JsonWebTokenError') {\r\n            return res.status(401).json({\r\n                success: false,\r\n                message: 'Invalid upload link'\r\n            });\r\n        }\r\n\r\n        res.status(500).json({\r\n            success: false,\r\n            message: 'Failed to verify upload link'\r\n        });\r\n    }\r\n});\r\n\r\n// List active upload links (admin only)\r\nrouter.get('/upload-links', requireAuth, async (req, res) => {\r\n    try {\r\n        // This would ideally query a database table to track active links\r\n        // For now, return a simple response\r\n        res.json({\r\n            success: true,\r\n            message: 'Upload links are generated dynamically and tracked via JWT tokens',\r\n            info: 'Check server logs for generated links'\r\n        });\r\n    } catch (error) {\r\n        console.error('Error listing upload links:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            message: 'Failed to list upload links'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 127,
      "codeLines": 100,
      "commentLines": 7,
      "commentRatio": 0.06542056074766354,
      "averageLineLength": 34.78504672897196
    },
    "lastAnalyzed": "2025-07-28T07:20:00.572Z"
  },
  "contentHash": "36199280e7f09b318b102c5bb04ae7237625d81f5335843672bed6dcc979fa50",
  "discoveredAt": "2025-07-28T07:20:00.572Z"
}