{
  "id": "d3b03e1f93c3",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/588a2877f310.json",
  "relativePath": "bigbook/metadata/588a2877f310.json",
  "name": "588a2877f310.json",
  "extension": ".json",
  "size": 14164,
  "modified": "2025-07-26T04:17:10.958Z",
  "created": "2025-07-26T04:17:10.958Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 78,
      "characters": 14074,
      "words": 999
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 65
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 65
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 65
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 65,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 65,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 65,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"588a2877f310\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase0-fix-issues.js\",\n  \"relativePath\": \"server/legacy/phase0-fix-issues.js\",\n  \"name\": \"phase0-fix-issues.js\",\n  \"extension\": \".js\",\n  \"size\": 11457,\n  \"modified\": \"2025-07-24T14:51:40.484Z\",\n  \"created\": \"2025-07-24T14:51:40.484Z\",\n  \"classification\": {\n    \"type\": \"Troubleshooting Utilities\",\n    \"category\": \"Diagnostic Tools\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 321,\n      \"characters\": 11367,\n      \"words\": 862\n    },\n    \"classification\": {\n      \"type\": \"Troubleshooting Utilities\",\n      \"category\": \"Diagnostic Tools\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 10\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"fs\",\n        \"line\": 11\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"path\",\n        \"line\": 12\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 34,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 35,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 37,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"#!/usr/bin/env node\\r\\n\\r\\n/**\\r\\n * Phase 0 Issue Resolution Script\\r\\n * Fixes database connection and schema issues found during testing\\r\\n * \\r\\n * Run with: node phase0-fix-issues.js\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\nconst fs = require('fs').promises;\\r\\nconst path = require('path');\\r\\n\\r\\nconsole.log('üîß Phase 0: Fixing OCR System Issues');\\r\\nconsole.log('‚ïê'.repeat(50));\\r\\n\\r\\nclass Phase0Fixer {\\r\\n    constructor() {\\r\\n        this.issues = [];\\r\\n        this.fixes = [];\\r\\n    }\\r\\n\\r\\n    async testDatabaseConnections() {\\r\\n        console.log('\\\\n1Ô∏è‚É£ Testing Database Connections...');\\r\\n        \\r\\n        const databases = [\\r\\n            'saints_peter_and_paul_orthodox_church_db',\\r\\n            'ssppoc_records_db', \\r\\n            'orthodoxmetrics_db'\\r\\n        ];\\r\\n\\r\\n        // Try different auth methods\\r\\n        const authMethods = [\\r\\n            { user: 'orthodoxapps', password: '[REDACTED]' },\\r\\n            { user: 'root', password: '[REDACTED]' },\\r\\n            { user: 'root', password: '' },\\r\\n            { user: 'orthodox', password: '[REDACTED]' }\\r\\n        ];\\r\\n\\r\\n        for (const auth of authMethods) {\\r\\n            console.log(`\\\\nüîê Testing auth: ${auth.user}`);\\r\\n            \\r\\n            try {\\r\\n                // Test connection without specific database first\\r\\n                const connection = await mysql.createConnection({\\r\\n                    host: 'localhost',\\r\\n                    user: auth.user,\\r\\n                    password: auth.password,\\r\\n                    port: 3306\\r\\n                });\\r\\n\\r\\n                console.log(`‚úÖ Connection successful with ${auth.user}`);\\r\\n                \\r\\n                // Test each database\\r\\n                for (const dbName of databases) {\\r\\n                    try {\\r\\n                        await connection.query(`USE \\\\`${dbName}\\\\``);\\r\\n                        console.log(`‚úÖ Database ${dbName} accessible`);\\r\\n                    } catch (dbError) {\\r\\n                        console.log(`‚ùå Database ${dbName}: ${dbError.message}`);\\r\\n                        if (dbError.message.includes('Unknown database')) {\\r\\n                            this.issues.push(`Database ${dbName} does not exist`);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                await connection.end();\\r\\n                \\r\\n                // Store working credentials\\r\\n                this.workingAuth = auth;\\r\\n                break;\\r\\n                \\r\\n            } catch (error) {\\r\\n                console.log(`‚ùå Auth failed for ${auth.user}: ${error.message}`);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (!this.workingAuth) {\\r\\n            console.log('\\\\nüö® No working database authentication found!');\\r\\n            this.suggestDatabaseSetup();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async fixOcrTableSchema() {\\r\\n        console.log('\\\\n2Ô∏è‚É£ Fixing OCR Table Schema Issues...');\\r\\n        \\r\\n        if (!this.workingAuth) {\\r\\n            console.log('‚ùå Cannot fix schema - no database connection');\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        try {\\r\\n            const connection = await mysql.createConnection({\\r\\n                host: 'localhost',\\r\\n                user: this.workingAuth.user,\\r\\n                password: this.workingAuth.password,\\r\\n                database: 'saints_peter_and_paul_orthodox_church_db'\\r\\n            });\\r\\n\\r\\n            // Check current OCR settings table structure\\r\\n            console.log('üìã Checking OCR settings table structure...');\\r\\n            const [columns] = await connection.query(`\\r\\n                SELECT COLUMN_NAME \\r\\n                FROM INFORMATION_SCHEMA.COLUMNS \\r\\n                WHERE TABLE_SCHEMA = 'saints_peter_and_paul_orthodox_church_db' \\r\\n                AND TABLE_NAME = 'ocr_settings'\\r\\n            `);\\r\\n\\r\\n            const existingColumns = columns.map(col => col.COLUMN_NAME);\\r\\n            console.log(`Current columns: ${existingColumns.join(', ')}`);\\r\\n\\r\\n            // Add missing columns if needed\\r\\n            const requiredColumns = [\\r\\n                'auto_process',\\r\\n                'notification_email',\\r\\n                'ocr_engine'\\r\\n            ];\\r\\n\\r\\n            for (const column of requiredColumns) {\\r\\n                if (!existingColumns.includes(column)) {\\r\\n                    console.log(`‚ûï Adding missing column: ${column}`);\\r\\n                    \\r\\n                    let alterSQL = '';\\r\\n                    switch (column) {\\r\\n                        case 'auto_process':\\r\\n                            alterSQL = 'ALTER TABLE ocr_settings ADD COLUMN auto_process BOOLEAN DEFAULT TRUE';\\r\\n                            break;\\r\\n                        case 'notification_email':\\r\\n                            alterSQL = 'ALTER TABLE ocr_settings ADD COLUMN notification_email VARCHAR(255) NULL';\\r\\n                            break;\\r\\n                        case 'ocr_engine':\\r\\n                            alterSQL = \\\"ALTER TABLE ocr_settings ADD COLUMN ocr_engine ENUM('google_vision','tesseract','hybrid') DEFAULT 'google_vision'\\\";\\r\\n                            break;\\r\\n                    }\\r\\n                    \\r\\n                    if (alterSQL) {\\r\\n                        await connection.query(alterSQL);\\r\\n                        console.log(`‚úÖ Added column: ${column}`);\\r\\n                        this.fixes.push(`Added ${column} column to ocr_settings`);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            await connection.end();\\r\\n            \\r\\n        } catch (error) {\\r\\n            console.log(`‚ùå Schema fix error: ${error.message}`);\\r\\n            this.issues.push(`OCR schema issue: ${error.message}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async createMissingDatabases() {\\r\\n        console.log('\\\\n3Ô∏è‚É£ Creating Missing Databases...');\\r\\n        \\r\\n        if (!this.workingAuth) {\\r\\n            console.log('‚ùå Cannot create databases - no connection');\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        const databases = [\\r\\n            'saints_peter_and_paul_orthodox_church_db',\\r\\n            'ssppoc_records_db',\\r\\n            'orthodoxmetrics_db'\\r\\n        ];\\r\\n\\r\\n        try {\\r\\n            const connection = await mysql.createConnection({\\r\\n                host: 'localhost',\\r\\n                user: this.workingAuth.user,\\r\\n                password: this.workingAuth.password\\r\\n            });\\r\\n\\r\\n            for (const dbName of databases) {\\r\\n                try {\\r\\n                    await connection.query(`CREATE DATABASE IF NOT EXISTS \\\\`${dbName}\\\\``);\\r\\n                    console.log(`‚úÖ Database ${dbName} exists or created`);\\r\\n                    this.fixes.push(`Ensured database ${dbName} exists`);\\r\\n                } catch (error) {\\r\\n                    console.log(`‚ùå Could not create ${dbName}: ${error.message}`);\\r\\n                    this.issues.push(`Cannot create database ${dbName}`);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            await connection.end();\\r\\n            \\r\\n        } catch (error) {\\r\\n            console.log(`‚ùå Database creation error: ${error.message}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async updateConfigFiles() {\\r\\n        console.log('\\\\n4Ô∏è‚É£ Updating Configuration Files...');\\r\\n        \\r\\n        if (!this.workingAuth) {\\r\\n            console.log('‚ùå No working auth to update configs');\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        try {\\r\\n            // Update server/config/db.js if it exists\\r\\n            const dbConfigPath = path.join(__dirname, '../config/db.js');\\r\\n            \\r\\n            if (await this.fileExists(dbConfigPath)) {\\r\\n                console.log('üìù Found db.js config file');\\r\\n                // You might want to update this file with working credentials\\r\\n                this.fixes.push('Database config file located');\\r\\n            }\\r\\n\\r\\n            // Create/update .env file\\r\\n            const envPath = path.join(__dirname, '../.env');\\r\\n            const envContent = `\\r\\n# Database Configuration (Updated by Phase 0 fixer)\\r\\nDB_HOST=localhost\\r\\nDB_USER=${this.workingAuth.user}\\r\\nDB_PASSWORD=${this.workingAuth.password}\\r\\nDB_PORT=3306\\r\\n\\r\\n# OCR Database\\r\\nOCR_DATABASE=saints_peter_and_paul_orthodox_church_db\\r\\n\\r\\n# Records Database  \\r\\nRECORDS_DATABASE=ssppoc_records_db\\r\\n\\r\\n# Main Framework Database\\r\\nMAIN_DATABASE=orthodoxmetrics_db\\r\\n\\r\\n# Google Vision API\\r\\nGOOGLE_APPLICATION_CREDENTIALS=./credentials/orthodox-vision-api.json\\r\\n`;\\r\\n\\r\\n            await fs.writeFile(envPath, envContent);\\r\\n            console.log('‚úÖ Updated .env file with working credentials');\\r\\n            this.fixes.push('Updated .env file');\\r\\n            \\r\\n        } catch (error) {\\r\\n            console.log(`‚ùå Config update error: ${error.message}`);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    async fileExists(filePath) {\\r\\n        try {\\r\\n            await fs.access(filePath);\\r\\n            return true;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    suggestDatabaseSetup() {\\r\\n        console.log('\\\\nüí° Database Setup Suggestions:');\\r\\n        console.log('‚îÄ'.repeat(40));\\r\\n        console.log('1. Connect to MySQL as root:');\\r\\n        console.log('   mysql -u root -p');\\r\\n        console.log('\\\\n2. Create user and databases:');\\r\\n        console.log(`   CREATE USER IF NOT EXISTS 'orthodoxapps'@'localhost' IDENTIFIED BY 'Summerof1982@!';`);\\r\\n        console.log(`   CREATE DATABASE IF NOT EXISTS saints_peter_and_paul_orthodox_church_db;`);\\r\\n        console.log(`   CREATE DATABASE IF NOT EXISTS ssppoc_records_db;`);\\r\\n        console.log(`   CREATE DATABASE IF NOT EXISTS orthodoxmetrics_db;`);\\r\\n        console.log(`   GRANT ALL PRIVILEGES ON *.* TO 'orthodoxapps'@'localhost';`);\\r\\n        console.log(`   FLUSH PRIVILEGES;`);\\r\\n    }\\r\\n\\r\\n    async runAllFixes() {\\r\\n        console.log('Starting Phase 0 issue resolution...\\\\n');\\r\\n        \\r\\n        await this.testDatabaseConnections();\\r\\n        await this.createMissingDatabases();\\r\\n        await this.fixOcrTableSchema();\\r\\n        await this.updateConfigFiles();\\r\\n        \\r\\n        this.printSummary();\\r\\n    }\\r\\n\\r\\n    printSummary() {\\r\\n        console.log('\\\\n' + '‚ïê'.repeat(50));\\r\\n        console.log('üèÅ PHASE 0 ISSUE RESOLUTION SUMMARY');\\r\\n        console.log('‚ïê'.repeat(50));\\r\\n        \\r\\n        if (this.fixes.length > 0) {\\r\\n            console.log('\\\\n‚úÖ Issues Fixed:');\\r\\n            this.fixes.forEach(fix => console.log(`   ‚Ä¢ ${fix}`));\\r\\n        }\\r\\n        \\r\\n        if (this.issues.length > 0) {\\r\\n            console.log('\\\\n‚ùå Remaining Issues:');\\r\\n            this.issues.forEach(issue => console.log(`   ‚Ä¢ ${issue}`));\\r\\n        }\\r\\n        \\r\\n        if (this.workingAuth) {\\r\\n            console.log('\\\\nüéâ Phase 0 fixes completed!');\\r\\n            console.log(`‚úÖ Working database connection: ${this.workingAuth.user}`);\\r\\n            console.log('\\\\nüìã Next Steps:');\\r\\n            console.log('1. Run: node scripts/phase0-ocr-system-test.js');\\r\\n            console.log('2. Verify all tests pass');\\r\\n            console.log('3. Proceed to Phase 1');\\r\\n        } else {\\r\\n            console.log('\\\\nüö® Critical Issues Remain');\\r\\n            console.log('‚ùå No working database connection found');\\r\\n            console.log('üîß Follow database setup suggestions above');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Run the fixer\\r\\nasync function main() {\\r\\n    const fixer = new Phase0Fixer();\\r\\n    \\r\\n    try {\\r\\n        await fixer.runAllFixes();\\r\\n    } catch (error) {\\r\\n        console.error('\\\\nüí• Phase 0 fixer crashed:', error);\\r\\n        process.exit(1);\\r\\n    }\\r\\n}\\r\\n\\r\\nif (require.main === module) {\\r\\n    main();\\r\\n}\\r\\n\\r\\nmodule.exports = { Phase0Fixer };\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 321,\n      \"codeLines\": 241,\n      \"commentLines\": 22,\n      \"commentRatio\": 0.08365019011406843,\n      \"averageLineLength\": 40.844106463878326\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.961Z\"\n  },\n  \"contentHash\": \"59919298b651133d2437a21cb102a165ee948fb88eff5587dc4173f6368f2bdd\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.961Z\"\n}"
    },
    "complexity": {
      "totalLines": 78,
      "codeLines": 78,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 179.44871794871796
    },
    "lastAnalyzed": "2025-07-28T07:19:56.984Z"
  },
  "contentHash": "c4d50770376db1b9b38cf7da4bb3fb84b168a92d340eaf4ba201a5aedf9b0502",
  "discoveredAt": "2025-07-28T07:19:56.984Z"
}