{
  "id": "30c711f75c47",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/e78346504dd8.json",
  "relativePath": "bigbook/metadata/e78346504dd8.json",
  "name": "e78346504dd8.json",
  "extension": ".json",
  "size": 11489,
  "modified": "2025-07-26T04:17:10.958Z",
  "created": "2025-07-26T04:17:10.958Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 68,
      "characters": 11427,
      "words": 938
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 55
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 55,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 55,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 55,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"e78346504dd8\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase0-final-verification.js\",\n  \"relativePath\": \"server/legacy/phase0-final-verification.js\",\n  \"name\": \"phase0-final-verification.js\",\n  \"extension\": \".js\",\n  \"size\": 9150,\n  \"modified\": \"2025-07-24T14:51:40.480Z\",\n  \"created\": \"2025-07-24T14:51:40.480Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 233,\n      \"characters\": 9088,\n      \"words\": 777\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 8\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 13,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 20,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 27,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"/**\\r\\n * Phase 0: Final Comprehensive OCR System Verification\\r\\n * \\r\\n * This script performs a complete verification of the OCR system\\r\\n * to confirm Phase 0 is ready for completion.\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\n\\r\\nconst OCR_DB_CONFIG = {\\r\\n    host: 'localhost',\\r\\n    user: 'orthodoxapps',\\r\\n    password: '[REDACTED]',\\r\\n    database: 'saints_peter_and_paul_orthodox_church_db'\\r\\n};\\r\\n\\r\\nconst RECORDS_DB_CONFIG = {\\r\\n    host: 'localhost',\\r\\n    user: 'orthodoxapps',\\r\\n    password: '[REDACTED]',\\r\\n    database: 'ssppoc_records_db'\\r\\n};\\r\\n\\r\\nconst FRAMEWORK_DB_CONFIG = {\\r\\n    host: 'localhost',\\r\\n    user: 'orthodoxapps',\\r\\n    password: '[REDACTED]',\\r\\n    database: 'orthodoxmetrics_db'\\r\\n};\\r\\n\\r\\nasync function runFinalVerification() {\\r\\n    console.log('🔍 PHASE 0: Final Comprehensive OCR System Verification');\\r\\n    console.log('=' .repeat(60));\\r\\n    \\r\\n    let ocrConnection, recordsConnection, frameworkConnection;\\r\\n    \\r\\n    try {\\r\\n        // Test 1: Database Connections\\r\\n        console.log('\\\\n📋 TEST 1: Database Connections');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        ocrConnection = await mysql.createConnection(OCR_DB_CONFIG);\\r\\n        console.log('✅ OCR Database (saints_peter_and_paul_orthodox_church_db): CONNECTED');\\r\\n        \\r\\n        recordsConnection = await mysql.createConnection(RECORDS_DB_CONFIG);\\r\\n        console.log('✅ Records Database (ssppoc_records_db): CONNECTED');\\r\\n        \\r\\n        frameworkConnection = await mysql.createConnection(FRAMEWORK_DB_CONFIG);\\r\\n        console.log('✅ Framework Database (orthodoxmetrics_db): CONNECTED');\\r\\n\\r\\n        // Test 2: OCR Table Schema Verification\\r\\n        console.log('\\\\n📋 TEST 2: OCR Table Schema Verification');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        const [ocrColumns] = await ocrConnection.execute('SHOW COLUMNS FROM ocr_jobs');\\r\\n        const columnNames = ocrColumns.map(col => col.Field);\\r\\n        \\r\\n        const requiredColumns = [\\r\\n            'id', 'church_id', 'filename', 'original_filename', 'status', \\r\\n            'record_type', 'language', 'confidence_score', 'ocr_result',\\r\\n            'ocr_result_translation', 'translation_confidence', \\r\\n            'extracted_entities', 'entity_confidence', 'needs_review',\\r\\n            'detected_language', 'processing_log'\\r\\n        ];\\r\\n        \\r\\n        const missingColumns = requiredColumns.filter(col => !columnNames.includes(col));\\r\\n        \\r\\n        if (missingColumns.length === 0) {\\r\\n            console.log(`✅ OCR Jobs Table Schema: ALL ${requiredColumns.length} REQUIRED COLUMNS PRESENT`);\\r\\n        } else {\\r\\n            console.log(`❌ OCR Jobs Table Schema: MISSING COLUMNS: ${missingColumns.join(', ')}`);\\r\\n        }\\r\\n\\r\\n        // Test 3: OCR Job Status Summary\\r\\n        console.log('\\\\n📋 TEST 3: OCR Job Status Summary');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        const [statusCounts] = await ocrConnection.execute(`\\r\\n            SELECT status, COUNT(*) as count \\r\\n            FROM ocr_jobs \\r\\n            GROUP BY status \\r\\n            ORDER BY count DESC\\r\\n        `);\\r\\n        \\r\\n        let totalJobs = 0;\\r\\n        statusCounts.forEach(row => {\\r\\n            totalJobs += row.count;\\r\\n            console.log(`   ${row.status.toUpperCase()}: ${row.count} jobs`);\\r\\n        });\\r\\n        console.log(`   TOTAL: ${totalJobs} jobs`);\\r\\n\\r\\n        // Test 4: Recent Job Analysis\\r\\n        console.log('\\\\n📋 TEST 4: Recent Job Analysis (Last 10 Jobs)');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        const [recentJobs] = await ocrConnection.execute(`\\r\\n            SELECT id, original_filename, status, record_type, \\r\\n                   confidence_score, error_message, \\r\\n                   DATE_FORMAT(created_at, '%Y-%m-%d %H:%i') as created,\\r\\n                   CASE \\r\\n                       WHEN extracted_entities IS NOT NULL THEN 'YES'\\r\\n                       ELSE 'NO'\\r\\n                   END as has_entities\\r\\n            FROM ocr_jobs \\r\\n            ORDER BY created_at DESC \\r\\n            LIMIT 10\\r\\n        `);\\r\\n        \\r\\n        let successfulJobs = 0;\\r\\n        let errorJobs = 0;\\r\\n        let processingJobs = 0;\\r\\n        \\r\\n        recentJobs.forEach(job => {\\r\\n            const status = job.status.toUpperCase();\\r\\n            const entities = job.has_entities === 'YES' ? '📊' : '📋';\\r\\n            const errorInfo = job.error_message ? ` (${job.error_message.substring(0, 30)}...)` : '';\\r\\n            \\r\\n            console.log(`   Job ${job.id}: ${job.original_filename}`);\\r\\n            console.log(`      Status: ${status} ${entities} | Created: ${job.created}${errorInfo}`);\\r\\n            \\r\\n            if (job.status === 'complete') successfulJobs++;\\r\\n            else if (job.status === 'error') errorJobs++;\\r\\n            else if (job.status === 'processing') processingJobs++;\\r\\n        });\\r\\n\\r\\n        // Test 5: OCR Processing Pipeline Health\\r\\n        console.log('\\\\n📋 TEST 5: OCR Processing Pipeline Health');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        // Check for jobs with extracted entities\\r\\n        const [entitiesResult] = await ocrConnection.execute(`\\r\\n            SELECT COUNT(*) as count \\r\\n            FROM ocr_jobs \\r\\n            WHERE extracted_entities IS NOT NULL\\r\\n            AND JSON_LENGTH(extracted_entities) > 0\\r\\n        `);\\r\\n        \\r\\n        console.log(`📊 Jobs with extracted entities: ${entitiesResult[0].count}`);\\r\\n\\r\\n        // Check for recent successful jobs\\r\\n        const [recentSuccess] = await ocrConnection.execute(`\\r\\n            SELECT COUNT(*) as count \\r\\n            FROM ocr_jobs \\r\\n            WHERE status = 'complete' \\r\\n            AND created_at >= DATE_SUB(NOW(), INTERVAL 1 DAY)\\r\\n        `);\\r\\n        \\r\\n        console.log(`🎯 Successful jobs (last 24h): ${recentSuccess[0].count}`);\\r\\n\\r\\n        // Check for translation errors (should be 0 after our fixes)\\r\\n        const [translationErrors] = await ocrConnection.execute(`\\r\\n            SELECT COUNT(*) as count \\r\\n            FROM ocr_jobs \\r\\n            WHERE status = 'error' \\r\\n            AND (error_message LIKE '%ocr_result_translation%' \\r\\n                 OR error_message LIKE '%extracted_entities%')\\r\\n        `);\\r\\n        \\r\\n        console.log(`🔧 Schema-related errors: ${translationErrors[0].count}`);\\r\\n\\r\\n        // Test 6: Cross-Database Connectivity Test\\r\\n        console.log('\\\\n📋 TEST 6: Cross-Database Connectivity');\\r\\n        console.log('-'.repeat(40));\\r\\n        \\r\\n        const [churchInfo] = await frameworkConnection.execute(`\\r\\n            SELECT id, name FROM churches WHERE id = 14 LIMIT 1\\r\\n        `);\\r\\n        \\r\\n        if (churchInfo.length > 0) {\\r\\n            console.log(`✅ Church #14: ${churchInfo[0].name}`);\\r\\n        } else {\\r\\n            console.log('❌ Church #14: NOT FOUND');\\r\\n        }\\r\\n\\r\\n        const [recordsTableCount] = await recordsConnection.execute(`\\r\\n            SELECT COUNT(*) as count FROM information_schema.tables \\r\\n            WHERE table_schema = 'ssppoc_records_db'\\r\\n        `);\\r\\n        \\r\\n        console.log(`✅ Records DB Tables: ${recordsTableCount[0].count} tables`);\\r\\n\\r\\n        // Final Assessment\\r\\n        console.log('\\\\n🎯 PHASE 0 FINAL ASSESSMENT');\\r\\n        console.log('='.repeat(60));\\r\\n        \\r\\n        const assessments = [\\r\\n            { test: 'Database Connections', status: true },\\r\\n            { test: 'OCR Schema Complete', status: missingColumns.length === 0 },\\r\\n            { test: 'No Schema Errors', status: translationErrors[0].count === 0 },\\r\\n            { test: 'Recent Processing Activity', status: totalJobs > 0 },\\r\\n            { test: 'Entity Extraction Working', status: entitiesResult[0].count > 0 },\\r\\n            { test: 'Cross-DB Connectivity', status: churchInfo.length > 0 }\\r\\n        ];\\r\\n        \\r\\n        const passedTests = assessments.filter(a => a.status).length;\\r\\n        const totalTests = assessments.length;\\r\\n        \\r\\n        assessments.forEach(assessment => {\\r\\n            const icon = assessment.status ? '✅' : '❌';\\r\\n            console.log(`${icon} ${assessment.test}`);\\r\\n        });\\r\\n        \\r\\n        console.log('\\\\n' + '='.repeat(60));\\r\\n        console.log(`📊 PHASE 0 RESULTS: ${passedTests}/${totalTests} tests passed`);\\r\\n        \\r\\n        if (passedTests === totalTests) {\\r\\n            console.log('🎉 PHASE 0: COMPLETE AND READY FOR PHASE 1!');\\r\\n        } else {\\r\\n            console.log('⚠️  PHASE 0: Some issues need resolution before Phase 1');\\r\\n        }\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Verification failed:', error.message);\\r\\n        throw error;\\r\\n    } finally {\\r\\n        if (ocrConnection) await ocrConnection.end();\\r\\n        if (recordsConnection) await recordsConnection.end();\\r\\n        if (frameworkConnection) await frameworkConnection.end();\\r\\n        console.log('\\\\n🔌 All database connections closed');\\r\\n    }\\r\\n}\\r\\n\\r\\n// Run the verification\\r\\nrunFinalVerification()\\r\\n    .then(() => {\\r\\n        console.log('\\\\n🎯 Phase 0 Final Verification Complete!');\\r\\n        process.exit(0);\\r\\n    })\\r\\n    .catch((error) => {\\r\\n        console.error('\\\\n💥 Phase 0 Final Verification Failed:', error.message);\\r\\n        process.exit(1);\\r\\n    });\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 233,\n      \"codeLines\": 171,\n      \"commentLines\": 17,\n      \"commentRatio\": 0.09042553191489362,\n      \"averageLineLength\": 45.680851063829785\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.958Z\"\n  },\n  \"contentHash\": \"0de11088badcb63ce42fdb645f33474c63b477235ff9d887ad88fc6d09337f5d\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.958Z\"\n}"
    },
    "complexity": {
      "totalLines": 68,
      "codeLines": 68,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 167.05882352941177
    },
    "lastAnalyzed": "2025-07-28T07:19:57.578Z"
  },
  "contentHash": "c665778439d6ffc4536c9d648844370a8cc8591528f0566684266f66278972bb",
  "discoveredAt": "2025-07-28T07:19:57.578Z"
}