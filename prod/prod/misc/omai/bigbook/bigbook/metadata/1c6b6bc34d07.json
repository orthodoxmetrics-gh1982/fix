{
  "id": "1c6b6bc34d07",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/unified-tests.js",
  "relativePath": "server/testing/unified-tests.js",
  "name": "unified-tests.js",
  "extension": ".js",
  "size": 12720,
  "modified": "2025-07-18T19:04:40.662Z",
  "created": "2025-07-18T19:11:06.132Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 430,
      "characters": 12670,
      "words": 1194
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 10
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 11
      },
      {
        "type": "npm_package",
        "name": "axios",
        "line": 12
      },
      {
        "type": "npm_package",
        "name": "form-data",
        "line": 196
      },
      {
        "type": "npm_package",
        "name": "@google-cloud/vision",
        "line": 239
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 81,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 82,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 83,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 84,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 85,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 108,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 109,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 110,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 111,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 300,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Orthodox Metrics - Unified Testing Suite\r\n * Consolidates: test-ocr-*.js, debug-ocr-*.js, test-api-*.js\r\n * Provides: Comprehensive testing with different levels\r\n */\r\n\r\nconst path = require('path');\r\nconst fs = require('fs').promises;\r\nconst mysql = require('mysql2/promise');\r\nconst axios = require('axios');\r\n\r\n// ANSI color codes\r\nconst colors = {\r\n  reset: '\\x1b[0m',\r\n  red: '\\x1b[31m',\r\n  green: '\\x1b[32m',\r\n  yellow: '\\x1b[33m',\r\n  blue: '\\x1b[34m',\r\n  cyan: '\\x1b[36m',\r\n};\r\n\r\nfunction colorLog(message, color = 'white') {\r\n  console.log(`${colors[color] || ''}${message}${colors.reset}`);\r\n}\r\n\r\nclass OrthodoxTestSuite {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      level: 'basic', // basic, full, debug\r\n      skipOcr: false,\r\n      skipApi: false,\r\n      skipDatabase: false,\r\n      baseUrl: 'http://localhost:3000',\r\n      ...options\r\n    };\r\n    \r\n    this.results = {\r\n      passed: 0,\r\n      failed: 0,\r\n      skipped: 0,\r\n      tests: []\r\n    };\r\n  }\r\n\r\n  async runTest(testName, testFunction, required = true) {\r\n    colorLog(`\\n🧪 Testing: ${testName}`, 'cyan');\r\n    colorLog('─'.repeat(50), 'blue');\r\n    \r\n    try {\r\n      const result = await testFunction();\r\n      \r\n      if (result.success) {\r\n        colorLog(`✅ PASS: ${testName}`, 'green');\r\n        if (result.details) {\r\n          colorLog(`   ${result.details}`, 'blue');\r\n        }\r\n        this.results.passed++;\r\n        this.results.tests.push({ name: testName, status: 'PASS', details: result.details });\r\n      } else {\r\n        throw new Error(result.error || 'Test failed');\r\n      }\r\n      \r\n    } catch (error) {\r\n      const message = `❌ FAIL: ${testName} - ${error.message}`;\r\n      colorLog(message, 'red');\r\n      \r\n      this.results.failed++;\r\n      this.results.tests.push({ name: testName, status: 'FAIL', error: error.message });\r\n      \r\n      if (required && this.options.level !== 'debug') {\r\n        throw new Error(`Required test failed: ${testName}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async testDatabaseConnection() {\r\n    return this.runTest('Database Connection', async () => {\r\n      const config = {\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'root',\r\n        password: process.env.[REDACTED],\r\n        database: process.env.[REDACTED] || 'orthodoxmetrics',\r\n        port: process.env.[REDACTED] || 3306\r\n      };\r\n\r\n      const connection = await mysql.createConnection(config);\r\n      \r\n      // Test basic query\r\n      const [rows] = await connection.execute('SELECT 1 as test');\r\n      await connection.end();\r\n      \r\n      if (rows[0].test === 1) {\r\n        return { \r\n          success: true, \r\n          details: `Connected to ${config.host}:${config.port}/${config.database}` \r\n        };\r\n      } else {\r\n        return { success: false, error: 'Invalid query result' };\r\n      }\r\n    });\r\n  }\r\n\r\n  async testDatabaseTables() {\r\n    return this.runTest('Database Tables', async () => {\r\n      const connection = await mysql.createConnection({\r\n        host: process.env.[REDACTED] || 'localhost',\r\n        user: process.env.[REDACTED] || 'root',\r\n        password: process.env.[REDACTED],\r\n        database: process.env.[REDACTED] || 'orthodoxmetrics'\r\n      });\r\n\r\n      const requiredTables = [\r\n        'church_info',\r\n        'users', \r\n        'baptism_records',\r\n        'marriage_records',\r\n        'funeral_records'\r\n      ];\r\n\r\n      const [tables] = await connection.execute('SHOW TABLES');\r\n      const existingTables = tables.map(row => Object.values(row)[0]);\r\n      \r\n      await connection.end();\r\n\r\n      const missingTables = requiredTables.filter(table => \r\n        !existingTables.includes(table)\r\n      );\r\n\r\n      if (missingTables.length === 0) {\r\n        return { \r\n          success: true, \r\n          details: `Found ${existingTables.length} tables including all required ones` \r\n        };\r\n      } else {\r\n        return { \r\n          success: false, \r\n          error: `Missing tables: ${missingTables.join(', ')}` \r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  async testApiHealthEndpoint() {\r\n    return this.runTest('API Health Endpoint', async () => {\r\n      try {\r\n        const response = await axios.get(`${this.options.baseUrl}/api/health`, {\r\n          timeout: 5000\r\n        });\r\n\r\n        if (response.status === 200 && response.data.status === 'OK') {\r\n          return { \r\n            success: true, \r\n            details: `Server responding at ${this.options.baseUrl}` \r\n          };\r\n        } else {\r\n          return { \r\n            success: false, \r\n            error: `Unexpected response: ${response.status}` \r\n          };\r\n        }\r\n      } catch (error) {\r\n        if (error.code === 'ECONNREFUSED') {\r\n          return { \r\n            success: false, \r\n            error: `Server not running at ${this.options.baseUrl}` \r\n          };\r\n        }\r\n        throw error;\r\n      }\r\n    });\r\n  }\r\n\r\n  async testOcrEndpoint() {\r\n    if (this.options.skipOcr) {\r\n      this.results.skipped++;\r\n      colorLog('⏭️  Skipping OCR tests', 'yellow');\r\n      return;\r\n    }\r\n\r\n    return this.runTest('OCR Processing Endpoint', async () => {\r\n      // Create a simple test image (1x1 pixel PNG)\r\n      const testImageBuffer = Buffer.from([\r\n        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\r\n        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,\r\n        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\r\n        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,\r\n        0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41,\r\n        0x54, 0x08, 0x57, 0x63, 0xF8, 0x0F, 0x00, 0x00,\r\n        0x01, 0x00, 0x01, 0x5C, 0xCD, 0x90, 0x0A, 0x00,\r\n        0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,\r\n        0x42, 0x60, 0x82\r\n      ]);\r\n\r\n      const FormData = require('form-data');\r\n      const form = new FormData();\r\n      form.append('image', testImageBuffer, 'test.png');\r\n      form.append('record_type', 'baptism');\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.options.baseUrl}/api/ocr/process`,\r\n          form,\r\n          {\r\n            headers: form.getHeaders(),\r\n            timeout: 30000\r\n          }\r\n        );\r\n\r\n        if (response.status === 200 && response.data.job_id) {\r\n          return { \r\n            success: true, \r\n            details: `OCR job created: ${response.data.job_id}` \r\n          };\r\n        } else {\r\n          return { \r\n            success: false, \r\n            error: `Unexpected OCR response: ${response.status}` \r\n          };\r\n        }\r\n      } catch (error) {\r\n        return { \r\n          success: false, \r\n          error: `OCR endpoint failed: ${error.message}` \r\n        };\r\n      }\r\n    }, false); // Non-required for basic tests\r\n  }\r\n\r\n  async testGoogleVisionApi() {\r\n    if (this.options.skipOcr) {\r\n      this.results.skipped++;\r\n      return;\r\n    }\r\n\r\n    return this.runTest('Google Vision API', async () => {\r\n      try {\r\n        const vision = require('@google-cloud/vision');\r\n        const client = new vision.ImageAnnotatorClient();\r\n\r\n        // Test with a simple image\r\n        const testImage = {\r\n          image: {\r\n            content: Buffer.from([\r\n              // Minimal valid image data\r\n              0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A\r\n            ]).toString('base64')\r\n          }\r\n        };\r\n\r\n        const [result] = await client.textDetection(testImage);\r\n        \r\n        return { \r\n          success: true, \r\n          details: 'Google Vision API credentials valid' \r\n        };\r\n      } catch (error) {\r\n        if (error.code === 3) { // INVALID_ARGUMENT is expected with minimal test data\r\n          return { \r\n            success: true, \r\n            details: 'Google Vision API accessible (invalid test data expected)' \r\n          };\r\n        }\r\n        return { \r\n          success: false, \r\n          error: `Google Vision API error: ${error.message}` \r\n        };\r\n      }\r\n    }, false);\r\n  }\r\n\r\n  async runBasicTests() {\r\n    colorLog('\\n🎯 Running Basic Tests...', 'cyan');\r\n    \r\n    await this.testDatabaseConnection();\r\n    await this.testDatabaseTables();\r\n    \r\n    if (!this.options.skipApi) {\r\n      await this.testApiHealthEndpoint();\r\n    }\r\n  }\r\n\r\n  async runFullTests() {\r\n    colorLog('\\n🎯 Running Full Test Suite...', 'cyan');\r\n    \r\n    await this.runBasicTests();\r\n    await this.testOcrEndpoint();\r\n    await this.testGoogleVisionApi();\r\n  }\r\n\r\n  async runDebugTests() {\r\n    colorLog('\\n🎯 Running Debug Tests...', 'cyan');\r\n    \r\n    await this.runFullTests();\r\n    \r\n    // Additional debug tests would go here\r\n    colorLog('\\n🔍 Debug Information:', 'blue');\r\n    colorLog(`   Node.js Version: ${process.version}`, 'white');\r\n    colorLog(`   Environment: ${process.env.[REDACTED] || 'development'}`, 'white');\r\n    colorLog(`   Base URL: ${this.options.baseUrl}`, 'white');\r\n  }\r\n\r\n  generateReport() {\r\n    const total = this.results.passed + this.results.failed + this.results.skipped;\r\n    const passRate = total > 0 ? (this.results.passed / total * 100).toFixed(1) : 0;\r\n    \r\n    colorLog('\\n📊 TEST RESULTS', 'cyan');\r\n    colorLog('═'.repeat(60), 'blue');\r\n    \r\n    colorLog(`✅ Passed: ${this.results.passed}`, 'green');\r\n    colorLog(`❌ Failed: ${this.results.failed}`, 'red');\r\n    colorLog(`⏭️  Skipped: ${this.results.skipped}`, 'yellow');\r\n    colorLog(`📈 Pass Rate: ${passRate}%`, this.results.failed === 0 ? 'green' : 'yellow');\r\n    \r\n    if (this.results.failed > 0) {\r\n      colorLog('\\n❌ FAILED TESTS:', 'red');\r\n      this.results.tests\r\n        .filter(test => test.status === 'FAIL')\r\n        .forEach(test => {\r\n          colorLog(`   ${test.name}: ${test.error}`, 'red');\r\n        });\r\n    }\r\n    \r\n    return this.results.failed === 0;\r\n  }\r\n\r\n  async run() {\r\n    const startTime = Date.now();\r\n    \r\n    colorLog('🧪 Orthodox Metrics - Test Suite', 'cyan');\r\n    colorLog('═'.repeat(60), 'blue');\r\n    colorLog(`Test Level: ${this.options.level}`, 'blue');\r\n    \r\n    try {\r\n      switch (this.options.level) {\r\n        case 'basic':\r\n          await this.runBasicTests();\r\n          break;\r\n        case 'full':\r\n          await this.runFullTests();\r\n          break;\r\n        case 'debug':\r\n          await this.runDebugTests();\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown test level: ${this.options.level}`);\r\n      }\r\n      \r\n      const duration = ((Date.now() - startTime) / 1000).toFixed(1);\r\n      const success = this.generateReport();\r\n      \r\n      colorLog(`\\n⏱️  Test Duration: ${duration}s`, 'blue');\r\n      \r\n      if (success) {\r\n        colorLog('🎉 ALL TESTS PASSED!', 'green');\r\n        process.exit(0);\r\n      } else {\r\n        colorLog('💥 SOME TESTS FAILED!', 'red');\r\n        process.exit(1);\r\n      }\r\n      \r\n    } catch (error) {\r\n      colorLog(`\\n💥 TEST SUITE FAILED: ${error.message}`, 'red');\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n\r\n// CLI interface\r\nasync function main() {\r\n  const args = process.argv.slice(2);\r\n  const options = {};\r\n  \r\n  for (let i = 0; i < args.length; i++) {\r\n    switch (args[i]) {\r\n      case '--level':\r\n        options.level = args[++i];\r\n        break;\r\n      case '--skip-ocr':\r\n        options.skipOcr = true;\r\n        break;\r\n      case '--skip-api':\r\n        options.skipApi = true;\r\n        break;\r\n      case '--skip-database':\r\n        options.skipDatabase = true;\r\n        break;\r\n      case '--base-url':\r\n        options.baseUrl = args[++i];\r\n        break;\r\n      case '--help':\r\n        console.log(`\r\nOrthodox Metrics Test Suite\r\n\r\nUsage: node unified-tests.js [options]\r\n\r\nOptions:\r\n  --level <basic|full|debug>    Test level (default: basic)\r\n  --skip-ocr                    Skip OCR tests\r\n  --skip-api                    Skip API tests\r\n  --skip-database              Skip database tests\r\n  --base-url <url>             Base URL for API tests (default: http://localhost:3000)\r\n  --help                       Show this help message\r\n\r\nTest Levels:\r\n  basic   - Essential connectivity and core functionality\r\n  full    - Comprehensive testing including OCR pipeline\r\n  debug   - Full tests plus detailed diagnostic information\r\n\r\nExamples:\r\n  node unified-tests.js                        # Basic tests\r\n  node unified-tests.js --level full           # Full test suite\r\n  node unified-tests.js --level debug          # Debug mode\r\n  node unified-tests.js --skip-ocr             # Skip OCR tests\r\n        `);\r\n        process.exit(0);\r\n    }\r\n  }\r\n  \r\n  const testSuite = new OrthodoxTestSuite(options);\r\n  await testSuite.run();\r\n}\r\n\r\nif (require.main === module) {\r\n  main().catch(console.error);\r\n}\r\n\r\nmodule.exports = OrthodoxTestSuite;\r\n"
    },
    "complexity": {
      "totalLines": 430,
      "codeLines": 353,
      "commentLines": 13,
      "commentRatio": 0.03551912568306011,
      "averageLineLength": 32.91803278688525
    },
    "lastAnalyzed": "2025-07-28T07:20:01.222Z"
  },
  "contentHash": "b903b7fe047aa86b59980c68a66e074cc9e40eb18d3ec32e219877ce3bb638ae",
  "discoveredAt": "2025-07-28T07:20:01.222Z"
}