{
  "id": "577b66c57bb4",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/a67b09cee9df.json",
  "relativePath": "bigbook/metadata/a67b09cee9df.json",
  "name": "a67b09cee9df.json",
  "extension": ".json",
  "size": 7425,
  "modified": "2025-07-26T04:17:10.350Z",
  "created": "2025-07-26T04:17:10.350Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 120,
      "characters": 7391,
      "words": 632
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 107
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 107
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 107
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:secret|token)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 107,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"a67b09cee9df\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/config/session.js\",\n  \"relativePath\": \"server/config/session.js\",\n  \"name\": \"session.js\",\n  \"extension\": \".js\",\n  \"size\": 4276,\n  \"modified\": \"2025-07-24T14:50:26.304Z\",\n  \"created\": \"2025-07-24T14:50:26.304Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 4\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 119,\n      \"characters\": 4242,\n      \"words\": 455\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 4\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"express-session\",\n        \"line\": 2\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"express-mysql-session\",\n        \"line\": 3\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"dotenv\",\n        \"line\": 6\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:secret|token)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 57,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 10,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 11,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 12,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 13,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 14,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 48,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 48,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 51,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 54,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// server/config/session.js - FIXED VERSION FOR HTTPS PRODUCTION\\nconst session = require('express-session');\\nconst MySQLStore = require('express-mysql-session')(session);\\n\\n// Load environment variables\\nrequire('dotenv').config();\\n\\n// Database connection options for session store\\nconst sessionStoreOptions = {\\n  host: process.env.[REDACTED] || 'localhost',\\n  port: process.env.[REDACTED] || 3306,\\n  user: process.env.[REDACTED] || 'orthodoxapps',\\n  password: process.env.[REDACTED] || 'Summerof1982@!',\\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\\n  charset: 'utf8mb4',\\n  expiration: 86400000, // 24 hours\\n  checkExpirationInterval: 900000, // Check every 15 minutes\\n  createDatabaseTable: true,\\n  endConnectionOnClose: true,\\n  clearExpired: true,\\n  schema: {\\n    tableName: 'sessions',\\n    columnNames: {\\n      session_id: 'session_id',\\n      expires: 'expires',\\n      data: 'data'\\n    }\\n  }\\n};\\n\\nconst store = new MySQLStore(sessionStoreOptions);\\n\\n// Enhanced error handling for session store\\nstore.on('error', (error) => {\\n  console.error('‚ùå Session store error:', error);\\n  console.error('‚ùå This may cause phantom user issues!');\\n});\\n\\nstore.on('connect', () => {\\n  console.log('‚úÖ Session store connected successfully');\\n});\\n\\nstore.on('disconnect', () => {\\n  console.log('‚ö†Ô∏è Session store disconnected');\\n});\\n\\n// Enhanced environment detection for HTTPS\\nconst isProduction = process.env.[REDACTED] === 'production' || process.env.[REDACTED] === 'development';\\n// üîß FORCE HTTPS for orthodoxmetrics.com - always use secure cookies\\nconst isHTTPS = true; // Force secure cookies for production HTTPS site\\nconst sessionSecret = process.env.[REDACTED] || 'orthodox-metrics-production-secret-2025';\\n\\nconsole.log('üç™ Session configuration:');\\nconsole.log('   Environment:', process.env.[REDACTED] || 'development');\\nconsole.log('   HTTPS mode:', isHTTPS, '(FORCED TRUE for production)');\\nconsole.log('   Secure cookies:', isHTTPS);\\nconsole.log('   Session secret:'[REDACTED]'SET' : 'NOT SET');\\nconsole.log('   Cookie name: orthodoxmetrics.sid');\\nconsole.log('   Cookie domain: .orthodoxmetrics.com');\\n\\nconst sessionConfig = {\\n  name: 'orthodoxmetrics.sid',\\n  secret: sessionSecret,\\n  store: store,\\n  resave: false,\\n  saveUninitialized: false,\\n  rolling: true,\\n  proxy: true, // Trust proxy headers (important for nginx setup)\\n  cookie: {\\n    secure: true, // üîß FIXED: Enable secure cookies for HTTPS\\n    httpOnly: true,\\n    maxAge: 86400000, // 24 hours\\n    sameSite: 'lax', // Allow same-site requests\\n    domain: '.orthodoxmetrics.com' // üîß FIXED: Always set domain for orthodoxmetrics.com\\n  }\\n};\\n\\n// Create session middleware with enhanced debugging\\nconst sessionMiddleware = session(sessionConfig);\\n\\n// Wrap session middleware to add debugging for phantom user issues\\nconst debugSessionMiddleware = (req, res, next) => {\\n  const originalSessionId = req.sessionID;\\n  \\n  // Log session state before middleware\\n  console.log(`üç™ SESSION DEBUG - ${req.method} ${req.path}`);\\n  console.log(`   Session ID before: ${originalSessionId || 'NONE'}`);\\n  console.log(`   Cookie header: ${req.headers.cookie ? 'PRESENT' : 'MISSING'}`);\\n  \\n  sessionMiddleware(req, res, (err) => {\\n    if (err) {\\n      console.error('‚ùå Session middleware error:', err);\\n      return next(err);\\n    }\\n    \\n    const newSessionId = req.sessionID;\\n    console.log(`   Session ID after: ${newSessionId || 'NONE'}`);\\n    console.log(`   Session user: ${req.session?.user?.email || 'NONE'}`);\\n    console.log(`   Session keys: ${req.session ? Object.keys(req.session).join(', ') : 'NONE'}`);\\n    \\n    // Check for phantom user issue\\n    if (newSessionId && !req.session?.user) {\\n      console.log('‚ö†Ô∏è  PHANTOM USER DETECTED: Session ID exists but no user data');\\n      console.log('‚ö†Ô∏è  This indicates session store or cookie transmission issues');\\n    }\\n    \\n    // Check for session ID changes (indicates session not persisting)\\n    if (originalSessionId && newSessionId && originalSessionId !== newSessionId) {\\n      console.log('‚ö†Ô∏è  SESSION ID CHANGED: Session not persisting properly');\\n      console.log(`   Original: ${originalSessionId}`);\\n      console.log(`   New: ${newSessionId}`);\\n    }\\n    \\n    next();\\n  });\\n};\\n\\nmodule.exports = debugSessionMiddleware;\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 119,\n      \"codeLines\": 89,\n      \"commentLines\": 11,\n      \"commentRatio\": 0.11,\n      \"averageLineLength\": 41.04\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.353Z\"\n  },\n  \"contentHash\": \"4d641440df8d2fe4f871da56b0f42b5eaa9a0456938134ec5a1e04abbe95e737\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.353Z\"\n}"
    },
    "complexity": {
      "totalLines": 120,
      "codeLines": 120,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 60.6
    },
    "lastAnalyzed": "2025-07-28T07:19:57.316Z"
  },
  "contentHash": "8e5bdf213faefb616c1c162e945a7f958a4d93650e2bcd59762ca42a822641e3",
  "discoveredAt": "2025-07-28T07:19:57.316Z"
}