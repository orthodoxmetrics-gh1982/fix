{
  "id": "801065e436e3",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/7-11-25/MULTI_TENANT_OCR_SYSTEM_DOCUMENTATION.md",
  "relativePath": "docs/archive/temp_extract/7-11-25/MULTI_TENANT_OCR_SYSTEM_DOCUMENTATION.md",
  "name": "MULTI_TENANT_OCR_SYSTEM_DOCUMENTATION.md",
  "extension": ".md",
  "size": 21350,
  "modified": "2025-07-11T10:49:28.000Z",
  "created": "2025-07-14T05:44:08.672Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 690,
      "characters": 19918,
      "words": 2214
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 187
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 198,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 199,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 200,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Multi-Tenant OCR System Documentation\r\n\r\n**Orthodox Metrics Platform - OCR Pipeline**  \r\n*Version: 1.0*  \r\n*Date: July 10, 2025*\r\n\r\n---\r\n\r\n## Table of Contents\r\n\r\n1. [System Overview](#system-overview)\r\n2. [Architecture](#architecture)\r\n3. [Database Design](#database-design)\r\n4. [Backend Implementation](#backend-implementation)\r\n5. [Frontend Implementation](#frontend-implementation)\r\n6. [Setup & Configuration](#setup--configuration)\r\n7. [API Reference](#api-reference)\r\n8. [File Management](#file-management)\r\n9. [Multi-Language Support](#multi-language-support)\r\n10. [Monitoring & Debugging](#monitoring--debugging)\r\n11. [Maintenance & Troubleshooting](#maintenance--troubleshooting)\r\n12. [Security Considerations](#security-considerations)\r\n\r\n---\r\n\r\n## System Overview\r\n\r\n### Purpose\r\nThe Multi-Tenant OCR System enables Orthodox churches to digitize historical records (baptism certificates, marriage records, death certificates, etc.) with automatic text extraction using Google Vision AI. Each church operates in complete isolation with its own database and file storage.\r\n\r\n### Key Features\r\n- ✅ **Multi-Tenant Architecture**: Complete data isolation per church\r\n- ✅ **Multi-Language OCR**: Supports Greek, Russian, Romanian, Georgian, Serbian, and more\r\n- ✅ **Dual Storage**: Results saved to both database and filesystem\r\n- ✅ **Real-Time Processing**: Automatic queue processing every 30 seconds\r\n- ✅ **High Accuracy**: Google Vision API with language-specific optimization\r\n- ✅ **Error Detection**: Confidence scoring and error region identification\r\n- ✅ **Comprehensive UI**: Upload, review, and manage OCR jobs through web interface\r\n\r\n### System Requirements\r\n- **Backend**: Node.js 16+, Express.js\r\n- **Database**: MariaDB/MySQL with per-church databases\r\n- **Storage**: Local filesystem for images and text files\r\n- **OCR Engine**: Google Vision API\r\n- **Frontend**: React with TypeScript\r\n\r\n---\r\n\r\n## Architecture\r\n\r\n### High-Level Architecture\r\n\r\n```\r\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\r\n│   Frontend      │    │   Backend       │    │   Databases     │\r\n│                 │    │                 │    │                 │\r\n│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │\r\n│ │ OCX Data    │ │◄──►│ │ OCR Router  │ │    │ │ Central DB  │ │\r\n│ │ Panel       │ │    │ │             │ │    │ │ (churches)  │ │\r\n│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │\r\n│                 │    │        │        │    │                 │\r\n│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │\r\n│ │ Church      │ │◄──►│ │ OCR         │ │◄──►│ │ Church 1 DB │ │\r\n│ │ Admin Panel │ │    │ │ Controller  │ │    │ │ (ocr_jobs)  │ │\r\n│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │\r\n│                 │    │        │        │    │                 │\r\n└─────────────────┘    │ ┌─────────────┐ │    │ ┌─────────────┐ │\r\n                       │ │ DB Switcher │ │◄──►│ │ Church N DB │ │\r\n                       │ │             │ │    │ │ (isolated)  │ │\r\n                       │ └─────────────┘ │    │ └─────────────┘ │\r\n                       │        │        │    └─────────────────┘\r\n                       │ ┌─────────────┐ │\r\n                       │ │ OCR         │ │\r\n                       │ │ Processing  │ │\r\n                       │ │ Service     │ │\r\n                       │ └─────────────┘ │\r\n                       │        │        │\r\n                       └─────────────────┘\r\n                                │\r\n                      ┌─────────────────┐\r\n                      │ Google Vision   │\r\n                      │ API             │\r\n                      └─────────────────┘\r\n```\r\n\r\n### Component Breakdown\r\n\r\n#### 1. Database Switcher (`utils/dbSwitcher.js`)\r\n- **Purpose**: Dynamically switches between church-specific databases\r\n- **Key Function**: `getChurchDbConnection(dbName)`\r\n- **Features**: Connection pooling, caching, error handling\r\n\r\n#### 2. OCR Controller (`controllers/churchOcrController.js`)\r\n- **Purpose**: Handles OCR-related API requests\r\n- **Functions**: Upload, job management, result retrieval\r\n- **Security**: Church-specific data isolation\r\n\r\n#### 3. OCR Processing Service (`services/ocrProcessingService.js`)\r\n- **Purpose**: Background processing of OCR jobs\r\n- **Features**: Queue management, Google Vision integration, file generation\r\n- **Scheduling**: Runs every 30 seconds automatically\r\n\r\n#### 4. Frontend Components\r\n- **OCXDataPanel**: Main OCR management interface\r\n- **ChurchAdminPanel**: Church administration and OCR access\r\n\r\n---\r\n\r\n## Database Design\r\n\r\n### Central Database (`orthodox_metrics`)\r\n\r\n```sql\r\n-- Churches table (central registry)\r\nCREATE TABLE churches (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(255) NOT NULL,\r\n    database_name VARCHAR(100) NOT NULL UNIQUE,\r\n    is_active BOOLEAN DEFAULT TRUE,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n);\r\n```\r\n\r\n### Church-Specific Databases\r\n\r\nEach church has its own isolated database with the following OCR tables:\r\n\r\n```sql\r\n-- OCR Jobs table (per church)\r\nCREATE TABLE ocr_jobs (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    church_id INT NOT NULL,\r\n    filename VARCHAR(255) NOT NULL,\r\n    original_filename VARCHAR(255) NOT NULL,\r\n    file_path TEXT NOT NULL,\r\n    file_size BIGINT,\r\n    mime_type VARCHAR(100),\r\n    record_type ENUM('baptism', 'marriage', 'death', 'other') DEFAULT 'other',\r\n    language VARCHAR(10) DEFAULT 'en',\r\n    status ENUM('pending', 'processing', 'complete', 'error') DEFAULT 'pending',\r\n    confidence_score DECIMAL(3,2),\r\n    ocr_result LONGTEXT,\r\n    error_regions JSON,\r\n    description TEXT,\r\n    processing_log TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    INDEX idx_church_status (church_id, status),\r\n    INDEX idx_created_at (created_at)\r\n);\r\n\r\n-- OCR Settings table (per church)\r\nCREATE TABLE ocr_settings (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    church_id INT NOT NULL,\r\n    default_language VARCHAR(10) DEFAULT 'en',\r\n    auto_process BOOLEAN DEFAULT TRUE,\r\n    confidence_threshold DECIMAL(3,2) DEFAULT 0.60,\r\n    max_file_size BIGINT DEFAULT 10485760,\r\n    allowed_formats JSON DEFAULT ('[\"jpg\", \"jpeg\", \"png\", \"pdf\"]'),\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n);\r\n\r\n-- OCR Queue table (per church)\r\nCREATE TABLE ocr_queue (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    job_id INT NOT NULL,\r\n    priority INT DEFAULT 1,\r\n    attempts INT DEFAULT 0,\r\n    max_attempts INT DEFAULT 3,\r\n    next_attempt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (job_id) REFERENCES ocr_jobs(id) ON DELETE CASCADE\r\n);\r\n```\r\n\r\n---\r\n\r\n## Backend Implementation\r\n\r\n### 1. Database Switching Logic\r\n\r\n```javascript\r\n// utils/dbSwitcher.js\r\nconst mysql = require('mysql2/promise');\r\nconst dbConnections = new Map();\r\n\r\nasync function getChurchDbConnection(dbName) {\r\n    // Check cache first\r\n    if (dbConnections.has(dbName)) {\r\n        return dbConnections.get(dbName);\r\n    }\r\n    \r\n    // Create new connection pool\r\n    const connection = mysql.createPool({\r\n        host: process.env.[REDACTED],\r\n        user: process.env.[REDACTED],\r\n        password: process.env.[REDACTED],\r\n        database: dbName,\r\n        waitForConnections: true,\r\n        connectionLimit: 10,\r\n        queueLimit: 0\r\n    });\r\n    \r\n    // Cache and return\r\n    dbConnections.set(dbName, connection);\r\n    return connection;\r\n}\r\n```\r\n\r\n### 2. OCR Processing Workflow\r\n\r\n```javascript\r\n// Automatic Processing Flow\r\n1. processQueue() → runs every 30 seconds\r\n2. processChurchQueue(church) → for each active church\r\n3. processOcrJob(db, job) → individual job processing\r\n4. performOcr(imagePath, language) → Google Vision API\r\n5. saveOcrResultFile(job, text) → save to filesystem\r\n6. Update database with results\r\n```\r\n\r\n### 3. File Upload Handler\r\n\r\n```javascript\r\n// File upload with church isolation\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        const churchId = req.params.id;\r\n        const uploadDir = path.join('uploads', 'ocr', `church_${churchId}`);\r\n        fs.mkdirSync(uploadDir, { recursive: true });\r\n        cb(null, uploadDir);\r\n    },\r\n    filename: (req, file, cb) => {\r\n        const uniqueName = `ocr_${Date.now()}-${Math.random().toString().substr(2, 9)}_${generateHash()}.${getFileExtension(file.originalname)}`;\r\n        cb(null, uniqueName);\r\n    }\r\n});\r\n```\r\n\r\n### 4. API Routes Structure\r\n\r\n```javascript\r\n// routes/church/ocr.js\r\nrouter.post('/upload', upload.array('images', 10), uploadOcrImages);\r\nrouter.get('/jobs', getOcrJobs);\r\nrouter.get('/jobs/:jobId', getOcrJob);\r\nrouter.delete('/jobs/:jobId', deleteOcrJob);\r\nrouter.get('/settings', getOcrSettings);\r\nrouter.put('/settings', updateOcrSettings);\r\nrouter.get('/stats', getOcrStats);\r\n```\r\n\r\n---\r\n\r\n## Frontend Implementation\r\n\r\n### 1. OCXDataPanel Component Structure\r\n\r\n```typescript\r\ninterface OCXDataPanelProps {\r\n    churchId: string;\r\n}\r\n\r\ninterface OcrJob {\r\n    id: number;\r\n    filename: string;\r\n    originalFilename: string;\r\n    status: 'pending' | 'processing' | 'complete' | 'error';\r\n    confidenceScore: number;\r\n    ocrResult?: string;\r\n    recordType: string;\r\n    language: string;\r\n    createdAt: string;\r\n    hasResult: boolean;\r\n}\r\n```\r\n\r\n### 2. Key Features\r\n\r\n- **File Upload**: Drag-and-drop with multiple file support\r\n- **Language Selection**: Dropdown with Orthodox languages\r\n- **Record Type Classification**: Baptism, Marriage, Death, Other\r\n- **Progress Tracking**: Real-time status updates\r\n- **Result Viewing**: Modal with OCR text display\r\n- **Batch Operations**: Multiple file processing\r\n\r\n### 3. State Management\r\n\r\n```typescript\r\nconst [jobs, setJobs] = useState<OcrJob[]>([]);\r\nconst [uploading, setUploading] = useState(false);\r\nconst [selectedLanguage, setSelectedLanguage] = useState('en');\r\nconst [selectedRecordType, setSelectedRecordType] = useState('other');\r\n```\r\n\r\n---\r\n\r\n## Setup & Configuration\r\n\r\n### 1. Environment Variables\r\n\r\n```bash\r\n# .env.production\r\nDB_HOST=localhost\r\nDB_USER=orthodoxapp\r\nDB_PASSWORD=your_password\r\nDB_NAME=orthodox_metrics\r\n\r\n# Google Vision API\r\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json\r\nGOOGLE_CLOUD_PROJECT_ID=your-project-id\r\n```\r\n\r\n### 2. Church Database Creation\r\n\r\n```bash\r\n# Add new church\r\nnode utils/add-church.js \"Church Name\" \"church_database_name\"\r\n\r\n# Setup OCR tables\r\nnode utils/setup-ocr-tables.js church_database_name\r\n\r\n# Grant permissions\r\nmysql < fix-church-permissions.sql\r\n```\r\n\r\n### 3. Google Vision API Setup\r\n\r\n```bash\r\n# Configure credentials\r\nnode setup-google-vision.js\r\n\r\n# Test API connection\r\nnode test-google-vision.js\r\n```\r\n\r\n### 4. Server Startup\r\n\r\n```javascript\r\n// index.js - OCR service integration\r\nconst ocrProcessingService = require('./services/ocrProcessingService');\r\n\r\n// Start OCR processing when server starts\r\nocrProcessingService.start();\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    ocrProcessingService.stop();\r\n});\r\n```\r\n\r\n---\r\n\r\n## API Reference\r\n\r\n### OCR Upload Endpoint\r\n\r\n```http\r\nPOST /api/church/:churchId/ocr/upload\r\nContent-Type: multipart/form-data\r\n\r\nBody:\r\n- images: File[] (max 10 files)\r\n- recordType: string ('baptism'|'marriage'|'death'|'other')\r\n- language: string (language code)\r\n\r\nResponse:\r\n{\r\n    \"success\": true,\r\n    \"message\": \"Files uploaded successfully\",\r\n    \"jobs\": [\r\n        {\r\n            \"id\": 1,\r\n            \"filename\": \"ocr_1752189013339_abc123.jpg\",\r\n            \"originalFilename\": \"baptism_certificate.jpg\",\r\n            \"status\": \"pending\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n### Get OCR Jobs\r\n\r\n```http\r\nGET /api/church/:churchId/ocr/jobs?page=1&limit=20&status=complete\r\n\r\nResponse:\r\n{\r\n    \"jobs\": [\r\n        {\r\n            \"id\": 1,\r\n            \"filename\": \"ocr_1752189013339_abc123.jpg\",\r\n            \"originalFilename\": \"baptism_certificate.jpg\",\r\n            \"status\": \"complete\",\r\n            \"confidenceScore\": 0.95,\r\n            \"recordType\": \"baptism\",\r\n            \"language\": \"el\",\r\n            \"hasResult\": true,\r\n            \"createdAt\": \"2025-07-10T19:51:49.000Z\"\r\n        }\r\n    ],\r\n    \"pagination\": {\r\n        \"page\": 1,\r\n        \"limit\": 20,\r\n        \"total\": 16,\r\n        \"pages\": 1\r\n    }\r\n}\r\n```\r\n\r\n### Get OCR Result\r\n\r\n```http\r\nGET /api/church/:churchId/ocr/jobs/:jobId\r\n\r\nResponse:\r\n{\r\n    \"job\": {\r\n        \"id\": 1,\r\n        \"ocrResult\": \"Extracted text content...\",\r\n        \"confidenceScore\": 0.95,\r\n        \"errorRegions\": null\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\n## File Management\r\n\r\n### Directory Structure\r\n\r\n```\r\nserver/\r\n├── uploads/\r\n│   └── ocr/\r\n│       ├── church_14/\r\n│       │   ├── ocr_1752189013339_abc123.jpg\r\n│       │   ├── ocr_1752189013339_abc123_preprocessed.jpg\r\n│       │   └── ...\r\n│       └── church_15/\r\n│           └── ...\r\n└── ocr-results/\r\n    ├── church_14/\r\n    │   ├── baptism_certificate_result_job1_2025-07-10T23-51-58.txt\r\n    │   ├── marriage_record_result_job2_2025-07-10T23-52-15.txt\r\n    │   └── ...\r\n    └── church_15/\r\n        └── ...\r\n```\r\n\r\n### Text File Format\r\n\r\n```\r\n============================================================\r\nOCR RESULT\r\n============================================================\r\nOriginal File: baptism_certificate.jpg\r\nProcessed File: ocr_1752189013339_abc123.jpg\r\nLanguage: el\r\nRecord Type: baptism\r\nConfidence Score: 95.0%\r\nProcessing Date: 2025-07-10T23:51:58.000Z\r\nJob ID: 1\r\nFile Generated: 2025-07-10T23:52:00.123Z\r\n============================================================\r\n\r\nEXTRACTED TEXT:\r\n----------------------------------------\r\nΒεβαιώ ότι Ιωάννης Παπαδόπουλος\r\nέβαπτίσθη κατά την 15η Μαΐου 1985\r\nυπό του Πατρός Γεωργίου Χριστοδούλου\r\nεν τη Αγία Τριάδι εκκλησία...\r\n----------------------------------------\r\n\r\n============================================================\r\nEnd of OCR Result\r\n============================================================\r\n```\r\n\r\n---\r\n\r\n## Multi-Language Support\r\n\r\n### Supported Languages\r\n\r\n| Language | Code | Script | Use Case |\r\n|----------|------|--------|----------|\r\n| English | en | Latin | Modern records |\r\n| Greek (Modern) | el | Greek | Greek Orthodox records |\r\n| Greek (Ancient) | grc | Greek | Historical documents |\r\n| Russian | ru | Cyrillic | Russian Orthodox records |\r\n| Russian (Old) | ru-PETR1708 | Cyrillic | Pre-1918 records |\r\n| Serbian | sr | Cyrillic | Serbian Orthodox |\r\n| Serbian (Latin) | sr-Latn | Latin | Modern Serbian |\r\n| Bulgarian | bg | Cyrillic | Bulgarian Orthodox |\r\n| Romanian | ro | Latin | Romanian Orthodox |\r\n| Ukrainian | uk | Cyrillic | Ukrainian Orthodox |\r\n| Macedonian | mk | Cyrillic | Macedonian Orthodox |\r\n| Belarusian | be | Cyrillic | Belarusian Orthodox |\r\n| Georgian | ka | Georgian | Georgian Orthodox |\r\n\r\n### Language Configuration\r\n\r\n```javascript\r\n// Frontend language options\r\nconst languageOptions = [\r\n    { value: 'en', label: 'English' },\r\n    { value: 'el', label: 'Greek (Modern)' },\r\n    { value: 'grc', label: 'Greek (Ancient)' },\r\n    { value: 'ru', label: 'Russian' },\r\n    { value: 'ru-PETR1708', label: 'Russian (Old Orthography)' },\r\n    { value: 'sr', label: 'Serbian (Cyrillic)' },\r\n    { value: 'sr-Latn', label: 'Serbian (Latin)' },\r\n    { value: 'bg', label: 'Bulgarian' },\r\n    { value: 'ro', label: 'Romanian' },\r\n    { value: 'uk', label: 'Ukrainian' },\r\n    { value: 'mk', label: 'Macedonian' },\r\n    { value: 'be', label: 'Belarusian' },\r\n    { value: 'ka', label: 'Georgian' }\r\n];\r\n```\r\n\r\n---\r\n\r\n## Monitoring & Debugging\r\n\r\n### Debug Scripts\r\n\r\n```bash\r\n# Check OCR results for a church\r\nnode debug-ocr-results.js\r\n\r\n# Test church admin functionality\r\nnode test-church-admin.js\r\n\r\n# Test Google Vision API\r\nnode test-google-vision.js\r\n\r\n# Manually process OCR queue\r\nnode -e \"require('./services/ocrProcessingService').processQueue()\"\r\n```\r\n\r\n### Logging\r\n\r\nThe system provides comprehensive logging:\r\n\r\n```javascript\r\n// OCR Processing Logs\r\nconsole.log('🚀 Starting OCR Processing Service...');\r\nconsole.log('🔄 Processing OCR queue...');\r\nconsole.log('📋 Processing X jobs for Church Name');\r\nconsole.log('🔍 Processing OCR job X: filename.jpg');\r\nconsole.log('✅ OCR job X completed with 95.0% confidence');\r\nconsole.log('💾 OCR result saved to: /path/to/result.txt');\r\n```\r\n\r\n### Performance Monitoring\r\n\r\n```javascript\r\n// Get processing statistics\r\nconst stats = await ocrProcessingService.getProcessingStats();\r\nconsole.log(stats);\r\n/*\r\n{\r\n    totalChurches: 1,\r\n    queueStatus: {\r\n        pending: 4,\r\n        processing: 0,\r\n        complete: 12,\r\n        error: 0\r\n    },\r\n    timestamp: \"2025-07-10T23:52:00.000Z\"\r\n}\r\n*/\r\n```\r\n\r\n---\r\n\r\n## Maintenance & Troubleshooting\r\n\r\n### Common Issues\r\n\r\n#### 1. OCR Jobs Stuck in Processing\r\n```bash\r\n# Check for stuck jobs\r\nmysql -e \"SELECT * FROM ocr_jobs WHERE status='processing' AND updated_at < NOW() - INTERVAL 5 MINUTE;\"\r\n\r\n# Reset stuck jobs\r\nmysql -e \"UPDATE ocr_jobs SET status='pending' WHERE status='processing' AND updated_at < NOW() - INTERVAL 5 MINUTE;\"\r\n```\r\n\r\n#### 2. Google Vision API Errors\r\n```bash\r\n# Test API credentials\r\nnode test-google-vision.js\r\n\r\n# Check service account permissions\r\ngcloud auth list\r\ngcloud projects list\r\n```\r\n\r\n#### 3. Database Connection Issues\r\n```bash\r\n# Test database connections\r\nnode -e \"require('./utils/dbSwitcher').getChurchDbConnection('church_db_name').then(db => console.log('Connected')).catch(console.error)\"\r\n\r\n# Check database permissions\r\nmysql -e \"SHOW GRANTS FOR 'orthodoxapp'@'localhost';\"\r\n```\r\n\r\n### Maintenance Tasks\r\n\r\n#### Regular Cleanup\r\n```bash\r\n# Clean up old preprocessed images (weekly)\r\nfind uploads/ocr -name \"*_preprocessed.*\" -mtime +7 -delete\r\n\r\n# Archive old OCR results (monthly)\r\ntar -czf ocr-results-$(date +%Y%m).tar.gz ocr-results/\r\n```\r\n\r\n#### Database Optimization\r\n```sql\r\n-- Optimize OCR tables (monthly)\r\nOPTIMIZE TABLE ocr_jobs;\r\nOPTIMIZE TABLE ocr_queue;\r\n\r\n-- Clean up old queue entries\r\nDELETE FROM ocr_queue WHERE created_at < NOW() - INTERVAL 30 DAY;\r\n```\r\n\r\n### Backup Strategy\r\n\r\n```bash\r\n# Backup church databases\r\nfor db in $(mysql -e \"SELECT database_name FROM churches\" --skip-column-names); do\r\n    mysqldump $db > backups/${db}_$(date +%Y%m%d).sql\r\ndone\r\n\r\n# Backup uploaded files\r\ntar -czf uploads-backup-$(date +%Y%m%d).tar.gz uploads/\r\n\r\n# Backup OCR results\r\ntar -czf ocr-results-backup-$(date +%Y%m%d).tar.gz ocr-results/\r\n```\r\n\r\n---\r\n\r\n## Security Considerations\r\n\r\n### Data Isolation\r\n- Each church has its own isolated database\r\n- File storage is organized by church ID\r\n- API endpoints validate church access permissions\r\n\r\n### File Security\r\n- Uploaded files are stored outside web root\r\n- File types are validated and restricted\r\n- File sizes are limited (default: 10MB)\r\n\r\n### API Security\r\n- Church ID validation on all endpoints\r\n- User authentication required\r\n- Rate limiting on upload endpoints\r\n\r\n### Database Security\r\n- Dedicated database user with minimal privileges\r\n- No cross-church data access possible\r\n- Regular security updates and patches\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\nThe Multi-Tenant OCR System provides a comprehensive solution for Orthodox churches to digitize their historical records. With complete data isolation, multi-language support, and dual storage (database + filesystem), the system ensures both functionality and security.\r\n\r\nThe system is production-ready and actively processing OCR jobs with high accuracy across multiple languages and church jurisdictions.\r\n\r\nFor support or questions, refer to the debug scripts and monitoring tools provided in this documentation.\r\n\r\n---\r\n\r\n**Document Version**: 1.0  \r\n**Last Updated**: July 10, 2025  \r\n**System Status**: Production Ready ✅\r\n"
    },
    "complexity": {
      "totalLines": 690,
      "codeLines": 453,
      "commentLines": 102,
      "commentRatio": 0.1837837837837838,
      "averageLineLength": 34.39099099099099
    },
    "lastAnalyzed": "2025-07-28T07:19:58.266Z"
  },
  "contentHash": "96c968e7c0667f51352c30dd44b8737c26bd863bf7c6061304e8954a9a3c2770",
  "discoveredAt": "2025-07-28T07:19:58.266Z"
}