{
  "id": "a98eddc0e9f8",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/verify-headlines-setup.js",
  "relativePath": "server/scripts/verify-headlines-setup.js",
  "name": "verify-headlines-setup.js",
  "extension": ".js",
  "size": 10298,
  "modified": "2025-07-23T00:43:16.939Z",
  "created": "2025-07-23T00:43:14.415Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 289,
      "characters": 10186,
      "words": 840
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "readline",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 143
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 201
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 202
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 37,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n/**\r\n * Verify Orthodox Headlines Setup\r\n * Checks if all components are working together\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst readline = require('readline');\r\n\r\n/**\r\n * Prompt for database credentials\r\n */\r\nfunction promptCredentials() {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n\r\n    return new Promise((resolve) => {\r\n        const credentials = {};\r\n        \r\n        console.log('\\nüîê Database Connection for Verification');\r\n        console.log('======================================');\r\n        \r\n        rl.question('Database Host (localhost): ', (host) => {\r\n            credentials.host = host || 'localhost';\r\n            \r\n            rl.question('Database Port (3306): ', (port) => {\r\n                credentials.port = parseInt(port) || 3306;\r\n                \r\n                rl.question('Database Name (orthodoxmetrics_db): ', (database) => {\r\n                    credentials.database = database || 'orthodoxmetrics_db';\r\n                    \r\n                    rl.question('Database User (root): ', (user) => {\r\n                        credentials.user = user || 'root';\r\n                        \r\n                        rl.question('Database Password: '[REDACTED]'\\nüîç Verifying Database Setup...');\r\n        console.log('================================');\r\n        \r\n        // Create connection\r\n        connection = await mysql.createConnection({\r\n            host: credentials.host,\r\n            port: credentials.port,\r\n            user: credentials.user,\r\n            password: credentials.password,\r\n            database: credentials.database,\r\n            charset: 'utf8mb4'\r\n        });\r\n        \r\n        console.log('‚úÖ Database connection successful');\r\n        \r\n        // Check for headlines tables\r\n        const requiredTables = ['headlines_sources', 'headlines_categories', 'headlines_config', 'news_headlines'];\r\n        const existingTables = [];\r\n        \r\n        for (const table of requiredTables) {\r\n            const [tables] = await connection.execute(`\r\n                SELECT table_name \r\n                FROM information_schema.tables \r\n                WHERE table_schema = ? AND table_name = ?\r\n            `, [credentials.database, table]);\r\n            \r\n            if (tables.length > 0) {\r\n                existingTables.push(table);\r\n                console.log(`‚úÖ Table ${table} exists`);\r\n            } else {\r\n                console.log(`‚ùå Table ${table} missing`);\r\n            }\r\n        }\r\n        \r\n        if (existingTables.length === requiredTables.length) {\r\n            console.log('‚úÖ All required tables present');\r\n            \r\n            // Check for sample data\r\n            const [sources] = await connection.execute('SELECT COUNT(*) as count FROM headlines_sources');\r\n            const [categories] = await connection.execute('SELECT COUNT(*) as count FROM headlines_categories');\r\n            \r\n            console.log(`üìä Headlines sources: ${sources[0].count}`);\r\n            console.log(`üìä Headlines categories: ${categories[0].count}`);\r\n            \r\n            if (sources[0].count > 0 && categories[0].count > 0) {\r\n                console.log('‚úÖ Sample data is present');\r\n                \r\n                // Show some sample sources\r\n                const [sampleSources] = await connection.execute(`\r\n                    SELECT name, language, enabled FROM headlines_sources LIMIT 3\r\n                `);\r\n                \r\n                console.log('\\nüì∞ Sample Sources:');\r\n                sampleSources.forEach(source => {\r\n                    const status = source.enabled ? '‚úÖ' : '‚ùå';\r\n                    console.log(`   ${status} ${source.name} (${source.language})`);\r\n                });\r\n                \r\n                return true;\r\n            } else {\r\n                console.log('‚ö†Ô∏è Tables exist but no sample data found');\r\n                return false;\r\n            }\r\n        } else {\r\n            console.log('‚ùå Some required tables are missing');\r\n            console.log('\\nüí° To create missing tables, run:');\r\n            console.log('   mysql -u root -p orthodoxmetrics_db < server/database/headlines-config-schema.sql');\r\n            return false;\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Database verification failed:', error.message);\r\n        return false;\r\n    } finally {\r\n        if (connection) {\r\n            await connection.end();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Test the fetch script integration\r\n */\r\nasync function testFetchScript() {\r\n    console.log('\\nüß™ Testing Fetch Script Integration...');\r\n    console.log('======================================');\r\n    \r\n    const { spawn } = require('child_process');\r\n    \r\n    return new Promise((resolve) => {\r\n        const testProcess = spawn('node', ['scripts/fetch-headlines.js', '--test', '--use-db-config'], {\r\n            cwd: process.cwd(),\r\n            stdio: 'pipe'\r\n        });\r\n        \r\n        let output = '';\r\n        let errorOutput = '';\r\n        \r\n        testProcess.stdout.on('data', (data) => {\r\n            output += data.toString();\r\n        });\r\n        \r\n        testProcess.stderr.on('data', (data) => {\r\n            errorOutput += data.toString();\r\n        });\r\n        \r\n        testProcess.on('close', (code) => {\r\n            if (code === 0) {\r\n                console.log('‚úÖ Fetch script test completed successfully');\r\n                \r\n                // Show sample output\r\n                const lines = output.split('\\n').slice(0, 10);\r\n                console.log('\\nüìÑ Sample Output:');\r\n                lines.forEach(line => {\r\n                    if (line.trim()) {\r\n                        console.log(`   ${line.trim()}`);\r\n                    }\r\n                });\r\n                resolve(true);\r\n            } else {\r\n                console.log('‚ùå Fetch script test failed');\r\n                if (errorOutput) {\r\n                    console.log('\\n‚ùó Error Output:');\r\n                    console.log(errorOutput.substring(0, 500));\r\n                }\r\n                resolve(false);\r\n            }\r\n        });\r\n        \r\n        // Timeout after 30 seconds\r\n        setTimeout(() => {\r\n            testProcess.kill();\r\n            console.log('‚ö†Ô∏è Fetch script test timed out');\r\n            resolve(false);\r\n        }, 30000);\r\n    });\r\n}\r\n\r\n/**\r\n * Check web interface components\r\n */\r\nasync function checkWebInterface() {\r\n    console.log('\\nüåê Checking Web Interface Components...');\r\n    console.log('=======================================');\r\n    \r\n    const fs = require('fs');\r\n    const path = require('path');\r\n    \r\n    const requiredFiles = [\r\n        '../front-end/src/components/headlines/HeadlineSourcePicker.tsx',\r\n        '../routes/headlines-config.js',\r\n        '../database/headlines-config-schema.sql'\r\n    ];\r\n    \r\n    let allFilesExist = true;\r\n    \r\n    for (const file of requiredFiles) {\r\n        const filePath = path.join(__dirname, file);\r\n        if (fs.existsSync(filePath)) {\r\n            console.log(`‚úÖ ${path.basename(file)} exists`);\r\n        } else {\r\n            console.log(`‚ùå ${path.basename(file)} missing`);\r\n            allFilesExist = false;\r\n        }\r\n    }\r\n    \r\n    if (allFilesExist) {\r\n        console.log('‚úÖ All web interface files present');\r\n        return true;\r\n    } else {\r\n        console.log('‚ùå Some web interface files are missing');\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Main verification function\r\n */\r\nasync function main() {\r\n    console.log('üóûÔ∏è Orthodox Headlines - System Verification');\r\n    console.log('============================================');\r\n    \r\n    try {\r\n        // Step 1: Check web interface files\r\n        const webOk = await checkWebInterface();\r\n        \r\n        // Step 2: Check database\r\n        const credentials = await promptCredentials();\r\n        const dbOk = await verifyDatabase(credentials);\r\n        \r\n        // Step 3: Test fetch script (only if database is OK)\r\n        let fetchOk = false;\r\n        if (dbOk) {\r\n            fetchOk = await testFetchScript();\r\n        }\r\n        \r\n        // Summary\r\n        console.log('\\nüìä Verification Summary');\r\n        console.log('=======================');\r\n        console.log(`üåê Web Interface: ${webOk ? '‚úÖ OK' : '‚ùå Issues'}`);\r\n        console.log(`üóÑÔ∏è Database Setup: ${dbOk ? '‚úÖ OK' : '‚ùå Issues'}`);\r\n        console.log(`üì∞ Fetch Script: ${fetchOk ? '‚úÖ OK' : '‚ùå Issues'}`);\r\n        \r\n        if (webOk && dbOk && fetchOk) {\r\n            console.log('\\nüéâ System Verification: ‚úÖ ALL SYSTEMS GO!');\r\n            console.log('üåê Access your headlines configuration at:');\r\n            console.log('   ‚Üí /admin/headlines-config');\r\n            console.log('\\nüöÄ Ready to aggregate Orthodox news!');\r\n        } else {\r\n            console.log('\\n‚ö†Ô∏è System Verification: Issues detected');\r\n            \r\n            if (!dbOk) {\r\n                console.log('\\nüí° Database Issues:');\r\n                console.log('   ‚Ä¢ Run: mysql -u root -p orthodoxmetrics_db < server/database/headlines-config-schema.sql');\r\n                console.log('   ‚Ä¢ Verify database permissions');\r\n            }\r\n            \r\n            if (!fetchOk && dbOk) {\r\n                console.log('\\nüí° Fetch Script Issues:');\r\n                console.log('   ‚Ä¢ Check Node.js dependencies: npm install rss-parser axios cheerio');\r\n                console.log('   ‚Ä¢ Verify network connectivity for RSS feeds');\r\n            }\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Verification failed:', error.message);\r\n        process.exit(1);\r\n    }\r\n}\r\n\r\n// Run if executed directly\r\nif (require.main === module) {\r\n    main();\r\n} "
    },
    "complexity": {
      "totalLines": 289,
      "codeLines": 209,
      "commentLines": 31,
      "commentRatio": 0.12916666666666668,
      "averageLineLength": 39.420833333333334
    },
    "lastAnalyzed": "2025-07-28T07:20:01.092Z"
  },
  "contentHash": "6a9089b91258c95bfde56146cd5601128043da50c51dabbf0096dabcbffdc4ad",
  "discoveredAt": "2025-07-28T07:20:01.093Z"
}