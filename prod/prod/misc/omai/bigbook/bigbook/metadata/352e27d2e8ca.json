{
  "id": "352e27d2e8ca",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/churches.js",
  "relativePath": "server/routes/churches.js",
  "name": "churches.js",
  "extension": ".js",
  "size": 17843,
  "modified": "2025-07-24T19:33:12.834Z",
  "created": "2025-07-09T00:48:38.478Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 557,
      "characters": 17791,
      "words": 1799
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 153,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 236,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 360,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 498,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 551,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/routes/churches.js - REFACTORED for API v2 consistency\r\nconst express = require('express');\r\nconst { promisePool } = require('../../config/db');\r\nconst { requireAuth, requireRole } = require('../middleware/auth');\r\nconst { cleanRecords, cleanRecord } = require('../utils/dateFormatter');\r\nconst { validateChurchData, sanitizeChurchData, generateChurchId } = require('../utils/churchValidation');\r\n\r\nconst router = express.Router();\r\n\r\n// Create middleware using requireRole - allows admin, super_admin, and manager access\r\nconst requireChurchAccess = requireRole(['admin', 'super_admin', 'manager']);\r\n\r\n/**\r\n * Standard API v2 response wrapper\r\n */\r\nfunction apiResponse(success, data = null, error = null, meta = null) {\r\n  const response = { success };\r\n  if (data !== null) response.data = data;\r\n  if (error !== null) response.error = error;\r\n  if (meta !== null) response.meta = meta;\r\n  return response;\r\n}\r\n\r\n/**\r\n * Validate church access for user - ensures proper church_id scoping\r\n */\r\nfunction validateChurchAccess(user, churchId = null) {\r\n  // Super admins can access all churches\r\n  if (user.role === 'super_admin') {\r\n    return { allowed: true };\r\n  }\r\n\r\n  // Admins can access churches (allow access even without church assignment for Records Management)\r\n  if (user.role === 'admin') {\r\n    // If no church_id specified, allow access to see available churches\r\n    if (!churchId) {\r\n      return { allowed: true, church_id: user.church_id };\r\n    }\r\n\r\n    // If church_id specified, check if user has access to that specific church\r\n    if (!user.church_id) {\r\n      return { allowed: false, reason: 'Admin user has no church assignment' };\r\n    }\r\n    if (parseInt(churchId) !== user.church_id) {\r\n      return { allowed: false, reason: 'Access denied to church outside your assignment' };\r\n    }\r\n    return { allowed: true, church_id: user.church_id };\r\n  }\r\n\r\n  // Managers can access their assigned church only\r\n  if (user.role === 'manager') {\r\n    // If no church_id specified, allow access to see their assigned church\r\n    if (!churchId) {\r\n      return { allowed: true, church_id: user.church_id };\r\n    }\r\n\r\n    // If church_id specified, check if user has access to that specific church\r\n    if (!user.church_id) {\r\n      return { allowed: false, reason: 'Manager user has no church assignment' };\r\n    }\r\n    if (parseInt(churchId) !== user.church_id) {\r\n      return { allowed: false, reason: 'Access denied to church outside your assignment' };\r\n    }\r\n    return { allowed: true, church_id: user.church_id };\r\n  }\r\n\r\n  return { allowed: false, reason: 'Insufficient role for church management' };\r\n}\r\n\r\n// GET /api/churches - Get all churches (admin, super_admin, and manager roles)\r\nrouter.get('/', requireAuth, requireChurchAccess, async (req, res) => {\r\n  try {\r\n    console.log('üîç Churches GET endpoint - User:', req.user?.email, 'Role:', req.user?.role);\r\n\r\n    // üîß SAFETY CHECK: Ensure req.user exists (should be set by auth middleware)\r\n    if (!req.user) {\r\n      console.error('‚ùå req.user is missing after auth middleware');\r\n      return res.status(401).json(apiResponse(false, null, {\r\n        message: 'Authentication error - user context missing',\r\n        code: 'USER_CONTEXT_MISSING'\r\n      }));\r\n    }\r\n\r\n    // Validate user access\r\n    const access = validateChurchAccess(req.user);\r\n    if (!access.allowed) {\r\n      console.log('‚ùå Access denied:', access.reason);\r\n      return res.status(403).json(apiResponse(false, null, {\r\n        message: 'Access denied',\r\n        code: 'INSUFFICIENT_PERMISSIONS',\r\n        details: access.reason\r\n      }));\r\n    }\r\n\r\n    // Build query based on user permissions\r\n    let query = `\r\n      SELECT \r\n        id,\r\n        name,\r\n        email,\r\n        phone,\r\n        address,\r\n        city,\r\n        state_province,\r\n        postal_code,\r\n        country,\r\n        preferred_language,\r\n        timezone,\r\n        currency,\r\n        tax_id,\r\n        website,\r\n        description_multilang,\r\n        settings,\r\n        is_active,\r\n        database_name,\r\n        setup_complete,\r\n        created_at,\r\n        updated_at\r\n      FROM churches \r\n      WHERE is_active = 1\r\n    `;\r\n\r\n    const params = [];\r\n\r\n    // If admin or manager (not super_admin), restrict to their church only\r\n    if ((req.user.role === 'admin' || req.user.role === 'manager') && access.church_id) {\r\n      query += ' AND id = ?';\r\n      params.push(access.church_id);\r\n    }\r\n\r\n    query += ' ORDER BY name ASC';\r\n\r\n    // Execute query against orthodoxmetrics_db (via promisePool)\r\n    const [churches] = await promisePool.query(query, params);\r\n\r\n    console.log(`‚úÖ Found ${churches.length} churches from orthodoxmetrics_db`);\r\n\r\n    // Clean records using dateFormatter\r\n    const cleanedChurches = cleanRecords(churches);\r\n\r\n    const response = apiResponse(true, { churches: cleanedChurches }, null, {\r\n      total: churches.length,\r\n      user_role: req.user.role,\r\n      access_level: req.user.role === 'super_admin' ? 'all_churches' : 'assigned_church'\r\n    });\r\n\r\n    res.json(response);\r\n  } catch (error) {\r\n    console.error('‚ùå Error fetching churches:', error);\r\n    res.status(500).json(apiResponse(false, null, {\r\n      message: 'Failed to fetch churches',\r\n      code: 'DATABASE_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    }));\r\n  }\r\n});\r\n\r\n// GET /api/churches/:id - Get church by ID\r\nrouter.get('/:id', requireAuth, requireChurchAccess, async (req, res) => {\r\n  try {\r\n    const churchId = parseInt(req.params.id);\r\n\r\n    console.log('üîç GET church by ID - User:', req.user?.email, 'Church ID:', churchId);\r\n\r\n    // üîß SAFETY CHECK: Ensure req.user exists (should be set by auth middleware)\r\n    if (!req.user) {\r\n      console.error('‚ùå req.user is missing after auth middleware');\r\n      return res.status(401).json(apiResponse(false, null, {\r\n        message: 'Authentication error - user context missing',\r\n        code: 'USER_CONTEXT_MISSING'\r\n      }));\r\n    }\r\n\r\n    if (isNaN(churchId)) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'Invalid church ID format',\r\n        code: 'INVALID_CHURCH_ID'\r\n      }));\r\n    }\r\n\r\n    // Validate user access to this specific church\r\n    const access = validateChurchAccess(req.user, churchId);\r\n    if (!access.allowed) {\r\n      console.log('‚ùå Access denied to church:', access.reason);\r\n      return res.status(403).json(apiResponse(false, null, {\r\n        message: 'Access denied',\r\n        code: 'INSUFFICIENT_PERMISSIONS',\r\n        details: access.reason\r\n      }));\r\n    }\r\n\r\n    // Query orthodoxmetrics_db for church details\r\n    const [churches] = await promisePool.query(`\r\n      SELECT \r\n        id,\r\n        name,\r\n        email,\r\n        phone,\r\n        address,\r\n        city,\r\n        state_province,\r\n        postal_code,\r\n        country,\r\n        preferred_language,\r\n        timezone,\r\n        currency,\r\n        tax_id,\r\n        website,\r\n        description_multilang,\r\n        is_active,\r\n        database_name,\r\n        setup_complete,\r\n        created_at,\r\n        updated_at\r\n      FROM churches \r\n      WHERE id = ? AND is_active = 1\r\n    `, [churchId]);\r\n\r\n    if (churches.length === 0) {\r\n      console.log('‚ùå Church not found with ID:', churchId);\r\n      return res.status(404).json(apiResponse(false, null, {\r\n        message: 'Church not found',\r\n        code: 'CHURCH_NOT_FOUND'\r\n      }));\r\n    }\r\n\r\n    console.log('‚úÖ Church found:', churches[0].name);\r\n    const cleanedChurch = cleanRecord(churches[0]);\r\n\r\n    res.json(apiResponse(true, { church: cleanedChurch }));\r\n  } catch (error) {\r\n    console.error('‚ùå Error fetching church by ID:', error);\r\n    res.status(500).json(apiResponse(false, null, {\r\n      message: 'Failed to fetch church',\r\n      code: 'DATABASE_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    }));\r\n  }\r\n});\r\n\r\n// POST /api/churches/create - Create new church (super_admin only)\r\nrouter.post('/create', requireAuth, requireRole(['super_admin']), async (req, res) => {\r\n  try {\r\n    console.log('üèõÔ∏è Creating new church - User:', req.user?.email);\r\n    console.log('üìù Church data received:', req.body);\r\n\r\n    // Validate church data\r\n    const validation = validateChurchData(req.body);\r\n    if (!validation.isValid) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'Validation failed',\r\n        code: 'VALIDATION_ERROR',\r\n        details: validation.errors,\r\n        warnings: validation.warnings\r\n      }));\r\n    }\r\n\r\n    // Sanitize church data\r\n    const churchData = sanitizeChurchData(req.body);\r\n    console.log('üßπ Sanitized church data');\r\n\r\n    // Check for existing church name in orthodoxmetrics_db\r\n    const [existingChurch] = await promisePool.query(\r\n      'SELECT id FROM churches WHERE name = ?',\r\n      [churchData.name]\r\n    );\r\n\r\n    if (existingChurch.length > 0) {\r\n      return res.status(409).json(apiResponse(false, null, {\r\n        message: 'Church name already exists',\r\n        code: 'DUPLICATE_CHURCH_NAME',\r\n        field: 'name'\r\n      }));\r\n    }\r\n\r\n    // Check for existing email\r\n    const [existingEmail] = await promisePool.query(\r\n      'SELECT id FROM churches WHERE email = ?',\r\n      [churchData.email]\r\n    );\r\n\r\n    if (existingEmail.length > 0) {\r\n      return res.status(409).json(apiResponse(false, null, {\r\n        message: 'Email already in use',\r\n        code: 'DUPLICATE_EMAIL',\r\n        field: 'email'\r\n      }));\r\n    }\r\n\r\n    // Generate unique church identifier\r\n    const church_id = generateChurchId(churchData.name);\r\n\r\n    // Insert new church into orthodoxmetrics_db.churches\r\n    const [result] = await promisePool.query(`\r\n      INSERT INTO churches (\r\n        name,\r\n        email,\r\n        phone,\r\n        website,\r\n        address,\r\n        city,\r\n        state_province,\r\n        postal_code,\r\n        country,\r\n        description_multilang,\r\n        preferred_language,\r\n        timezone,\r\n        currency,\r\n        tax_id,\r\n        is_active,\r\n        database_name,\r\n        created_by,\r\n        setup_complete\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `, [\r\n      churchData.name,\r\n      churchData.email,\r\n      churchData.phone || null,\r\n      churchData.website || null,\r\n      churchData.address || null,\r\n      churchData.city || null,\r\n      churchData.state_province || null,\r\n      churchData.postal_code || null,\r\n      churchData.country || 'US',\r\n      churchData.description || null,\r\n      churchData.preferred_language || 'en',\r\n      churchData.timezone || 'America/New_York',\r\n      churchData.currency || 'USD',\r\n      churchData.tax_id || null,\r\n      true, // is_active\r\n      null, // database_name (will be set if/when church-specific DB is created)\r\n      req.user.id, // created_by\r\n      false // setup_complete\r\n    ]);\r\n\r\n    const newChurchId = result.insertId;\r\n    console.log('‚úÖ Church created with ID:', newChurchId);\r\n\r\n    // Get the created church for response\r\n    const [newChurch] = await promisePool.query(\r\n      'SELECT * FROM churches WHERE id = ?',\r\n      [newChurchId]\r\n    );\r\n\r\n    const cleanedChurch = cleanRecord(newChurch[0]);\r\n\r\n    res.status(201).json(apiResponse(true, {\r\n      church: cleanedChurch,\r\n      message: 'Church created successfully'\r\n    }, null, {\r\n      church_id: newChurchId,\r\n      created_by: req.user.email\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error creating church:', error);\r\n    res.status(500).json(apiResponse(false, null, {\r\n      message: 'Failed to create church',\r\n      code: 'DATABASE_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    }));\r\n  }\r\n});\r\n\r\n// PUT /api/churches/:id - Update church (admin for own church, super_admin for any)\r\nrouter.put('/:id', requireAuth, requireChurchAccess, async (req, res) => {\r\n  try {\r\n    const churchId = parseInt(req.params.id);\r\n\r\n    console.log('üîß Updating church ID:', churchId, 'User:', req.user?.email);\r\n\r\n    if (isNaN(churchId)) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'Invalid church ID format',\r\n        code: 'INVALID_CHURCH_ID'\r\n      }));\r\n    }\r\n\r\n    // Validate user access to this church\r\n    const access = validateChurchAccess(req.user, churchId);\r\n    if (!access.allowed) {\r\n      return res.status(403).json(apiResponse(false, null, {\r\n        message: 'Access denied',\r\n        code: 'INSUFFICIENT_PERMISSIONS',\r\n        details: access.reason\r\n      }));\r\n    }\r\n\r\n    // Validate update data\r\n    const validation = validateChurchData(req.body, true); // true = update mode\r\n    if (!validation.isValid) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'Validation failed',\r\n        code: 'VALIDATION_ERROR',\r\n        details: validation.errors\r\n      }));\r\n    }\r\n\r\n    // Sanitize update data\r\n    const updateData = sanitizeChurchData(req.body, true);\r\n\r\n    // Check if church exists\r\n    const [existing] = await promisePool.query(\r\n      'SELECT id, name, email FROM churches WHERE id = ? AND is_active = 1',\r\n      [churchId]\r\n    );\r\n\r\n    if (existing.length === 0) {\r\n      return res.status(404).json(apiResponse(false, null, {\r\n        message: 'Church not found',\r\n        code: 'CHURCH_NOT_FOUND'\r\n      }));\r\n    }\r\n\r\n    // Check for name conflicts (if name is being changed)\r\n    if (updateData.name && updateData.name !== existing[0].name) {\r\n      const [nameConflict] = await promisePool.query(\r\n        'SELECT id FROM churches WHERE name = ? AND id != ?',\r\n        [updateData.name, churchId]\r\n      );\r\n\r\n      if (nameConflict.length > 0) {\r\n        return res.status(409).json(apiResponse(false, null, {\r\n          message: 'Church name already exists',\r\n          code: 'DUPLICATE_CHURCH_NAME'\r\n        }));\r\n      }\r\n    }\r\n\r\n    // Check for email conflicts (if email is being changed)\r\n    if (updateData.email && updateData.email !== existing[0].email) {\r\n      const [emailConflict] = await promisePool.query(\r\n        'SELECT id FROM churches WHERE email = ? AND id != ?',\r\n        [updateData.email, churchId]\r\n      );\r\n\r\n      if (emailConflict.length > 0) {\r\n        return res.status(409).json(apiResponse(false, null, {\r\n          message: 'Email already in use',\r\n          code: 'DUPLICATE_EMAIL'\r\n        }));\r\n      }\r\n    }\r\n\r\n    // Build dynamic update query\r\n    const updateFields = [];\r\n    const updateValues = [];\r\n\r\n    Object.keys(updateData).forEach(key => {\r\n      if (updateData[key] !== undefined) {\r\n        updateFields.push(`${key} = ?`);\r\n        updateValues.push(updateData[key]);\r\n      }\r\n    });\r\n\r\n    if (updateFields.length === 0) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'No valid fields to update',\r\n        code: 'NO_UPDATE_DATA'\r\n      }));\r\n    }\r\n\r\n    // Add updated_at and updated_by\r\n    updateFields.push('updated_at = CURRENT_TIMESTAMP');\r\n    updateFields.push('updated_by = ?');\r\n    updateValues.push(req.user.id);\r\n    updateValues.push(churchId); // for WHERE clause\r\n\r\n    // Execute update\r\n    await promisePool.query(\r\n      `UPDATE churches SET ${updateFields.join(', ')} WHERE id = ?`,\r\n      updateValues\r\n    );\r\n\r\n    // Get updated church\r\n    const [updatedChurch] = await promisePool.query(\r\n      'SELECT * FROM churches WHERE id = ?',\r\n      [churchId]\r\n    );\r\n\r\n    const cleanedChurch = cleanRecord(updatedChurch[0]);\r\n\r\n    console.log('‚úÖ Church updated successfully');\r\n\r\n    res.json(apiResponse(true, {\r\n      church: cleanedChurch,\r\n      message: 'Church updated successfully'\r\n    }, null, {\r\n      updated_by: req.user.email,\r\n      fields_updated: Object.keys(updateData)\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error updating church:', error);\r\n    res.status(500).json(apiResponse(false, null, {\r\n      message: 'Failed to update church',\r\n      code: 'DATABASE_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    }));\r\n  }\r\n});\r\n\r\n// DELETE /api/churches/:id - Soft delete church (super_admin only)\r\nrouter.delete('/:id', requireAuth, requireRole(['super_admin']), async (req, res) => {\r\n  try {\r\n    const churchId = parseInt(req.params.id);\r\n\r\n    console.log('üóëÔ∏è Soft deleting church ID:', churchId, 'User:', req.user?.email);\r\n\r\n    if (isNaN(churchId)) {\r\n      return res.status(400).json(apiResponse(false, null, {\r\n        message: 'Invalid church ID format',\r\n        code: 'INVALID_CHURCH_ID'\r\n      }));\r\n    }\r\n\r\n    // Check if church exists\r\n    const [existing] = await promisePool.query(\r\n      'SELECT id, name FROM churches WHERE id = ? AND is_active = 1',\r\n      [churchId]\r\n    );\r\n\r\n    if (existing.length === 0) {\r\n      return res.status(404).json(apiResponse(false, null, {\r\n        message: 'Church not found',\r\n        code: 'CHURCH_NOT_FOUND'\r\n      }));\r\n    }\r\n\r\n    // Soft delete (set is_active = 0)\r\n    await promisePool.query(\r\n      'UPDATE churches SET is_active = 0, updated_at = CURRENT_TIMESTAMP, updated_by = ? WHERE id = ?',\r\n      [req.user.id, churchId]\r\n    );\r\n\r\n    console.log('‚úÖ Church soft deleted successfully');\r\n\r\n    res.json(apiResponse(true, {\r\n      message: 'Church deleted successfully',\r\n      church_name: existing[0].name\r\n    }, null, {\r\n      deleted_by: req.user.email,\r\n      church_id: churchId\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error deleting church:', error);\r\n    res.status(500).json(apiResponse(false, null, {\r\n      message: 'Failed to delete church',\r\n      code: 'DATABASE_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    }));\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 557,
      "codeLines": 432,
      "commentLines": 48,
      "commentRatio": 0.1,
      "averageLineLength": 35.74791666666667
    },
    "lastAnalyzed": "2025-07-28T07:20:00.438Z"
  },
  "contentHash": "f97ac76263f39e315f3e8e221d0e80c609e94d8d2d70e1696af5e097d99d9f7a",
  "discoveredAt": "2025-07-28T07:20:00.438Z"
}