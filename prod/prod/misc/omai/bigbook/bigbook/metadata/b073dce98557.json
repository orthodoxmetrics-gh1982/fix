{
  "id": "b073dce98557",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/07-09-25/FRONTEND_ARCHITECTURE.md",
  "relativePath": "docs/archive/07-09-25/FRONTEND_ARCHITECTURE.md",
  "name": "FRONTEND_ARCHITECTURE.md",
  "extension": ".md",
  "size": 9304,
  "modified": "2025-07-09T04:32:16.331Z",
  "created": "2025-07-09T04:32:16.331Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 327,
      "characters": 9110,
      "words": 1206
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 7
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 144,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Frontend Architecture - Orthodox Church Management System\r\n\r\n## Overview\r\nThe Orthodox Church Management System frontend is built with React, TypeScript, and Vite, providing a modern, responsive, and intuitive interface for managing Orthodox church operations.\r\n\r\n## Technology Stack\r\n\r\n### Core Technologies\r\n- **React 18** - Component-based UI library\r\n- **TypeScript** - Type-safe JavaScript\r\n- **Vite** - Fast build tool and development server\r\n- **React Router** - Client-side routing\r\n- **Axios** - HTTP client for API communication\r\n- **React Hook Form** - Form state management\r\n- **React Query/TanStack Query** - Server state management\r\n- **Tailwind CSS** - Utility-first CSS framework\r\n\r\n### UI Components\r\n- **Radix UI** - Accessible component primitives\r\n- **Lucide React** - Icon library\r\n- **React Hot Toast** - Toast notifications\r\n- **React DatePicker** - Date selection components\r\n- **React Select** - Enhanced select components\r\n\r\n### Development Tools\r\n- **ESLint** - Code linting\r\n- **Prettier** - Code formatting\r\n- **Vitest** - Unit testing\r\n- **React Testing Library** - Component testing\r\n- **Storybook** - Component documentation\r\n\r\n## Project Structure\r\n\r\n```\r\nsrc/\r\n├── components/           # Reusable UI components\r\n│   ├── ui/              # Base UI components (buttons, inputs, etc.)\r\n│   ├── forms/           # Form components\r\n│   ├── layout/          # Layout components\r\n│   ├── navigation/      # Navigation components\r\n│   └── modals/          # Modal components\r\n├── pages/               # Page components\r\n│   ├── auth/           # Authentication pages\r\n│   ├── dashboard/      # Dashboard pages\r\n│   ├── churches/       # Church management pages\r\n│   ├── users/          # User management pages\r\n│   ├── notes/          # Notes management pages\r\n│   ├── calendar/       # Calendar pages\r\n│   ├── kanban/         # Kanban board pages\r\n│   ├── invoices/       # Invoice management pages\r\n│   ├── ocr/            # OCR processing pages\r\n│   └── admin/          # Admin panel pages\r\n├── hooks/              # Custom React hooks\r\n├── services/           # API service functions\r\n├── utils/              # Utility functions\r\n├── types/              # TypeScript type definitions\r\n├── constants/          # Application constants\r\n├── contexts/           # React contexts\r\n├── assets/             # Static assets\r\n└── styles/             # Global styles\r\n```\r\n\r\n## Architecture Patterns\r\n\r\n### Component Architecture\r\n- **Atomic Design**: Components organized by complexity (atoms, molecules, organisms)\r\n- **Composition over Inheritance**: Favor component composition\r\n- **Single Responsibility**: Each component has one clear purpose\r\n- **Props Interface**: Clear TypeScript interfaces for all props\r\n\r\n### State Management\r\n- **Local State**: React useState for component-level state\r\n- **Global State**: React Context for shared state\r\n- **Server State**: React Query for server data caching\r\n- **Form State**: React Hook Form for form management\r\n\r\n### Data Flow\r\n```\r\nAPI Service → React Query → Components → User Interface\r\n     ↑                                        ↓\r\nAuthentication Context ← User Actions ← Event Handlers\r\n```\r\n\r\n## Key Components\r\n\r\n### Layout Components\r\n- **MainLayout**: Primary application layout\r\n- **Sidebar**: Navigation sidebar with menu items\r\n- **Header**: Top navigation bar with user info\r\n- **Footer**: Application footer\r\n\r\n### Form Components\r\n- **UserForm**: User creation/editing form\r\n- **ChurchForm**: Church management form\r\n- **NoteForm**: Note creation/editing form\r\n- **InvoiceForm**: Invoice generation form\r\n- **CalendarEventForm**: Calendar event form\r\n\r\n### Data Components\r\n- **UserTable**: User listing with pagination\r\n- **ChurchGrid**: Church directory display\r\n- **NotesGrid**: Notes management grid\r\n- **KanbanBoard**: Task management board\r\n- **CalendarView**: Calendar event display\r\n\r\n### UI Components\r\n- **Button**: Various button styles and states\r\n- **Input**: Text input with validation\r\n- **Select**: Dropdown selection component\r\n- **Modal**: Overlay modal dialog\r\n- **Toast**: Notification messages\r\n- **Loading**: Loading states and spinners\r\n\r\n## Authentication Flow\r\n\r\n### Login Process\r\n1. User enters credentials\r\n2. Frontend validates input\r\n3. API authentication request\r\n4. JWT token received and stored\r\n5. User redirected to dashboard\r\n6. Authentication context updated\r\n\r\n### Protected Routes\r\n- Route guards check authentication status\r\n- Redirect to login if not authenticated\r\n- Role-based access control for admin features\r\n\r\n### Token Management\r\n- Automatic token refresh\r\n- Secure token storage\r\n- Logout on token expiration\r\n\r\n## API Integration\r\n\r\n### Service Layer\r\n```typescript\r\n// Example API service structure\r\nclass ApiService {\r\n  private client: AxiosInstance;\r\n  \r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: process.env.[REDACTED],\r\n      timeout: 10000,\r\n    });\r\n    \r\n    this.setupInterceptors();\r\n  }\r\n  \r\n  private setupInterceptors() {\r\n    // Request interceptor for auth headers\r\n    // Response interceptor for error handling\r\n  }\r\n}\r\n```\r\n\r\n### Error Handling\r\n- Global error boundary for React errors\r\n- API error interceptors\r\n- User-friendly error messages\r\n- Retry logic for failed requests\r\n\r\n## Responsive Design\r\n\r\n### Breakpoints\r\n- **Mobile**: < 768px\r\n- **Tablet**: 768px - 1024px\r\n- **Desktop**: > 1024px\r\n\r\n### Layout Strategy\r\n- Mobile-first approach\r\n- Flexible grid system\r\n- Responsive typography\r\n- Touch-friendly interfaces\r\n\r\n## Performance Optimization\r\n\r\n### Code Splitting\r\n- Route-based code splitting\r\n- Dynamic imports for heavy components\r\n- Lazy loading for non-critical features\r\n\r\n### Bundle Optimization\r\n- Tree shaking for unused code\r\n- Asset optimization\r\n- Compression and minification\r\n- CDN integration for static assets\r\n\r\n### Runtime Performance\r\n- React.memo for expensive components\r\n- useMemo and useCallback for optimization\r\n- Virtual scrolling for large lists\r\n- Image lazy loading\r\n\r\n## Security Considerations\r\n\r\n### Input Validation\r\n- Client-side validation with React Hook Form\r\n- Server-side validation confirmation\r\n- XSS prevention measures\r\n- CSRF protection\r\n\r\n### Authentication Security\r\n- Secure token storage\r\n- Automatic logout on inactivity\r\n- Session management\r\n- Role-based access control\r\n\r\n## Testing Strategy\r\n\r\n### Unit Testing\r\n- Component testing with React Testing Library\r\n- Hook testing with React Hooks Testing Library\r\n- Utility function testing\r\n- Mock API responses\r\n\r\n### Integration Testing\r\n- User flow testing\r\n- API integration testing\r\n- Form submission testing\r\n- Navigation testing\r\n\r\n### E2E Testing\r\n- Critical path testing\r\n- Cross-browser testing\r\n- Mobile device testing\r\n- Accessibility testing\r\n\r\n## Development Workflow\r\n\r\n### Local Development\r\n1. Clone repository\r\n2. Install dependencies: `npm install`\r\n3. Set up environment variables\r\n4. Start development server: `npm run dev`\r\n5. Access application at `http://localhost:5173`\r\n\r\n### Build Process\r\n- **Development**: Hot module replacement\r\n- **Production**: Optimized build with minification\r\n- **Preview**: Local production build preview\r\n\r\n### Environment Configuration\r\n```typescript\r\n// Environment variables\r\ninterface ImportMetaEnv {\r\n  readonly VITE_API_URL: string;\r\n  readonly VITE_APP_NAME: string;\r\n  readonly VITE_VERSION: string;\r\n}\r\n```\r\n\r\n## Accessibility\r\n\r\n### WCAG Compliance\r\n- Keyboard navigation support\r\n- Screen reader compatibility\r\n- High contrast mode support\r\n- Focus management\r\n\r\n### Implementation\r\n- Semantic HTML elements\r\n- ARIA labels and descriptions\r\n- Color contrast compliance\r\n- Alt text for images\r\n\r\n## Future Enhancements\r\n\r\n### Planned Features\r\n- Progressive Web App (PWA) capabilities\r\n- Offline functionality\r\n- Real-time notifications\r\n- Advanced data visualization\r\n- Multi-language support\r\n\r\n### Technical Improvements\r\n- Micro-frontend architecture\r\n- GraphQL integration\r\n- Service worker implementation\r\n- Advanced caching strategies\r\n\r\n## Deployment\r\n\r\n### Build Configuration\r\n- Production environment variables\r\n- Asset optimization\r\n- Bundle analysis\r\n- Performance monitoring\r\n\r\n### Hosting Options\r\n- Static hosting (Vercel, Netlify)\r\n- CDN integration\r\n- Custom domain configuration\r\n- SSL certificate setup\r\n\r\n## Monitoring and Analytics\r\n\r\n### Performance Monitoring\r\n- Core Web Vitals tracking\r\n- Bundle size monitoring\r\n- Runtime performance metrics\r\n- User interaction tracking\r\n\r\n### Error Tracking\r\n- Error logging and reporting\r\n- User feedback collection\r\n- Performance issue detection\r\n- Crash reporting\r\n\r\n## Documentation\r\n\r\n### Code Documentation\r\n- JSDoc comments for functions\r\n- TypeScript interfaces documentation\r\n- Component prop documentation\r\n- README files for major features\r\n\r\n### User Documentation\r\n- User guide for administrators\r\n- Feature documentation\r\n- Troubleshooting guides\r\n- FAQ section\r\n\r\n---\r\n\r\nThis frontend architecture provides a robust, scalable, and maintainable foundation for the Orthodox Church Management System, ensuring excellent user experience and developer productivity."
    },
    "complexity": {
      "totalLines": 327,
      "codeLines": 206,
      "commentLines": 60,
      "commentRatio": 0.22556390977443608,
      "averageLineLength": 32.76315789473684
    },
    "lastAnalyzed": "2025-07-28T07:19:57.877Z"
  },
  "contentHash": "e9440a86e022e8b1896baa750a0cac7b9ca967046cce59d63a9e6829dd99ba8d",
  "discoveredAt": "2025-07-28T07:19:57.877Z"
}