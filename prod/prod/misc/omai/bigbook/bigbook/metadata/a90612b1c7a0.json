{
  "id": "a90612b1c7a0",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/aa6c9efacb03.json",
  "relativePath": "bigbook/metadata/aa6c9efacb03.json",
  "name": "aa6c9efacb03.json",
  "extension": ".json",
  "size": 4689,
  "modified": "2025-07-26T04:17:10.834Z",
  "created": "2025-07-26T04:17:10.834Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 4663,
      "words": 385
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"aa6c9efacb03\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/check-current-sessions.js\",\n  \"relativePath\": \"server/debug/check-current-sessions.js\",\n  \"name\": \"check-current-sessions.js\",\n  \"extension\": \".js\",\n  \"size\": 2999,\n  \"modified\": \"2025-07-24T14:50:26.344Z\",\n  \"created\": \"2025-07-24T14:50:26.344Z\",\n  \"classification\": {\n    \"type\": \"Troubleshooting Utilities\",\n    \"category\": \"Diagnostic Tools\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 87,\n      \"characters\": 2973,\n      \"words\": 276\n    },\n    \"classification\": {\n      \"type\": \"Troubleshooting Utilities\",\n      \"category\": \"Diagnostic Tools\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 8\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 19,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"#!/usr/bin/env node\\r\\n\\r\\n/**\\r\\n * Check Current Sessions Script\\r\\n * Identifies what sessions exist and their content\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\n\\r\\nasync function checkCurrentSessions() {\\r\\n  try {\\r\\n    console.log('üîç CHECKING CURRENT SESSIONS');\\r\\n    console.log('============================');\\r\\n    \\r\\n    // Connect to database\\r\\n    const connection = await mysql.createConnection({\\r\\n      host: 'localhost',\\r\\n      user: 'orthodoxapps',\\r\\n      password: '[REDACTED]',\\r\\n      database: 'orthodoxmetrics_db'\\r\\n    });\\r\\n    \\r\\n    // Check total sessions\\r\\n    const [sessions] = await connection.execute('SELECT COUNT(*) as count FROM sessions');\\r\\n    console.log(`üìä Total active sessions: ${sessions[0].count}`);\\r\\n    \\r\\n    if (sessions[0].count > 0) {\\r\\n      // Get session details\\r\\n      const [sessionData] = await connection.execute(`\\r\\n        SELECT \\r\\n          session_id, \\r\\n          expires, \\r\\n          LENGTH(data) as data_length,\\r\\n          SUBSTRING(data, 1, 200) as data_preview\\r\\n        FROM sessions \\r\\n        ORDER BY expires DESC\\r\\n      `);\\r\\n      \\r\\n      console.log('\\\\nüìã Session Details:');\\r\\n      sessionData.forEach((session, i) => {\\r\\n        console.log(`\\\\n${i+1}. Session ID: ${session.session_id.substring(0, 20)}...`);\\r\\n        console.log(`   Expires: ${new Date(session.expires * 1000).toISOString()}`);\\r\\n        console.log(`   Data length: ${session.data_length} bytes`);\\r\\n        console.log(`   Data preview: ${session.data_preview}`);\\r\\n        \\r\\n        // Try to parse session data\\r\\n        try {\\r\\n          const sessionObj = JSON.parse(session.data_preview);\\r\\n          if (sessionObj.user) {\\r\\n            console.log(`   üë§ User: ${sessionObj.user.email || 'No email'} (${sessionObj.user.role || 'No role'})`);\\r\\n          } else {\\r\\n            console.log(`   üë§ User: NO USER DATA`);\\r\\n          }\\r\\n        } catch (e) {\\r\\n          console.log(`   üë§ User: Cannot parse session data`);\\r\\n        }\\r\\n      });\\r\\n    }\\r\\n    \\r\\n    await connection.end();\\r\\n    \\r\\n    console.log('\\\\nüéØ ANALYSIS:');\\r\\n    console.log('============');\\r\\n    if (sessions[0].count === 0) {\\r\\n      console.log('‚úÖ No sessions in database - this is good');\\r\\n      console.log('   The phantom user might be coming from frontend cache');\\r\\n    } else {\\r\\n      console.log('‚ö†Ô∏è  Sessions exist in database');\\r\\n      console.log('   Check if any have user data or are empty sessions');\\r\\n    }\\r\\n    \\r\\n    console.log('\\\\nüîß RECOMMENDED ACTIONS:');\\r\\n    console.log('=======================');\\r\\n    console.log('1. Clear all sessions: DELETE FROM sessions;');\\r\\n    console.log('2. Clear browser localStorage and sessionStorage');\\r\\n    console.log('3. Check frontend AuthContext for cached user data');\\r\\n    console.log('4. Restart both frontend and backend');\\r\\n    \\r\\n  } catch (error) {\\r\\n    console.error('‚ùå Error:', error.message);\\r\\n  }\\r\\n}\\r\\n\\r\\ncheckCurrentSessions().then(() => {\\r\\n  console.log('\\\\nüèÅ SESSION CHECK COMPLETE');\\r\\n  process.exit(0);\\r\\n}); \"\n    },\n    \"complexity\": {\n      \"totalLines\": 87,\n      \"codeLines\": 65,\n      \"commentLines\": 9,\n      \"commentRatio\": 0.12162162162162163,\n      \"averageLineLength\": 38.270270270270274\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.837Z\"\n  },\n  \"contentHash\": \"cec7b63e696765e6d3a8003354223cd03fb9dec845ae6e9097cc5ab0931ee55a\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.837Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 82.28571428571429
    },
    "lastAnalyzed": "2025-07-28T07:19:57.339Z"
  },
  "contentHash": "d93398f494ee2f1d3060c7bb592ac55c72511f02648f5a34e4274339fc07881b",
  "discoveredAt": "2025-07-28T07:19:57.339Z"
}