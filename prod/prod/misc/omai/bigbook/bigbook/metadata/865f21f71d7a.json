{
  "id": "865f21f71d7a",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/check-links-permissions.js",
  "relativePath": "server/testing/check-links-permissions.js",
  "name": "check-links-permissions.js",
  "extension": ".js",
  "size": 16575,
  "modified": "2025-07-12T03:22:52.327Z",
  "created": "2025-07-12T03:19:12.984Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 539,
      "characters": 16513,
      "words": 1441
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "axios",
        "line": 15
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 16
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 17
      },
      {
        "type": "npm_package",
        "name": "cheerio",
        "line": 18
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 26,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 525,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 527,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 528,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Orthodox Metrics Link Checker & Permission Validator\r\n * \r\n * This script crawls the application to identify:\r\n * - Broken links (404s, 500s)\r\n * - Permission errors (403s) that shouldn't occur for superadmin\r\n * - Missing routes or endpoints\r\n * - Authentication issues\r\n * \r\n * Run with: node scripts/check-links-permissions.js\r\n */\r\n\r\nconst axios = require('axios');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\nconst cheerio = require('cheerio');\r\n\r\nclass LinkPermissionChecker {\r\n  constructor(options = {}) {\r\n    this.baseUrl = options.baseUrl || 'http://localhost:3001';\r\n    this.loginUrl = options.loginUrl || `${this.baseUrl}/api/auth/login`;\r\n    this.credentials = options.credentials || {\r\n      email: 'superadmin@orthodoxmetrics.com',\r\n      password: '[REDACTED]'\r\n    };\r\n    this.sessionCookie = null;\r\n    this.checkedUrls = new Set();\r\n    this.results = {\r\n      total: 0,\r\n      successful: 0,\r\n      broken: [],\r\n      permission_denied: [],\r\n      authentication_required: [],\r\n      server_errors: [],\r\n      redirects: []\r\n    };\r\n    this.timeout = 10000; // 10 second timeout\r\n  }\r\n\r\n  /**\r\n   * Initialize session by logging in as superadmin\r\n   */\r\n  async initialize() {\r\n    console.log('🔐 Logging in as superadmin...');\r\n    \r\n    try {\r\n      const response = await axios.post(this.loginUrl, this.credentials, {\r\n        timeout: this.timeout,\r\n        withCredentials: true\r\n      });\r\n\r\n      // Extract session cookie\r\n      const cookies = response.headers['set-cookie'];\r\n      if (cookies) {\r\n        this.sessionCookie = cookies.join('; ');\r\n        console.log('✅ Successfully logged in as superadmin');\r\n        return true;\r\n      } else {\r\n        console.error('❌ No session cookie received');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Login failed:', error.message);\r\n      if (error.response) {\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response data:', error.response.data);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get axios instance with authentication\r\n   */\r\n  getAxiosInstance() {\r\n    return axios.create({\r\n      timeout: this.timeout,\r\n      headers: {\r\n        'Cookie': this.sessionCookie,\r\n        'User-Agent': 'OrthodoxMetrics-LinkChecker/1.0'\r\n      },\r\n      withCredentials: true,\r\n      // Don't throw on HTTP error codes - we want to handle them\r\n      validateStatus: () => true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check a single URL\r\n   */\r\n  async checkUrl(url, source = 'manual') {\r\n    if (this.checkedUrls.has(url)) {\r\n      return null; // Already checked\r\n    }\r\n\r\n    this.checkedUrls.add(url);\r\n    this.results.total++;\r\n\r\n    const axiosInstance = this.getAxiosInstance();\r\n    \r\n    try {\r\n      console.log(`🔍 Checking: ${url}`);\r\n      const response = await axiosInstance.get(url);\r\n      \r\n      const result = {\r\n        url,\r\n        source,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        contentType: response.headers['content-type'],\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      if (response.status >= 200 && response.status < 300) {\r\n        this.results.successful++;\r\n        console.log(`✅ ${response.status} - ${url}`);\r\n        \r\n        // If it's an HTML page, extract more links\r\n        if (response.headers['content-type']?.includes('text/html')) {\r\n          await this.extractLinksFromHtml(response.data, url);\r\n        }\r\n        \r\n      } else if (response.status >= 300 && response.status < 400) {\r\n        this.results.redirects.push({\r\n          ...result,\r\n          redirectLocation: response.headers.location\r\n        });\r\n        console.log(`🔄 ${response.status} - ${url} → ${response.headers.location}`);\r\n        \r\n      } else if (response.status === 401) {\r\n        this.results.authentication_required.push(result);\r\n        console.log(`🔒 ${response.status} - Authentication required: ${url}`);\r\n        \r\n      } else if (response.status === 403) {\r\n        this.results.permission_denied.push(result);\r\n        console.log(`🚫 ${response.status} - Permission denied for superadmin: ${url}`);\r\n        \r\n      } else if (response.status === 404) {\r\n        this.results.broken.push({...result, error: 'Not Found'});\r\n        console.log(`💥 ${response.status} - Not Found: ${url}`);\r\n        \r\n      } else if (response.status >= 500) {\r\n        this.results.server_errors.push({\r\n          ...result,\r\n          error: response.data || 'Server Error'\r\n        });\r\n        console.log(`🔥 ${response.status} - Server Error: ${url}`);\r\n        \r\n      } else {\r\n        this.results.broken.push({...result, error: 'Unexpected Status'});\r\n        console.log(`⚠️  ${response.status} - Unexpected: ${url}`);\r\n      }\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      const result = {\r\n        url,\r\n        source,\r\n        status: 'ERROR',\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      if (error.code === 'ECONNREFUSED') {\r\n        result.error = 'Connection refused - server not running?';\r\n      } else if (error.code === 'ETIMEDOUT') {\r\n        result.error = 'Request timeout';\r\n      }\r\n\r\n      this.results.broken.push(result);\r\n      console.log(`💥 ERROR - ${url}: ${result.error}`);\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract links from HTML content\r\n   */\r\n  async extractLinksFromHtml(html, baseUrl) {\r\n    try {\r\n      const $ = cheerio.load(html);\r\n      const links = new Set();\r\n\r\n      // Extract various types of links\r\n      $('a[href]').each((i, elem) => {\r\n        const href = $(elem).attr('href');\r\n        if (href) links.add(href);\r\n      });\r\n\r\n      $('form[action]').each((i, elem) => {\r\n        const action = $(elem).attr('action');\r\n        if (action) links.add(action);\r\n      });\r\n\r\n      $('link[href]').each((i, elem) => {\r\n        const href = $(elem).attr('href');\r\n        if (href) links.add(href);\r\n      });\r\n\r\n      $('script[src]').each((i, elem) => {\r\n        const src = $(elem).attr('src');\r\n        if (src) links.add(src);\r\n      });\r\n\r\n      // Convert relative URLs to absolute and filter\r\n      for (const link of links) {\r\n        const absoluteUrl = this.resolveUrl(link, baseUrl);\r\n        if (this.shouldCheckUrl(absoluteUrl)) {\r\n          // Don't await here to avoid blocking - just add to queue\r\n          setTimeout(() => this.checkUrl(absoluteUrl, baseUrl), 100);\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(`Error parsing HTML from ${baseUrl}:`, error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resolve relative URLs to absolute\r\n   */\r\n  resolveUrl(url, base) {\r\n    try {\r\n      if (url.startsWith('http://') || url.startsWith('https://')) {\r\n        return url;\r\n      }\r\n      if (url.startsWith('//')) {\r\n        return 'http:' + url;\r\n      }\r\n      if (url.startsWith('/')) {\r\n        const baseObj = new URL(base);\r\n        return `${baseObj.protocol}//${baseObj.host}${url}`;\r\n      }\r\n      return new URL(url, base).href;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if we should check this URL\r\n   */\r\n  shouldCheckUrl(url) {\r\n    if (!url) return false;\r\n    \r\n    // Only check URLs on our domain\r\n    if (!url.startsWith(this.baseUrl)) return false;\r\n    \r\n    // Skip certain file types\r\n    const skipExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.css', '.js', '.woff', '.woff2', '.ttf'];\r\n    if (skipExtensions.some(ext => url.toLowerCase().includes(ext))) return false;\r\n    \r\n    // Skip anchor links\r\n    if (url.includes('#')) return false;\r\n    \r\n    // Skip query parameters that might cause issues\r\n    if (url.includes('logout')) return false;\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check all core application routes\r\n   */\r\n  async checkCoreRoutes() {\r\n    console.log('\\n🌐 Checking core application routes...\\n');\r\n\r\n    const coreRoutes = [\r\n      // Authentication & Dashboard\r\n      '/',\r\n      '/dashboard',\r\n      '/admin',\r\n      '/admin/dashboard',\r\n      \r\n      // User Management\r\n      '/admin/users',\r\n      '/admin/user-management',\r\n      \r\n      // Church Management\r\n      '/admin/churches',\r\n      '/admin/church-management',\r\n      '/admin/church-admin-panel',\r\n      \r\n      // Template System\r\n      '/admin/template-manager',\r\n      '/admin/record-template-manager',\r\n      \r\n      // Records Management\r\n      '/records',\r\n      '/records/baptism',\r\n      '/records/marriage', \r\n      '/records/funeral',\r\n      '/baptism-records',\r\n      '/marriage-records',\r\n      '/funeral-records',\r\n      \r\n      // API Endpoints\r\n      '/api/auth/status',\r\n      '/api/templates',\r\n      '/api/templates/global/available',\r\n      '/api/churches',\r\n      '/api/admin/churches',\r\n      '/api/users',\r\n      '/api/baptism-records/test',\r\n      '/api/marriage-records/test',\r\n      '/api/funeral-records/test',\r\n      \r\n      // OCR System\r\n      '/admin/ocr',\r\n      '/admin/ocr-jobs',\r\n      '/ocr',\r\n      \r\n      // Settings & Configuration\r\n      '/admin/settings',\r\n      '/admin/logs',\r\n      '/settings',\r\n      \r\n      // Calendar System\r\n      '/calendar',\r\n      '/admin/calendar',\r\n      \r\n      // Reports\r\n      '/reports',\r\n      '/admin/reports'\r\n    ];\r\n\r\n    for (const route of coreRoutes) {\r\n      const fullUrl = route.startsWith('http') ? route : `${this.baseUrl}${route}`;\r\n      await this.checkUrl(fullUrl, 'core-routes');\r\n      \r\n      // Small delay to avoid overwhelming the server\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check API endpoints with different HTTP methods\r\n   */\r\n  async checkApiEndpoints() {\r\n    console.log('\\n🔌 Checking API endpoints...\\n');\r\n\r\n    const apiEndpoints = [\r\n      { method: 'GET', path: '/api/auth/status' },\r\n      { method: 'GET', path: '/api/templates' },\r\n      { method: 'GET', path: '/api/templates/global/available' },\r\n      { method: 'GET', path: '/api/churches' },\r\n      { method: 'GET', path: '/api/admin/churches' },\r\n      { method: 'GET', path: '/api/users' },\r\n      { method: 'GET', path: '/api/baptism-records' },\r\n      { method: 'GET', path: '/api/marriage-records' },\r\n      { method: 'GET', path: '/api/funeral-records' },\r\n      { method: 'GET', path: '/api/admin/logs' },\r\n      { method: 'POST', path: '/api/templates/generate', data: { test: true } },\r\n    ];\r\n\r\n    const axiosInstance = this.getAxiosInstance();\r\n\r\n    for (const endpoint of apiEndpoints) {\r\n      const url = `${this.baseUrl}${endpoint.path}`;\r\n      \r\n      try {\r\n        console.log(`🔍 ${endpoint.method} ${url}`);\r\n        \r\n        let response;\r\n        if (endpoint.method === 'GET') {\r\n          response = await axiosInstance.get(url);\r\n        } else if (endpoint.method === 'POST') {\r\n          response = await axiosInstance.post(url, endpoint.data || {});\r\n        }\r\n\r\n        const result = {\r\n          url,\r\n          method: endpoint.method,\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n\r\n        if (response.status >= 200 && response.status < 300) {\r\n          this.results.successful++;\r\n          console.log(`✅ ${response.status} - ${endpoint.method} ${url}`);\r\n        } else if (response.status === 403) {\r\n          this.results.permission_denied.push(result);\r\n          console.log(`🚫 ${response.status} - Permission denied: ${endpoint.method} ${url}`);\r\n        } else {\r\n          this.results.broken.push(result);\r\n          console.log(`💥 ${response.status} - ${endpoint.method} ${url}`);\r\n        }\r\n\r\n      } catch (error) {\r\n        this.results.broken.push({\r\n          url,\r\n          method: endpoint.method,\r\n          error: error.message,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        console.log(`💥 ERROR - ${endpoint.method} ${url}: ${error.message}`);\r\n      }\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 200));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate detailed report\r\n   */\r\n  generateReport() {\r\n    const report = {\r\n      summary: {\r\n        total_checked: this.results.total,\r\n        successful: this.results.successful,\r\n        broken_count: this.results.broken.length,\r\n        permission_denied_count: this.results.permission_denied.length,\r\n        auth_required_count: this.results.authentication_required.length,\r\n        server_errors_count: this.results.server_errors.length,\r\n        redirects_count: this.results.redirects.length,\r\n        success_rate: `${((this.results.successful / this.results.total) * 100).toFixed(1)}%`\r\n      },\r\n      issues: {\r\n        permission_denied: this.results.permission_denied,\r\n        broken_links: this.results.broken,\r\n        server_errors: this.results.server_errors,\r\n        authentication_required: this.results.authentication_required\r\n      },\r\n      redirects: this.results.redirects,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Print summary to console\r\n   */\r\n  printSummary() {\r\n    console.log('\\n' + '='.repeat(60));\r\n    console.log('📊 LINK & PERMISSION CHECK SUMMARY');\r\n    console.log('='.repeat(60));\r\n    \r\n    const report = this.generateReport();\r\n    \r\n    console.log(`Total URLs checked: ${report.summary.total_checked}`);\r\n    console.log(`Successful: ${report.summary.successful} (${report.summary.success_rate})`);\r\n    console.log(`Broken links: ${report.summary.broken_count}`);\r\n    console.log(`Permission denied: ${report.summary.permission_denied_count}`);\r\n    console.log(`Auth required: ${report.summary.auth_required_count}`);\r\n    console.log(`Server errors: ${report.summary.server_errors_count}`);\r\n    console.log(`Redirects: ${report.summary.redirects_count}`);\r\n\r\n    if (report.summary.permission_denied_count > 0) {\r\n      console.log('\\n🚫 PERMISSION DENIED (Should not happen for superadmin):');\r\n      report.issues.permission_denied.forEach(item => {\r\n        console.log(`   - ${item.status} ${item.url}`);\r\n      });\r\n    }\r\n\r\n    if (report.summary.broken_count > 0) {\r\n      console.log('\\n💥 BROKEN LINKS:');\r\n      report.issues.broken_links.slice(0, 10).forEach(item => {\r\n        console.log(`   - ${item.status} ${item.url} (${item.error || item.statusText})`);\r\n      });\r\n      if (report.issues.broken_links.length > 10) {\r\n        console.log(`   ... and ${report.issues.broken_links.length - 10} more`);\r\n      }\r\n    }\r\n\r\n    if (report.summary.server_errors_count > 0) {\r\n      console.log('\\n🔥 SERVER ERRORS:');\r\n      report.issues.server_errors.forEach(item => {\r\n        console.log(`   - ${item.status} ${item.url}`);\r\n      });\r\n    }\r\n\r\n    console.log('\\n✅ Check complete!');\r\n  }\r\n\r\n  /**\r\n   * Save detailed report to file\r\n   */\r\n  async saveReport() {\r\n    const report = this.generateReport();\r\n    const reportPath = path.join(__dirname, `../logs/link-check-${Date.now()}.json`);\r\n    \r\n    try {\r\n      await fs.mkdir(path.dirname(reportPath), { recursive: true });\r\n      await fs.writeFile(reportPath, JSON.stringify(report, null, 2));\r\n      console.log(`\\n📄 Detailed report saved to: ${reportPath}`);\r\n    } catch (error) {\r\n      console.error('Error saving report:', error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run the complete check\r\n   */\r\n  async run() {\r\n    console.log('🚀 Starting Orthodox Metrics Link & Permission Check\\n');\r\n    \r\n    // Initialize session\r\n    const loginSuccess = await this.initialize();\r\n    if (!loginSuccess) {\r\n      console.error('❌ Cannot proceed without authentication');\r\n      process.exit(1);\r\n    }\r\n\r\n    // Run checks\r\n    await this.checkCoreRoutes();\r\n    await this.checkApiEndpoints();\r\n    \r\n    // Wait a moment for any async link checking to complete\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    // Generate and display results\r\n    this.printSummary();\r\n    await this.saveReport();\r\n  }\r\n}\r\n\r\n// Run if called directly\r\nif (require.main === module) {\r\n  const checker = new LinkPermissionChecker({\r\n    baseUrl: process.env.[REDACTED] || 'http://localhost:3001',\r\n    credentials: {\r\n      email: process.env.[REDACTED] || 'superadmin@orthodoxmetrics.com',\r\n      password: process.env.[REDACTED] || 'admin123'\r\n    }\r\n  });\r\n\r\n  checker.run().catch(error => {\r\n    console.error('❌ Check failed:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = LinkPermissionChecker;\r\n"
    },
    "complexity": {
      "totalLines": 539,
      "codeLines": 384,
      "commentLines": 74,
      "commentRatio": 0.1615720524017467,
      "averageLineLength": 34.29475982532751
    },
    "lastAnalyzed": "2025-07-28T07:20:01.181Z"
  },
  "contentHash": "fd943dbd7063e3994fe542ac741a2ec5e4f8f53a6fb5cad652803aad0dbc9ce2",
  "discoveredAt": "2025-07-28T07:20:01.181Z"
}