{
  "id": "dbf8edbfe462",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/front-end/src/services/aiService.ts",
  "relativePath": "front-end/src/services/aiService.ts",
  "name": "aiService.ts",
  "extension": ".ts",
  "size": 10339,
  "modified": "2025-07-26T02:39:47.753Z",
  "created": "2025-07-08T02:12:24.706Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 1
  },
  "metadata": {
    "fileStats": {
      "lines": 356,
      "characters": 10339,
      "words": 836
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 1
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 89,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// AI Services API Integration for Orthodox Metrics Admin\r\nimport { APIConfig } from '../api/config';\r\n\r\nexport interface AIContentRequest {\r\n    content_type: 'documentation' | 'report' | 'newsletter' | 'announcement' | 'admin_guide';\r\n    context: string;\r\n    language?: string;\r\n    church_context?: string;\r\n    target_audience?: string;\r\n}\r\n\r\nexport interface AITranslationRequest {\r\n    text: string;\r\n    source_language?: string;\r\n    target_language: string;\r\n    preserve_formatting?: boolean;\r\n}\r\n\r\nexport interface AIOCRRequest {\r\n    image_url?: string;\r\n    language?: string;\r\n    enhancement?: boolean;\r\n    output_format?: 'text' | 'structured' | 'json';\r\n}\r\n\r\nexport interface AIAnalyticsRequest {\r\n    data_source: string;\r\n    analysis_type: 'trends' | 'anomalies' | 'predictions' | 'insights';\r\n    time_range?: string;\r\n    metrics?: string[];\r\n}\r\n\r\nexport interface AIContentResponse {\r\n    content: string;\r\n    metadata: {\r\n        word_count: number;\r\n        estimated_reading_time: number;\r\n        content_type: string;\r\n        generated_at: string;\r\n    };\r\n    suggestions?: string[];\r\n}\r\n\r\nexport interface AITranslationResponse {\r\n    translated_text: string;\r\n    confidence_score: number;\r\n    detected_language?: string;\r\n    quality_assessment: {\r\n        fluency: number;\r\n        accuracy: number;\r\n        cultural_appropriateness: number;\r\n    };\r\n}\r\n\r\nexport interface AIOCRResponse {\r\n    extracted_text: string;\r\n    confidence: number;\r\n    structure?: {\r\n        sections: Array<{\r\n            type: string;\r\n            content: string;\r\n            confidence: number;\r\n        }>;\r\n    };\r\n    detected_language?: string;\r\n}\r\n\r\nexport interface AIAnalyticsResponse {\r\n    insights: Array<{\r\n        type: string;\r\n        title: string;\r\n        description: string;\r\n        confidence: number;\r\n        actionable: boolean;\r\n        recommendations?: string[];\r\n    }>;\r\n    visualizations?: Array<{\r\n        type: 'chart' | 'graph' | 'heatmap';\r\n        data: any;\r\n        config: any;\r\n    }>;\r\n}\r\n\r\nclass AIService {\r\n    private baseURL: string;\r\n\r\n    constructor() {\r\n        // Connect to OrthodoxMetrics backend instead of external AI service\r\n        this.baseURL = process.env.[REDACTED] || '';\r\n    }\r\n\r\n    // Content Generation\r\n    async generateContent(request: AIContentRequest): Promise<AIContentResponse> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/content/generate`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(request),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`AI Content Generation failed: ${response.statusText}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Translation\r\n    async translateText(request: AITranslationRequest): Promise<AITranslationResponse> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/translate/start`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(request),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`AI Translation failed: ${response.statusText}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // OCR Processing\r\n    async processOCR(file: File, request: Partial<AIOCRRequest> = {}): Promise<AIOCRResponse> {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        // Add other parameters\r\n        Object.entries(request).forEach(([key, value]) => {\r\n            if (value !== undefined) {\r\n                formData.append(key, value.toString());\r\n            }\r\n        });\r\n\r\n        const response = await fetch(`${this.baseURL}/api/ai/ocr/process`, {\r\n            method: 'POST',\r\n            body: formData,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`AI OCR Processing failed: ${response.statusText}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Analytics & Insights\r\n    async generateAnalytics(request: AIAnalyticsRequest): Promise<AIAnalyticsResponse> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/logs/analyze`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                log_data: request.data_source,\r\n                analysis_type: request.analysis_type,\r\n                time_range: request.time_range\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`AI Analytics failed: ${response.statusText}`);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Admin-specific AI features\r\n    async generateAdminReport(type: 'system_health' | 'user_activity' | 'performance' | 'security'): Promise<AIContentResponse> {\r\n        return this.generateContent({\r\n            content_type: 'report',\r\n            context: `Generate a comprehensive ${type} report for Orthodox Metrics admin dashboard`,\r\n            target_audience: 'admin',\r\n        });\r\n    }\r\n\r\n    async generateUserGuide(feature: string): Promise<AIContentResponse> {\r\n        return this.generateContent({\r\n            content_type: 'admin_guide',\r\n            context: `Create a user guide for the ${feature} feature in Orthodox Metrics`,\r\n            target_audience: 'church_administrators',\r\n        });\r\n    }\r\n\r\n    async analyzeSystemLogs(logData: string): Promise<AIAnalyticsResponse> {\r\n        return this.generateAnalytics({\r\n            data_source: 'system_logs',\r\n            analysis_type: 'anomalies',\r\n            metrics: ['error_rate', 'response_time', 'user_activity'],\r\n        });\r\n    }\r\n\r\n    async translateAdminInterface(language: string): Promise<Record<string, string>> {\r\n        const adminTexts = [\r\n            'User Management',\r\n            'System Settings',\r\n            'Church Records',\r\n            'Analytics Dashboard',\r\n            'Security Settings',\r\n            'Backup & Recovery',\r\n            'Notifications',\r\n            'Performance Monitoring',\r\n        ];\r\n\r\n        const translations: Record<string, string> = {};\r\n\r\n        for (const text of adminTexts) {\r\n            const result = await this.translateText({\r\n                text,\r\n                target_language: language,\r\n                preserve_formatting: true,\r\n            });\r\n            translations[text] = result.translated_text;\r\n        }\r\n\r\n        return translations;\r\n    }\r\n\r\n    // Health check\r\n    async healthCheck(): Promise<{ status: string; version: string; services: Record<string, boolean> }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/status`);\r\n\r\n        if (!response.ok) {\r\n            throw new Error('AI Service unavailable');\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Get AI metrics\r\n    async getMetrics(): Promise<{\r\n        dailyRequests: number;\r\n        contentGenerated: number;\r\n        documentsProcessed: number;\r\n        translations: number;\r\n        avgResponseTime: number;\r\n        successRate: number;\r\n    }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/metrics`);\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch AI metrics');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.metrics;\r\n    }\r\n\r\n    // AI Deployment\r\n    async runDeployment(request: {\r\n        church_name: string;\r\n        church_slug: string;\r\n        domain?: string;\r\n        ssl_enabled?: boolean;\r\n        backup_enabled?: boolean;\r\n        monitoring_enabled?: boolean;\r\n    }): Promise<{\r\n        deployment_id: string;\r\n        status: string;\r\n        estimated_time: string;\r\n        logs: string[];\r\n    }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/deploy/run`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(request),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('AI Deployment failed');\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // OCR Learning Status\r\n    async getOCRLearningStatus(): Promise<{\r\n        status: string;\r\n        progress: number;\r\n        success_rate: number;\r\n        last_run: string;\r\n        next_run: string;\r\n    }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/ocr-learning/status`);\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch OCR learning status');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n    // Start OCR Learning\r\n    async startOCRLearning(): Promise<{\r\n        task_id: string;\r\n        status: string;\r\n        estimated_duration: string;\r\n    }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/ocr-learning/start`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to start OCR learning');\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Reset OCR Learning\r\n    async resetOCRLearning(): Promise<{ message: string }> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/ocr-learning/reset`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to reset OCR learning');\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    // Get OCR Learning Rules\r\n    async getOCRLearningRules(): Promise<Array<{\r\n        id: string;\r\n        name: string;\r\n        description: string;\r\n        confidence: number;\r\n        enabled: boolean;\r\n    }>> {\r\n        const response = await fetch(`${this.baseURL}/api/ai/ocr-learning/rules`);\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch OCR learning rules');\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.rules;\r\n    }\r\n}\r\n\r\nexport const aiService = new AIService();\r\nexport default aiService;\r\n"
    },
    "complexity": {
      "totalLines": 356,
      "codeLines": 287,
      "commentLines": 15,
      "commentRatio": 0.04966887417218543,
      "averageLineLength": 32.884105960264904
    },
    "lastAnalyzed": "2025-07-28T07:19:58.890Z"
  },
  "contentHash": "ee8c2d1559e625b0cc8d93a3e9852d1d31342d48d5d2137aed4404d8999a54ef",
  "discoveredAt": "2025-07-28T07:19:58.890Z"
}