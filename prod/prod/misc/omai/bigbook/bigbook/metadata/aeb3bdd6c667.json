{
  "id": "aeb3bdd6c667",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/test-church-creation.js",
  "relativePath": "server/utils/test-church-creation.js",
  "name": "test-church-creation.js",
  "extension": ".js",
  "size": 2732,
  "modified": "2025-07-04T23:08:01.000Z",
  "created": "2025-07-09T00:48:38.534Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 99,
      "characters": 2732,
      "words": 273
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 2
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 8,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Test script to verify church creation fix\r\nconst mysql = require('mysql2/promise');\r\n\r\nasync function testChurchCreation() {\r\n  const pool = mysql.createPool({\r\n    host: 'localhost',\r\n    user: 'ssppoc_user',\r\n    password: '[REDACTED]',\r\n    database: 'ssppoc_records_db',\r\n    waitForConnections: true,\r\n    connectionLimit: 10,\r\n    queueLimit: 0\r\n  });\r\n\r\n  try {\r\n    // Test the INSERT that was failing\r\n    console.log('Testing church creation...');\r\n    \r\n    const church_name = 'Test Church';\r\n    const location = 'Test City';\r\n    const country = 'USA';\r\n    const language_preference = 'en';\r\n    const admin_email = 'test@test.com';\r\n    const timezone = 'America/New_York';\r\n    const is_active = true;\r\n\r\n    // First, check table structure\r\n    console.log('Checking table structure...');\r\n    const [columns] = await pool.query('DESCRIBE churches');\r\n    console.log('Churches table columns:', columns.map(col => col.Field));\r\n\r\n    // Try the INSERT with both name and church_name\r\n    const [result] = await pool.query(`\r\n      INSERT INTO churches (\r\n        name,\r\n        church_name,\r\n        city,\r\n        country,\r\n        language_preference,\r\n        admin_email,\r\n        timezone,\r\n        is_active\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n    `, [\r\n      church_name, // Use church_name for both name and church_name fields\r\n      church_name,\r\n      location,\r\n      country,\r\n      language_preference,\r\n      admin_email,\r\n      timezone,\r\n      is_active\r\n    ]);\r\n\r\n    console.log('Church created successfully with ID:', result.insertId);\r\n\r\n    // Clean up test data\r\n    await pool.query('DELETE FROM churches WHERE id = ?', [result.insertId]);\r\n    console.log('Test data cleaned up');\r\n\r\n  } catch (error) {\r\n    console.error('Error testing church creation:', error);\r\n    \r\n    // If the above failed, try without the name column\r\n    try {\r\n      console.log('Trying without name column...');\r\n      const [result2] = await pool.query(`\r\n        INSERT INTO churches (\r\n          church_name,\r\n          city,\r\n          country,\r\n          language_preference,\r\n          admin_email,\r\n          timezone,\r\n          is_active\r\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n      `, [\r\n        'Test Church 2',\r\n        'Test City',\r\n        'USA',\r\n        'en',\r\n        'test2@test.com',\r\n        'America/New_York',\r\n        true\r\n      ]);\r\n      \r\n      console.log('Church created without name column, ID:', result2.insertId);\r\n      await pool.query('DELETE FROM churches WHERE id = ?', [result2.insertId]);\r\n      \r\n    } catch (error2) {\r\n      console.error('Both methods failed:', error2);\r\n    }\r\n  } finally {\r\n    await pool.end();\r\n  }\r\n}\r\n\r\ntestChurchCreation();\r\n"
    },
    "complexity": {
      "totalLines": 99,
      "codeLines": 80,
      "commentLines": 6,
      "commentRatio": 0.06976744186046512,
      "averageLineLength": 30.25581395348837
    },
    "lastAnalyzed": "2025-07-28T07:20:01.285Z"
  },
  "contentHash": "9c69d03e4b294c47452b17783a529362c8ca4b8abb050df758150af107efd7f5",
  "discoveredAt": "2025-07-28T07:20:01.285Z"
}