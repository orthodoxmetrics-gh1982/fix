{
  "id": "0b5ad0fc5f20",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/dbConnections.js",
  "relativePath": "server/utils/dbConnections.js",
  "name": "dbConnections.js",
  "extension": ".js",
  "size": 4324,
  "modified": "2025-07-24T14:51:40.492Z",
  "created": "2025-07-24T14:51:40.492Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 185,
      "characters": 4308,
      "words": 459
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 7
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 14,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 45,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * Cross-Database Connection Utilities for OCR System\r\n * Handles connections between orthodoxmetrics_db ‚Üî ssppoc_records_db ‚Üî orthodoxmetrics_ocr_db\r\n * Generated by Phase 1 setup script\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst { promisePool: centralPool } = require('../../config/db');\r\n\r\n// Database Configuration\r\nconst DB_CONFIG = {\r\n  host: 'localhost',\r\n  user: 'orthodoxapps',\r\n  password: '[REDACTED]',\r\n  charset: 'utf8mb4',\r\n  connectionLimit: 10,\r\n  acquireTimeout: 60000,\r\n  timeout: 60000\r\n};\r\n\r\n// Connection pools for each database\r\nlet recordsPool = null;\r\nlet ocrPool = null;\r\n\r\n/**\r\n * Get connection pool for Records Database (ssppoc_records_db)\r\n */\r\nfunction getRecordsDbPool() {\r\n  if (!recordsPool) {\r\n    recordsPool = mysql.createPool({\r\n      ...DB_CONFIG,\r\n      database: 'ssppoc_records_db'\r\n    });\r\n  }\r\n  return recordsPool;\r\n}\r\n\r\n/**\r\n * Get connection pool for OCR Processing Database (orthodoxmetrics_ocr_db)\r\n */\r\nfunction getOcrDbPool() {\r\n  if (!ocrPool) {\r\n    ocrPool = mysql.createPool({\r\n      ...DB_CONFIG,\r\n      database: process.env.[REDACTED] || 'orthodoxmetrics_ocr_db'\r\n    });\r\n  }\r\n  return ocrPool;\r\n}\r\n\r\n/**\r\n * Get single connection to Records Database\r\n */\r\nasync function getRecordsDbConnection() {\r\n  const pool = getRecordsDbPool();\r\n  return await pool.getConnection();\r\n}\r\n\r\n/**\r\n * Get single connection to OCR Database  \r\n */\r\nasync function getOcrDbConnection() {\r\n  const pool = getOcrDbPool();\r\n  return await pool.getConnection();\r\n}\r\n\r\n/**\r\n * Execute query on Records Database\r\n */\r\nasync function executeRecordsQuery(query, params = []) {\r\n  const pool = getRecordsDbPool();\r\n  return await pool.execute(query, params);\r\n}\r\n\r\n/**\r\n * Execute query on OCR Database\r\n */\r\nasync function executeOcrQuery(query, params = []) {\r\n  const pool = getOcrDbPool();\r\n  return await pool.execute(query, params);\r\n}\r\n\r\n/**\r\n * Execute query on Central Database (orthodoxmetrics_db)\r\n */\r\nasync function executeCentralQuery(query, params = []) {\r\n  return await centralPool.execute(query, params);\r\n}\r\n\r\n/**\r\n * Transaction wrapper for Records Database\r\n */\r\nasync function recordsTransaction(callback) {\r\n  const connection = await getRecordsDbConnection();\r\n  try {\r\n    await connection.beginTransaction();\r\n    const result = await callback(connection);\r\n    await connection.commit();\r\n    return result;\r\n  } catch (error) {\r\n    await connection.rollback();\r\n    throw error;\r\n  } finally {\r\n    connection.release();\r\n  }\r\n}\r\n\r\n/**\r\n * Transaction wrapper for OCR Database\r\n */\r\nasync function ocrTransaction(callback) {\r\n  const connection = await getOcrDbConnection();\r\n  try {\r\n    await connection.beginTransaction();\r\n    const result = await callback(connection);\r\n    await connection.commit();\r\n    return result;\r\n  } catch (error) {\r\n    await connection.rollback();\r\n    throw error;\r\n  } finally {\r\n    connection.release();\r\n  }\r\n}\r\n\r\n/**\r\n * Close all database connections gracefully\r\n */\r\nasync function closeAllConnections() {\r\n  const promises = [];\r\n  \r\n  if (recordsPool) {\r\n    promises.push(recordsPool.end());\r\n  }\r\n  \r\n  if (ocrPool) {\r\n    promises.push(ocrPool.end());\r\n  }\r\n  \r\n  await Promise.all(promises);\r\n  console.log('‚úÖ All database connections closed');\r\n}\r\n\r\n/**\r\n * Test database connections\r\n */\r\nasync function testConnections() {\r\n  console.log('üîç Testing database connections...');\r\n  \r\n  try {\r\n    // Test Records DB\r\n    const recordsPool = getRecordsDbPool();\r\n    await recordsPool.execute('SELECT 1 as test');\r\n    console.log('‚úÖ Records database connection OK');\r\n    \r\n    // Test OCR DB\r\n    const ocrPool = getOcrDbPool();\r\n    await ocrPool.execute('SELECT 1 as test');\r\n    console.log('‚úÖ OCR database connection OK');\r\n    \r\n    // Test Central DB\r\n    await centralPool.execute('SELECT 1 as test');\r\n    console.log('‚úÖ Central database connection OK');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Database connection test failed:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getRecordsDbPool,\r\n  getOcrDbPool,\r\n  getRecordsDbConnection,\r\n  getOcrDbConnection,\r\n  executeRecordsQuery,\r\n  executeOcrQuery,\r\n  executeCentralQuery,\r\n  recordsTransaction,\r\n  ocrTransaction,\r\n  closeAllConnections,\r\n  testConnections\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 185,
      "codeLines": 119,
      "commentLines": 43,
      "commentRatio": 0.2654320987654321,
      "averageLineLength": 25.19753086419753
    },
    "lastAnalyzed": "2025-07-28T07:20:01.241Z"
  },
  "contentHash": "7d1c396630a990c568d73f415b1e1f401e26e3eaaccadfdb61e400afaf24462e",
  "discoveredAt": "2025-07-28T07:20:01.241Z"
}