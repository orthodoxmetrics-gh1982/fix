{
  "id": "54a900208d97",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/middleware/auth.js",
  "relativePath": "server/middleware/auth.js",
  "name": "auth.js",
  "extension": ".js",
  "size": 4875,
  "modified": "2025-07-27T01:31:41.417Z",
  "created": "2025-07-09T02:35:51.788Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 151,
      "characters": 4837,
      "words": 488
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 5
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 39,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/middleware/auth.js - Enhanced Session Authentication Middleware\nconst authMiddleware = (req, res, next) => {\n  console.log('🔐 Auth middleware - Session ID:', req.sessionID);\n  console.log('🔐 Auth middleware - User:', req.session?.user?.email);\n  console.log('🔐 Auth middleware - Method:', req.method, req.originalUrl);\n  \n  // Enhanced debugging for session persistence issues\n  if (req.sessionID) {\n    console.log('🔐 Session cookie received:', !!req.headers.cookie);\n    console.log('🔐 Session store available:', !!req.sessionStore);\n    \n    // Check if session exists in store\n    if (req.sessionStore && req.session) {\n      console.log('🔐 Session data exists:', Object.keys(req.session));\n      console.log('🔐 Session user data:', req.session.user ? 'PRESENT' : 'MISSING');\n    }\n  }\n  \n  // Check if session exists and has user\n  if (!req.session || !req.session.user) {\n    console.log('❌ No valid session found');\n    \n    // Enhanced debugging for session issues\n    const debugInfo = {\n      sessionExists: !!req.session,\n      sessionID: req.sessionID,\n      hasUserData: !!req.session?.user,\n      sessionKeys: req.session ? Object.keys(req.session) : [],\n      cookieHeader: !!req.headers.cookie,\n      userAgent: req.headers['user-agent']?.substring(0, 50),\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('🔍 Session debug info:', debugInfo);\n    \n    return res.status(401).json({ \n      error: 'Authentication required',\n      code: 'NO_SESSION',\n      debug: process.env.[REDACTED] === 'development' ? debugInfo : undefined\n    });\n  }\n\n  // Verify session hasn't expired\n  if (req.session.expires && new Date() > new Date(req.session.expires)) {\n    console.log('❌ Session expired');\n    req.session.destroy();\n    return res.status(401).json({ \n      error: 'Session expired',\n      code: 'SESSION_EXPIRED'\n    });\n  }\n\n  // Verify user data integrity\n  if (!req.session.user.id || !req.session.user.email || !req.session.user.role) {\n    console.log('❌ Incomplete session user data:', req.session.user);\n    return res.status(401).json({ \n      error: 'Invalid session data',\n      code: 'INVALID_SESSION_DATA'\n    });\n  }\n\n  // Add user to request object for easy access\n  req.user = req.session.user;\n  \n  // Update last activity timestamp\n  req.session.lastActivity = new Date();\n  \n  // Log successful authentication\n  console.log('✅ Authentication successful for:', req.user.email, 'Role:', req.user.role);\n  \n  next();\n};\n\nconst optionalAuth = (req, res, next) => {\n  if (req.session?.user) {\n    req.user = req.session.user;\n    console.log('🔐 Optional auth - User found:', req.user.email);\n  } else {\n    console.log('🔐 Optional auth - No user session');\n  }\n  next();\n};\n\n// 🔄 Role checking refactored to use unified role system (see utils/roles.js)\nconst { requireRole: unifiedRequireRole } = require('../utils/roles');\n\nconst requireRole = (allowedRoles) => {\n  return unifiedRequireRole(allowedRoles);\n};\n\n/**\n * Enhanced session validator to help debug session persistence issues\n */\nconst validateSession = (req, res, next) => {\n  console.log('🔍 Session Validation Debug:');\n  console.log('  Session ID:', req.sessionID);\n  console.log('  Has Session Object:', !!req.session);\n  console.log('  Has User Data:', !!req.session?.user);\n  console.log('  Cookie Header Present:', !!req.headers.cookie);\n  \n  if (req.session?.user) {\n    console.log('  User ID:', req.session.user.id);\n    console.log('  User Email:', req.session.user.email);\n    console.log('  User Role:', req.session.user.role);\n    console.log('  Login Time:', req.session.loginTime);\n    console.log('  Last Activity:', req.session.lastActivity);\n  }\n  \n  // Check for potential session issues\n  if (req.sessionID && req.headers.cookie) {\n    const sessionCookie = req.headers.cookie.includes('orthodox.sid=') || \n                         req.headers.cookie.includes('orthodoxmetrics.sid=');\n    console.log('  Session Cookie Present:', sessionCookie);\n    \n    if (!sessionCookie) {\n      console.log('⚠️  Session ID exists but no session cookie found in headers');\n    }\n  }\n  \n  next();\n};\n\n/**\n * Middleware to handle session regeneration issues during login\n */\nconst handleSessionRegeneration = (req, res, next) => {\n  // Store original regenerate function\n  const originalRegenerate = req.session.regenerate;\n  \n  // Override regenerate to prevent timing issues\n  req.session.regenerate = function(callback) {\n    console.log('🔄 Session regeneration called - preventing to avoid timing issues');\n    \n    // Instead of regenerating, just call the callback\n    if (callback) {\n      setImmediate(callback);\n    }\n  };\n  \n  next();\n};\n\nmodule.exports = { \n  authMiddleware, \n  optionalAuth,\n  requireAuth: authMiddleware,\n  requireRole,\n  validateSession,\n  handleSessionRegeneration\n};\n"
    },
    "complexity": {
      "totalLines": 151,
      "codeLines": 104,
      "commentLines": 21,
      "commentRatio": 0.168,
      "averageLineLength": 37.144
    },
    "lastAnalyzed": "2025-07-28T07:20:00.307Z"
  },
  "contentHash": "3bebfbff5dfe2cfea9caa182414a5c4b2a39deb71a422792d845f6e58712756c",
  "discoveredAt": "2025-07-28T07:20:00.307Z"
}