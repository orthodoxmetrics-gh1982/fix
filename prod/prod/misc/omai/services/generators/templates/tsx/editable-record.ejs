import React, { useState, useEffect } from 'react';
import {
  Box, TextField, Button, Paper, Typography, Grid, FormControl, InputLabel, Select, MenuItem,
  Alert, CircularProgress, Chip
} from '@mui/material';
import { useNavigate, useParams } from 'react-router-dom';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';

interface <%= componentName %>Data {
  <% fields.forEach(field => { %>
  <%= field.name %>: <%= getTypeScriptType(field.type) %>;
  <% }); %>
}

export default function Edit<%= componentName %>({ mode = 'create' }) {
  const navigate = useNavigate();
  const { id } = useParams();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [data, setData] = useState<<%= componentName %>Data>({
    <% fields.forEach(field => { %>
    <%= field.name %>: <%= getDefaultValue(field.type) %>,
    <% }); %>
  });

  useEffect(() => {
    if (mode === 'edit' && id) {
      loadRecord();
    }
  }, [id, mode]);

  const loadRecord = async () => {
    setLoading(true);
    try {
      const response = await fetch(`<%= component.route %>/${id}`);
      if (response.ok) {
        const record = await response.json();
        setData(record.data);
      }
    } catch (error) {
      setError('Failed to load record');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const url = mode === 'edit' ? `<%= component.route %>/${id}` : '<%= component.route %>';
      const method = mode === 'edit' ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        navigate('/<%= component.id %>');
      } else {
        setError('Failed to save record');
      }
    } catch (error) {
      setError('Network error');
    } finally {
      setLoading(false);
    }
  };

  if (loading && mode === 'edit') {
    return (
      <Box display="flex" justifyContent="center" p={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box p={3}>
        <Paper elevation={2} sx={{ p: 3 }}>
          <Typography variant="h5" gutterBottom>
            {mode === 'create' ? 'Create New <%= component.name %>' : 'Edit <%= component.name %>'}
          </Typography>
          
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}

          <form onSubmit={handleSubmit}>
            <Grid container spacing={3}>
              <% fields.forEach(field => { %>
              <Grid item xs={12} md={6}>
                <% if (field.type === 'select') { %>
                <FormControl fullWidth required={<%= field.required %>}>
                  <InputLabel><%= field.label %></InputLabel>
                  <Select
                    value={data.<%= field.name %>}
                    onChange={(e) => setData({ ...data, <%= field.name %>: e.target.value })}
                    label="<%= field.label %>"
                  >
                    <% field.options?.forEach(option => { %>
                    <MenuItem value="<%= option.toLowerCase() %>"><%= option %></MenuItem>
                    <% }); %>
                  </Select>
                </FormControl>
                <% } else if (field.type === 'date') { %>
                <DatePicker
                  label="<%= field.label %>"
                  value={data.<%= field.name %>}
                  onChange={(newValue) => setData({ ...data, <%= field.name %>: newValue })}
                  renderInput={(params) => <TextField {...params} fullWidth required={<%= field.required %>} />}
                />
                <% } else if (field.type === 'text') { %>
                <TextField
                  fullWidth
                  multiline
                  rows={4}
                  label="<%= field.label %>"
                  value={data.<%= field.name %>}
                  onChange={(e) => setData({ ...data, <%= field.name %>: e.target.value })}
                  required={<%= field.required %>}
                />
                <% } else { %>
                <TextField
                  fullWidth
                  label="<%= field.label %>"
                  value={data.<%= field.name %>}
                  onChange={(e) => setData({ ...data, <%= field.name %>: e.target.value })}
                  required={<%= field.required %>}
                  type={getInputType(field.type)}
                />
                <% } %>
              </Grid>
              <% }); %>
            </Grid>

            <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
              <Button
                type="submit"
                variant="contained"
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {loading ? 'Saving...' : (mode === 'create' ? 'Create' : 'Update')}
              </Button>
              <Button
                variant="outlined"
                onClick={() => navigate('/<%= component.id %>')}
              >
                Cancel
              </Button>
            </Box>
          </form>
        </Paper>
      </Box>
    </LocalizationProvider>
  );
} 