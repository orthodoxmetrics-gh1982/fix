=== Routing Analysis ===
File: front-end/src/routes/Router.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- ROUTE DEFINITIONS ---
import { createBrowserRouter, Navigate } from 'react-router-dom';
import ProtectedRoute from '../components/auth/ProtectedRoute';
const BigBookDynamicRoute = Loadable(lazy(() => import('../components/admin/BigBookDynamicRoute')));
import { DynamicAddonRoute } from '../components/registry/ComponentRegistry';
const Router = [
    path: '/',
    element: <FullLayout />,
      { path: '/', element: <SmartRedirect /> },
        path: '/dashboards/modern',
        element: (
          <ProtectedRoute requiredPermission="view_dashboard">
          </ProtectedRoute>
        path: '/dashboards/ecommerce',
        element: (
          <ProtectedRoute requiredPermission="view_dashboard">
          </ProtectedRoute>
        path: '/dashboards/orthodoxmetrics',
        element: (
          <ProtectedRoute requiredPermission="admin_dashboard">
          </ProtectedRoute>
        path: '/apps/contacts',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
      // { path: '/apps/blog/posts', element: <Blog /> },
      // { path: '/frontend-pages/blog/detail/:id', element: <BlogDetail /> },
        path: '/apps/chats',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/tools/site-structure',
        element: (
          <ProtectedRoute requiredPermission="admin">
          </ProtectedRoute>
      // Social Experience Routes
        path: '/social/blog',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/blog/create',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/blog/edit/:id',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/blog/post/:id',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/friends',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/chat',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/social/notifications',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/orthodox-headlines',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/email',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/notes',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/tickets',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/shop',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/eco-product-list',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/eco-checkout',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/add-product',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/edit-product',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/ecommerce/detail/:id',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/followers',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/friends',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/gallery',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/kanban',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/invoice/list',
        element: (
          <ProtectedRoute requiredPermission="view_invoices">
          </ProtectedRoute>
        path: '/apps/invoice/create',
        element: (
          <ProtectedRoute requiredPermission="manage_invoices">
          </ProtectedRoute>
        path: '/apps/invoice/detail/:id',
        element: (
          <ProtectedRoute requiredPermission="view_invoices">
          </ProtectedRoute>
        path: '/apps/invoice/edit/:id',
        element: (
          <ProtectedRoute requiredPermission="manage_invoices">
          </ProtectedRoute>
      // Church Management Routes (replacing User Profile)
        path: '/apps/church-management',
        element: (
          <ProtectedRoute requiredPermission="manage_churches">
          </ProtectedRoute>
        path: '/apps/church-management/create',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/church-management/edit/:id',
        element: (
          <ProtectedRoute requiredPermission="manage_churches">
          </ProtectedRoute>
        path: '/apps/church-management/wizard',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
      // Client Management Routes
        path: '/apps/client-management',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
          </ProtectedRoute>
        path: '/apps/client-management/add',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
          </ProtectedRoute>
        path: '/apps/client-management/create',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
          </ProtectedRoute>
        path: '/apps/client-management/church-setup',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
          </ProtectedRoute>
        path: '/apps/client-management/template-manager',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
          </ProtectedRoute>
        path: '/user-profile',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/settings/menu',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/settings/jit-terminal',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/admin/users',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/menu-permissions',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/admin/menu-management',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/admin/roles',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/settings',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/tools/survey',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/admin/tools/page-editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'church_admin', 'admin']}>
          </ProtectedRoute>
        path: '/admin/blog-admin',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'church_admin', 'admin']}>
          </ProtectedRoute>
        path: '/admin/logs',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/sessions',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/activity-logs',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/script-runner',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/ai',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/site-editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/admin/jit-terminal',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/admin/headlines-config',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/dashboard',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/orthodox-metrics',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'admin']}>
          </ProtectedRoute>
        path: '/admin/bigbook',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/omai/mobile',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/bigbook/omlearn/*',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/build',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'dev_admin']}>
          </ProtectedRoute>
        path: '/sandbox/ai-lab',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/sandbox/project-generator',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/omb/editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
          </ProtectedRoute>
        path: '/demos/orthodox-theme',
        element: <OrthodoxThemeDemo />
        path: '/demos/advanced-records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager']}>
          </ProtectedRoute>
        path: '/demos/editable-record',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/demos/editable-record/:recordType',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/demos/editable-record/:recordType/:recordId',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/demos/table-tester',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/demos/record-generator',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
               path: '/demos/site-editor',
               element: (
                 <ProtectedRoute requiredRole={['super_admin']}>
                 </ProtectedRoute>
              path: '/demos/auto-fix',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                </ProtectedRoute>
              path: '/demos/gitops',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                </ProtectedRoute>
              path: '/demos/vrt',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                </ProtectedRoute>
        path: '/records/baptism',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/saints-peter-and-paul-Records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/:churchId(\\d+)-records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/:churchName-Records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/apps/records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/apps/records/baptism',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/apps/records/marriage',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/apps/records/funeral',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/apps/records-ui',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
          </ProtectedRoute>
        path: '/admin/churches',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/churches',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/church/:id',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/admin/church/:id/ocr',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
          </ProtectedRoute>
        path: '/notifications',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/settings/notifications',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/calendar',
        element: (
          <ProtectedRoute requiredPermission="view_calendar">
          </ProtectedRoute>
        path: '/apps/liturgical-calendar',
        element: <LiturgicalCalendar />
        path: '/apps/ocr-upload',
        element: <PublicOCRUpload />
        path: '/apps/ocr-field-mapping',
        element: <OCRFieldMapping />
        path: '/apps/ocr-admin',
        element: (
          <ProtectedRoute requiredPermission="access_ocr">
          </ProtectedRoute>
        path: '/apps/site-clone',
        element: (
          <ProtectedRoute requiredPermission="access_admin">
          </ProtectedRoute>
        path: '/apps/logs',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/addons/parish-map',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
              <DynamicAddonRoute route="/addons/parish-map" />
          </ProtectedRoute>
        path: '/addons/*',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
              <DynamicAddonRoute route={window.location.pathname} />
          </ProtectedRoute>
        path: '/bigbook/:componentId',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'editor']}>
              <BigBookDynamicRoute />
          </ProtectedRoute>
      { path: '/ui-components/alert', element: <MuiAlert /> },
      { path: '/ui-components/accordion', element: <MuiAccordion /> },
      { path: '/ui-components/avatar', element: <MuiAvatar /> },
      { path: '/ui-components/chip', element: <MuiChip /> },
      { path: '/ui-components/dialog', element: <MuiDialog /> },
      { path: '/ui-components/list', element: <MuiList /> },
      { path: '/ui-components/popover', element: <MuiPopover /> },
      { path: '/ui-components/rating', element: <MuiRating /> },
      { path: '/ui-components/tabs', element: <MuiTabs /> },
      { path: '/ui-components/tooltip', element: <MuiTooltip /> },
      { path: '/ui-components/transfer-list', element: <MuiTransferList /> },
      { path: '/ui-components/typography', element: <MuiTypography /> },
      { path: '/pages/casl', element: <RollbaseCASL /> },
      { path: '/pages/pricing', element: <Pricing /> },
      { path: '/pages/faq', element: <Faq /> },
      { path: '/pages/account-settings', element: <AccountSetting /> },
      { path: '/tables/basic', element: <BasicTable /> },
      { path: '/tables/enhanced', element: <EnhanceTable /> },
      { path: '/tables/pagination', element: <PaginationTable /> },
      { path: '/tables/fixed-header', element: <FixedHeaderTable /> },
      { path: '/tables/collapsible', element: <CollapsibleTable /> },
      { path: '/tables/search', element: <SearchTable /> },
      { path: '/forms/form-elements/autocomplete', element: <MuiAutoComplete /> },
      { path: '/forms/form-elements/button', element: <MuiButton /> },
      { path: '/forms/form-elements/checkbox', element: <MuiCheckbox /> },
      { path: '/forms/form-elements/radio', element: <MuiRadio /> },
      { path: '/forms/form-elements/slider', element: <MuiSlider /> },
      { path: '/forms/form-elements/date-time', element: <MuiDateTime /> },
      { path: '/forms/form-elements/switch', element: <MuiSwitch /> },
      { path: '/forms/form-elements/switch', element: <MuiSwitch /> },
      { path: '/forms/form-layouts', element: <FormLayouts /> },
      { path: '/forms/form-custom', element: <FormCustom /> },
      { path: '/forms/form-wizard', element: <FormWizard /> },
      { path: '/forms/form-validation', element: <FormValidation /> },
      { path: '/forms/form-horizontal', element: <FormHorizontal /> },
      { path: '/forms/form-vertical', element: <FormVertical /> },
      { path: '/forms/form-tiptap', element: <TiptapEditor /> },
      { path: '/charts/area-chart', element: <AreaChart /> },
      { path: '/charts/line-chart', element: <LineChart /> },
      { path: '/charts/gredient-chart', element: <GredientChart /> },
      { path: '/charts/candlestick-chart', element: <CandlestickChart /> },
      { path: '/charts/column-chart', element: <ColumnChart /> },
      { path: '/charts/doughnut-pie-chart', element: <DoughnutChart /> },
      { path: '/charts/radialbar-chart', element: <RadialbarChart /> },
      { path: '/widgets/cards', element: <WidgetCards /> },
      { path: '/widgets/banners', element: <WidgetBanners /> },
      { path: '/widgets/charts', element: <WidgetCharts /> },
      { path: '/react-tables/basic', element: <ReactBasicTable /> },
      { path: '/react-tables/column-visiblity', element: <ReactColumnVisibilityTable /> },
      { path: '/react-tables/drag-drop', element: <ReactDragDropTable /> },
      { path: '/react-tables/dense', element: <ReactDenseTable /> },
      { path: '/react-tables/editable', element: <ReactEditableTable /> },
      { path: '/react-tables/empty', element: <ReactEmptyTable /> },
      { path: '/react-tables/expanding', element: <ReactExpandingTable /> },
      { path: '/react-tables/filter', element: <ReactFilterTable /> },
      { path: '/react-tables/pagination', element: <ReactPaginationTable /> },
      { path: '/react-tables/row-selection', element: <ReactRowSelectionTable /> },
      { path: '/react-tables/sorting', element: <ReactSortingTable /> },
      { path: '/react-tables/sticky', element: <ReactStickyTable /> },
      { path: '/muicharts/barcharts', element: <BarCharts /> },
      { path: '/muicharts/gaugecharts', element: <GaugeCharts /> },
      { path: '/muicharts/linecharts/area', element: <AreaCharts /> },
      { path: '/muicharts/linecharts/line', element: <LineCharts /> },
      { path: '/muicharts/piecharts', element: <PieCharts /> },
      { path: '/muicharts/scattercharts', element: <ScatterCharts /> },
      { path: '/muicharts/sparklinecharts', element: <SparklineCharts /> },
      { path: '/mui-trees/simpletree/simpletree-customization', element: <SimpletreeCustomization /> },
      { path: '/mui-trees/simpletree/simpletree-expansion', element: <SimpletreeExpansion /> },
      { path: '/mui-trees/simpletree/simpletree-focus', element: <SimpletreeFocus /> },
      { path: '/mui-trees/simpletree/simpletree-items', element: <SimpletreeItems /> },
      { path: '/mui-trees/simpletree/simpletree-selection', element: <SimpletreeSelection /> },
        path: '/apps/cms/page-editor/:slug?',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/cms/page-editor-enhanced/:slug?',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
        path: '/apps/cms/page-editor-legacy/:slug?',
        element: (
          <ProtectedRoute>
          </ProtectedRoute>
      { path: '*', element: <Navigate to="/auth/404" /> },
    path: '/',
    element: <BlankLayout />,
      { path: '/auth/404', element: <Error /> },
      { path: '/auth/unauthorized', element: <Unauthorized /> },
      { path: '/auth/login', element: <OrthodoxLogin /> },
      { path: '/auth/login2', element: <Login2 /> },
      { path: '/auth/register', element: <Register /> },
      { path: '/auth/register2', element: <Register2 /> },
      { path: '/auth/forgot-password', element: <ForgotPassword /> },
      { path: '/auth/forgot-password2', element: <ForgotPassword2 /> },
      { path: '/auth/two-steps', element: <TwoSteps /> },
      { path: '/auth/two-steps2', element: <TwoSteps2 /> },
      { path: '/auth/maintenance', element: <Maintenance /> },
      { path: '/landingpage', element: <ComingSoon pageName="The landing page" /> },
      { path: '/pages/pricing', element: <ComingSoon pageName="The pricing page" /> },
      { path: '/pages/faq', element: <ComingSoon pageName="The FAQ page" /> },
      { path: '/frontend-pages/homepage', element: <Homepage /> },
      { path: '/demo', element: <OrthodoxMetricsDemo /> },
      { path: '/assign-task', element: <AssignTaskPage /> },
      { path: '/frontend-pages/about', element: <ComingSoon pageName="The about page" /> },
      { path: '/frontend-pages/contact', element: <ComingSoon pageName="The contact page" /> },
      { path: '/frontend-pages/portfolio', element: <ComingSoon pageName="The portfolio page" /> },
      { path: '/frontend-pages/pricing', element: <ComingSoon pageName="The pricing page" /> },
      { path: '/blog', element: <BlogFeed /> },
      { path: '/blog/:slug', element: <BlogPost /> },
      { path: '/frontend-pages/blog', element: <ComingSoon pageName="The blog page" /> },
      { path: '/frontend-pages/blog/detail/:id', element: <BlogPost /> },
      { path: '*', element: <Navigate to="/auth/404" /> },
const router = createBrowserRouter(Router);

--- PROTECTED ROUTES ---
import { createBrowserRouter, Navigate } from 'react-router-dom';
import Loadable from '../layouts/full/shared/loadable/Loadable';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import ComingSoon from '../components/shared/ComingSoon';
import AdminErrorBoundary from '../components/ErrorBoundary/AdminErrorBoundary';
--
const WidgetCharts = Loadable(lazy(() => import('../views/widgets/charts/WidgetCharts')));

// authentication
const OrthodoxLogin = Loadable(lazy(() => import('../views/authentication/auth1/OrthodoxLogin')));
const Login2 = Loadable(lazy(() => import('../views/authentication/auth2/Login2')));
const Register = Loadable(lazy(() => import('../views/authentication/auth1/Register')));
const Register2 = Loadable(lazy(() => import('../views/authentication/auth2/Register2')));
const ForgotPassword = Loadable(lazy(() => import('../views/authentication/auth1/ForgotPassword')));
const ForgotPassword2 = Loadable(
  lazy(() => import('../views/authentication/auth2/ForgotPassword2')),
);
const TwoSteps = Loadable(lazy(() => import('../views/authentication/auth1/TwoSteps')));
const TwoSteps2 = Loadable(lazy(() => import('../views/authentication/auth2/TwoSteps2')));
const Error = Loadable(lazy(() => import('../views/authentication/Error')));
const Unauthorized = Loadable(lazy(() => import('../views/authentication/Unauthorized')));
const Maintenance = Loadable(lazy(() => import('../views/authentication/Maintenance')));

// landingpage
--
        exact: true,
        element: (
          <ProtectedRoute requiredPermission="view_dashboard">
            <ModernDash />
          </ProtectedRoute>
        )
      },
--
        exact: true,
        element: (
          <ProtectedRoute requiredPermission="view_dashboard">
            <EcommerceDash />
          </ProtectedRoute>
        )
      },
--
        exact: true,
        element: (
          <ProtectedRoute requiredPermission="admin_dashboard">
            <OrthodoxMetricsDash />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/contacts',
        element: (
          <ProtectedRoute>
            <Contacts />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/chats',
        element: (
          <ProtectedRoute>
            <ChatApp />
          </ProtectedRoute>
        )
      },
--
        path: '/tools/site-structure',
        element: (
          <ProtectedRoute requiredPermission="admin">
            <SiteStructureVisualizer />
          </ProtectedRoute>
        )
      },
--
        path: '/social/blog',
        element: (
          <ProtectedRoute>
            <SocialBlogList />
          </ProtectedRoute>
        )
      },
--
        path: '/social/blog/create',
        element: (
          <ProtectedRoute>
            <SocialBlogCreate />
          </ProtectedRoute>
        )
      },
--
        path: '/social/blog/edit/:id',
        element: (
          <ProtectedRoute>
            <SocialBlogEdit />
          </ProtectedRoute>
        )
      },
--
        path: '/social/blog/post/:id',
        element: (
          <ProtectedRoute>
            <SocialBlogView />
          </ProtectedRoute>
        )
      },
--
        path: '/social/friends',
        element: (
          <ProtectedRoute>
            <SocialFriends />
          </ProtectedRoute>
        )
      },
--
        path: '/social/chat',
        element: (
          <ProtectedRoute>
            <SocialChat />
          </ProtectedRoute>
        )
      },
--
        path: '/social/notifications',
        element: (
          <ProtectedRoute>
            <SocialNotifications />
          </ProtectedRoute>
        )
      },
--
        path: '/orthodox-headlines',
        element: (
          <ProtectedRoute>
            <OrthodoxHeadlines />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/email',
        element: (
          <ProtectedRoute>
            <Email />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/notes',
        element: (
          <ProtectedRoute>
            <Notes />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/tickets',
        element: (
          <ProtectedRoute>
            <Tickets />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/shop',
        element: (
          <ProtectedRoute>
            <Ecommerce />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/eco-product-list',
        element: (
          <ProtectedRoute>
            <EcomProductList />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/eco-checkout',
        element: (
          <ProtectedRoute>
            <EcomProductCheckout />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/add-product',
        element: (
          <ProtectedRoute>
            <EcommerceAddProduct />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/edit-product',
        element: (
          <ProtectedRoute>
            <EcommerceEditProduct />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ecommerce/detail/:id',
        element: (
          <ProtectedRoute>
            <EcommerceDetail />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/followers',
        element: (
          <ProtectedRoute>
            <Followers />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/friends',
        element: (
          <ProtectedRoute>
            <Friends />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/gallery',
        element: (
          <ProtectedRoute>
            <Gallery />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/kanban',
        element: (
          <ProtectedRoute>
            <Kanban />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/invoice/list',
        element: (
          <ProtectedRoute requiredPermission="view_invoices">
            <InvoiceList />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/invoice/create',
        element: (
          <ProtectedRoute requiredPermission="manage_invoices">
            <InvoiceCreate />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/invoice/detail/:id',
        element: (
          <ProtectedRoute requiredPermission="view_invoices">
            <InvoiceDetail />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/invoice/edit/:id',
        element: (
          <ProtectedRoute requiredPermission="manage_invoices">
            <InvoiceEdit />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/church-management',
        element: (
          <ProtectedRoute requiredPermission="manage_churches">
            <ChurchList />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/church-management/create',
        element: (
          <ProtectedRoute>
            <ChurchForm />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/church-management/edit/:id',
        element: (
          <ProtectedRoute requiredPermission="manage_churches">
            <ChurchForm />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/church-management/wizard',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <ChurchSetupWizard />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/client-management',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
            <ClientManagementDashboard />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/client-management/add',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
            <AddNewClient />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/client-management/create',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
            <AddNewClient />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/client-management/church-setup',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
            <ChurchSetup />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/client-management/template-manager',
        element: (
          <ProtectedRoute requiredPermission="manage_clients">
            <TemplateManager />
          </ProtectedRoute>
        )
      },
--
        path: '/user-profile',
        element: (
          <ProtectedRoute>
            <UserProfile />
          </ProtectedRoute>
        )
      },
--
        path: '/settings/menu',
        element: (
          <ProtectedRoute>
            <AdminErrorBoundary>
              <MenuSettings />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/settings/jit-terminal',
        element: (
          <ProtectedRoute>
            <AdminErrorBoundary>
              <JITTerminalAccess />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/users',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <UserManagement />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/menu-permissions',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <MenuPermissions />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/menu-management',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <MenuManagement />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/roles',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <RoleManagement />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/settings',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminSettings />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/tools/survey',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <OMSiteSurvey />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/tools/page-editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'church_admin', 'admin']}>
            <AdminErrorBoundary>
              <PageEditor />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/blog-admin',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'church_admin', 'admin']}>
            <AdminErrorBoundary>
              <BlogAdmin />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/logs',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <ActivityLogs />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/sessions',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <SessionManagement />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/activity-logs',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <ActivityLogs />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/script-runner',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <ScriptRunner />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/ai',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AIAdminPanel />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/site-editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <SiteEditor />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/jit-terminal',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <JITTerminalConsole />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/headlines-config',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <HeadlineSourcePicker />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminPageFallback />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/dashboard',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <SuperAdminDashboard />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/orthodox-metrics',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'admin']}>
            <AdminErrorBoundary>
              <OrthodoxMetricsDash />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/bigbook',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <OMBigBook />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/omai/mobile',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <OMAIDiscoveryPanelMobile />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/bigbook/omlearn/*',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <OMLearn />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/admin/build',
        element: (
          <ProtectedRoute requiredRole={['super_admin', 'dev_admin']}>
            <AdminErrorBoundary>
              <BuildConsole />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/sandbox/ai-lab',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <OMAILab />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/sandbox/project-generator',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <ProjectGenerator />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/omb/editor',
        element: (
          <ProtectedRoute requiredRole={['super_admin']}>
            <AdminErrorBoundary>
              <OMBEditor />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/demos/advanced-records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager']}>
            <AdvancedRecordsDemo />
          </ProtectedRoute>
        )
      },
--
        path: '/demos/editable-record',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <EditableRecordPage />
          </ProtectedRoute>
        )
      },
--
        path: '/demos/editable-record/:recordType',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <EditableRecordPage />
          </ProtectedRoute>
        )
      },
--
        path: '/demos/editable-record/:recordType/:recordId',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <EditableRecordPage />
          </ProtectedRoute>
        )
      },
--
        path: '/demos/table-tester',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <TableThemeEditor />
          </ProtectedRoute>
        )
      },
--
        path: '/demos/record-generator',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <RecordGeneratorPage />
          </ProtectedRoute>
        )
      },
--
               path: '/demos/site-editor',
               element: (
                 <ProtectedRoute requiredRole={['super_admin']}>
                   <SiteEditorDemo />
                 </ProtectedRoute>
               )
             },
--
              path: '/demos/auto-fix',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                  <AutoFixDemo />
                </ProtectedRoute>
              )
            },
--
              path: '/demos/gitops',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                  <GitOpsDemo />
                </ProtectedRoute>
              )
            },
--
              path: '/demos/vrt',
              element: (
                <ProtectedRoute requiredRole={['super_admin']}>
                  <VisualTestDemo />
                </ProtectedRoute>
              )
            },
--
        path: '/records/baptism',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <SSPPOCRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/saints-peter-and-paul-Records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <ChurchRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/:churchId(\\d+)-records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <ChurchRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/:churchName-Records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <UnifiedRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <ChurchRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/records',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <RecordsManagement />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/records/baptism',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <SSPPOCRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/records/marriage',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <SSPPOCRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/records/funeral',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <SSPPOCRecordsPage />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/records-ui',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'manager', 'user']}>
            <ChurchRecordsList />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/churches',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <ChurchAdminList />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/churches',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <ChurchAdminList />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/church/:id',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <ChurchAdminPanel />
          </ProtectedRoute>
        )
      },
--
        path: '/admin/church/:id/ocr',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <OCXDataPanel />
          </ProtectedRoute>
        )
      },
--
        path: '/notifications',
        element: (
          <ProtectedRoute>
            <NotificationList />
          </ProtectedRoute>
        )
      },
--
        path: '/settings/notifications',
        element: (
          <ProtectedRoute>
            <NotificationPreferences />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/calendar',
        element: (
          <ProtectedRoute requiredPermission="view_calendar">
            <Calendar />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/ocr-admin',
        element: (
          <ProtectedRoute requiredPermission="access_ocr">
            <OCRUpload />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/site-clone',
        element: (
          <ProtectedRoute requiredPermission="access_admin">
            <SiteClone />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/logs',
        element: (
          <ProtectedRoute>
            <Logs />
          </ProtectedRoute>
        )
      },
--
        path: '/addons/parish-map',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <DynamicAddonRoute route="/addons/parish-map" />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/addons/*',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin']}>
            <AdminErrorBoundary>
              <DynamicAddonRoute route={window.location.pathname} />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/bigbook/:componentId',
        element: (
          <ProtectedRoute requiredRole={['admin', 'super_admin', 'editor']}>
            <AdminErrorBoundary>
              <BigBookDynamicRoute />
            </AdminErrorBoundary>
          </ProtectedRoute>
        )
      },
--
        path: '/apps/cms/page-editor/:slug?',
        element: (
          <ProtectedRoute>
            <SimplePageEditorTest />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/cms/page-editor-enhanced/:slug?',
        element: (
          <ProtectedRoute>
            <EnhancedPageEditorTest />
          </ProtectedRoute>
        )
      },
--
        path: '/apps/cms/page-editor-legacy/:slug?',
        element: (
          <ProtectedRoute>
            <PageEditorTest />
          </ProtectedRoute>
        )
      },
      { path: '*', element: <Navigate to="/auth/404" /> },
    ],
  },
--
    element: <BlankLayout />,
    children: [
      { path: '/auth/404', element: <Error /> },
      { path: '/auth/unauthorized', element: <Unauthorized /> },
      { path: '/auth/login', element: <OrthodoxLogin /> },
      { path: '/auth/login2', element: <Login2 /> },
      { path: '/auth/register', element: <Register /> },
      { path: '/auth/register2', element: <Register2 /> },
      { path: '/auth/forgot-password', element: <ForgotPassword /> },
      { path: '/auth/forgot-password2', element: <ForgotPassword2 /> },
      { path: '/auth/two-steps', element: <TwoSteps /> },
      { path: '/auth/two-steps2', element: <TwoSteps2 /> },
      { path: '/auth/maintenance', element: <Maintenance /> },
      { path: '/landingpage', element: <ComingSoon pageName="The landing page" /> },
      { path: '/pages/pricing', element: <ComingSoon pageName="The pricing page" /> },
--
      { path: '/frontend-pages/blog', element: <ComingSoon pageName="The blog page" /> },
      { path: '/frontend-pages/blog/detail/:id', element: <BlogPost /> },
      { path: '*', element: <Navigate to="/auth/404" /> },
    ],
  },

=== Routing Analysis ===
File: front-end/src/components/admin/BigBookDynamicRoute.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- ROUTE DEFINITIONS ---
    path: string;
const BigBookDynamicRoute: React.FC = () => {
export default BigBookDynamicRoute; 

--- PROTECTED ROUTES ---
No protected routes found

=== Routing Analysis ===
File: front-end/src/components/auth/ProtectedRoute.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- ROUTE DEFINITIONS ---
interface ProtectedRouteProps {
const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
export default ProtectedRoute;

--- PROTECTED ROUTES ---
import { Box, CircularProgress } from '@mui/material';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: UserRole | UserRole[];
--
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredRole,
  requiredPermission,
}) => {
  const { authenticated, loading, hasRole, hasPermission } = useAuth();

  if (loading) {
--
  }

  if (!authenticated) {
    return <Navigate to="/auth/login" replace />;
  }

  // Check role requirements
  if (requiredRole && !hasRole(requiredRole)) {
    return <Navigate to="/auth/unauthorized" replace />;
  }

  // Check permission requirements
  if (requiredPermission && !hasPermission(requiredPermission)) {
    return <Navigate to="/auth/unauthorized" replace />;
  }

--
};

export default ProtectedRoute;

