const { getAppPool } = require('@/config/db-compat');
/**
 * Cross-Database Connection Utilities for OCR System
 * Handles connections between orthodoxmetrics_db ‚Üî ssppoc_records_db ‚Üî orthodoxmetrics_ocr_db
 * Generated by Phase 1 setup script
 */

const mysql = require('mysql2/promise');
const { promisePool: centralPool } = require('@/config/db-compat');

// Database Configuration
const DB_CONFIG = {
  host: 'localhost',
  user: 'orthodoxapps',
  password: 'Summerof1982@!',
  charset: 'utf8mb4',
  connectionLimit: 10,
  acquireTimeout: 60000,
  timeout: 60000
};

// Connection pools for each database
let recordsPool = null;
let ocrPool = null;

/**
 * Get connection pool for Records Database (ssppoc_records_db)
 */
function getRecordsDbPool() {
  if (!recordsPool) {
    recordsPool = mysql.createPool({
      ...DB_CONFIG,
      database: 'ssppoc_records_db'
    });
  }
  return recordsPool;
}

/**
 * Get connection pool for OCR Processing Database (orthodoxmetrics_ocr_db)
 */
function getOcrDbPool() {
  if (!ocrPool) {
    ocrPool = mysql.createPool({
      ...DB_CONFIG,
      database: process.env.OCR_DATABASE || 'orthodoxmetrics_ocr_db'
    });
  }
  return ocrPool;
}

/**
 * Get single connection to Records Database
 */
async function getRecordsDbConnection() {
  const pool = getRecordsDbPool();
  return await pool.getConnection();
}

/**
 * Get single connection to OCR Database  
 */
async function getOcrDbConnection() {
  const pool = getOcrDbPool();
  return await pool.getConnection();
}

/**
 * Execute query on Records Database
 */
async function executeRecordsQuery(query, params = []) {
  const pool = getRecordsDbPool();
  return await getAppPool().query(query, params);
}

/**
 * Execute query on OCR Database
 */
async function executeOcrQuery(query, params = []) {
  const pool = getOcrDbPool();
  return await getAppPool().query(query, params);
}

/**
 * Execute query on Central Database (orthodoxmetrics_db)
 */
async function executeCentralQuery(query, params = []) {
  return await getAppPool().query(query, params);
}

/**
 * Transaction wrapper for Records Database
 */
async function recordsTransaction(callback) {
  const connection = await getRecordsDbConnection();
  try {
    await connection.beginTransaction();
    const result = await callback(connection);
    await connection.commit();
    return result;
  } catch (error) {
    await connection.rollback();
    throw error;
  } finally {
    connection.release();
  }
}

/**
 * Transaction wrapper for OCR Database
 */
async function ocrTransaction(callback) {
  const connection = await getOcrDbConnection();
  try {
    await connection.beginTransaction();
    const result = await callback(connection);
    await connection.commit();
    return result;
  } catch (error) {
    await connection.rollback();
    throw error;
  } finally {
    connection.release();
  }
}

/**
 * Close all database connections gracefully
 */
async function closeAllConnections() {
  const promises = [];
  
  if (recordsPool) {
    promises.push(recordsPool.end());
  }
  
  if (ocrPool) {
    promises.push(ocrPool.end());
  }
  
  await Promise.all(promises);
  console.log('‚úÖ All database connections closed');
}

/**
 * Test database connections
 */
async function testConnections() {
  console.log('üîç Testing database connections...');
  
  try {
    // Test Records DB
    const recordsPool = getRecordsDbPool();
    await getAppPool().query('SELECT 1 as test');
    console.log('‚úÖ Records database connection OK');
    
    // Test OCR DB
    const ocrPool = getOcrDbPool();
    await getAppPool().query('SELECT 1 as test');
    console.log('‚úÖ OCR database connection OK');
    
    // Test Central DB
    await getAppPool().query('SELECT 1 as test');
    console.log('‚úÖ Central database connection OK');
    
    return true;
  } catch (error) {
    console.error('‚ùå Database connection test failed:', error.message);
    return false;
  }
}

module.exports = {
  getRecordsDbPool,
  getOcrDbPool,
  getRecordsDbConnection,
  getOcrDbConnection,
  executeRecordsQuery,
  executeOcrQuery,
  executeCentralQuery,
  recordsTransaction,
  ocrTransaction,
  closeAllConnections,
  testConnections
};
