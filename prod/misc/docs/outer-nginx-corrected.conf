server {
    listen 80;
    server_name orthodoxmetrics.com www.orthodoxmetrics.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name orthodoxmetrics.com www.orthodoxmetrics.com;

    ssl_certificate     /etc/ssl/certs/orthodoxmetrics-full-cert.pem;
    ssl_certificate_key /etc/ssl/private/orthodoxmetrics.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    access_log /var/log/nginx/orthodoxmetrics.access.log;
    error_log  /var/log/nginx/orthodoxmetrics.error.log;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # FRONTEND
    location / {
        proxy_pass         http://192.168.1.239:80;
        proxy_http_version 1.1;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_buffering    off;

        # Session cookie forwarding (no domain rewriting needed here)
        proxy_set_header   Cookie $http_cookie;
        proxy_pass_header  Set-Cookie;
        proxy_cookie_path  / /;
    }

    # BACKEND /api
    location /api/ {
        proxy_pass         http://192.168.1.239:3002/api/;
        proxy_http_version 1.1;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "upgrade";
        proxy_buffering    off;

        # Session cookie forwarding (no domain rewriting needed here)
        proxy_set_header   Cookie $http_cookie;
        proxy_pass_header  Set-Cookie;
        proxy_cookie_path  / /;

        # CORS Support
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With" always;

        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
            add_header Access-Control-Allow-Headers "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    client_max_body_size 50M;
}
