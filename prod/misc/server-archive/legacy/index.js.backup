// 📁 backend/server/index.js
require('dotenv').config();

const express = require('express');
const morgan = require('morgan');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const sessionMW = require('./config/session');

// ─── API ROUTES ─────────────────────────────────────────────────────
const authRoutes = require('./routes/auth');
const baptismRouter = require('./routes/baptism');
const marriageRouter = require('./routes/marriage');
const funeralRouter = require('./routes/funeral');
const uniqueValuesRouter = require('./routes/uniqueValues');
const baptismCertificatesRouter = require('./routes/baptismCertificates');
const marriageCertificatesRouter = require('./routes/marriageCertificates');
const ocrRouter = require('./routes/ocr');
const calendarRouter = require('./routes/calendar');
const dashboardRouter = require('./routes/dashboard');
const invoicesRouter = require('./routes/invoices');

const app = express();

const allowedOrigins = [
  'http://localhost:3000',
  'http://localhost:3001', 
  'http://localhost:5173',
  'http://localhost:5174',
  'http://127.0.0.1:3000',
  'http://127.0.0.1:3001',
  'http://127.0.0.1:5173',
  'http://127.0.0.1:5174',
  'http://192.168.1.239',
  'http://192.168.1.239:3000',
  'http://192.168.1.239:3001',
  'http://192.168.1.239:5173',
  'http://192.168.1.239:5174',
  'http://192.168.1.221',
  'http://192.168.1.221:3000',
  'http://192.168.1.221:3001',
  'http://192.168.1.221:5173',
  'http://192.168.1.221:5174',
  'https://orthodmetrics.com'
];
const path   = require('path');
const fs     = require('fs');

const sessionMW = require('./config/session');
const db        = require('./config/db');

const authRoutes = require('./routes/auth');
const baptismRouter = require('./routes/baptism');
const marriageRouter = require('./routes/marriage');
const funeralRouter = require('./routes/funeral');
const uniqueValuesRouter = require('./routes/unique-values');
const dropdownOptionsRouter = require('./routes/dropdownOptions');
const baptismCertificatesRouter = require('./routes/baptismCertificates');
const marriageCertificatesRouter = require('./routes/marriageCertificates');
const ocrRouter = require('./routes/ocr');
const calendarRouter = require('./routes/calendar');
const dashboardRouter = require('./routes/dashboard');
const invoicesRouter = require('./routes/invoices');
const invoicesMultilingualRouter = require('./routes/invoicesMultilingual');
const enhancedInvoicesRouter = require('./routes/enhancedInvoices');
const billingRouter = require('./routes/billing');
const churchesRouter = require('./routes/churches');
const provisionRouter = require('./routes/provision');
const certificatesRouter = require('./routes/certificates');
const ocrSessionsRouter = require('./routes/ocrSessions');
// const funeralCertificatesRouter = require('./routes/funeralCertificates'); // No funeral certificates yet


const app  = express();
const cors = require('cors');

const allowedOrigins = [
  'http://localhost:3000',
  'http://localhost:3001',
  'http://127.0.0.1:3000',
  'http://127.0.0.1:3001',
  'http://192.168.1.239',
  'http://192.168.1.221',
  'http://192.168.1.221:3000',
  'http://192.168.1.221:3001',
  'https://orthodmetrics.com'
];

// ─── CORS SETUP ─────────────────────────────────────────────────────
app.use(cors({
  origin: function (origin, callback) {
    if (!origin) return callback(null, true);
    if (allowedOrigins.includes(origin)) return callback(null, true);
    callback(new Error('CORS policy does not allow access from origin: ' + origin));
  },
  credentials: true
}));

const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || '0.0.0.0';

// ─── MIDDLEWARE ─────────────────────────────────────────────────────
app.use(morgan('dev'));
app.use(express.json());
app.use(sessionMW);

// ─── ROUTES ─────────────────────────────────────────────────────────
app.use('/api/auth', authRoutes);
app.use('/api/baptism-records', baptismRouter);
app.use('/api/marriage-records', marriageRouter);
app.use('/api/funeral-records', funeralRouter);
app.use('/api/unique-values', uniqueValuesRouter);
app.use('/api/baptismCertificates', baptismCertificatesRouter);
app.use('/api/certificate/baptism', baptismCertificatesRouter);
app.use('/api/marriageCertificates', marriageCertificatesRouter);
app.use('/api/certificate/marriage', marriageCertificatesRouter);
app.use('/api', ocrRouter);
app.use('/api/calendar', calendarRouter);
app.use('/api/dashboard', dashboardRouter);
app.use('/api/invoices', invoicesRouter);
app.use('/api/invoices-ml', invoicesMultilingualRouter);
app.use('/api/enhanced-invoices', enhancedInvoicesRouter);
app.use('/api/billing', billingRouter);
app.use('/api/churches', churchesRouter);
app.use('/api/provision', provisionRouter);
app.use('/api/certificates', certificatesRouter);
app.use('/api/ocr', ocrSessionsRouter);
// app.use('/api/funeralCertificates', funeralCertificatesRouter); // No funeral certificates yet

// ⬇️ Mount dropdownOptions routes here to prevent override
app.use('/api', dropdownOptionsRouter);

// Additional utility routes expected by frontend
app.get('/api/dropdown-options', (req, res) => {
  // Return dropdown options for forms
  res.json({
    countries: ['United States', 'Canada', 'Greece', 'Romania', 'Russia'],
    states: ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA'],
    languages: ['en', 'gr', 'ru', 'ro'],
    roles: ['admin', 'priest', 'supervisor', 'volunteer', 'viewer', 'church'],
    recordTypes: ['baptism', 'marriage', 'funeral']
  });
});

app.get('/api/config', (req, res) => {
  // Return app configuration
  res.json({
    appName: 'OrthodoxMetrics',
    version: '1.0.0',
    supportedLanguages: ['en', 'gr', 'ru', 'ro'],
    features: {
      ocr: true,
      certificates: true,
      invoices: true,
      calendar: true
    }
  });
});

app.get('/api/search', (req, res) => {
  // Basic search functionality placeholder
  const { q, type } = req.query;
  res.json({
    query: q,
    type: type || 'all',
    results: [],
    message: 'Search functionality not yet implemented'
  });
});

// ─── HEALTHCHECK ────────────────────────────────────────────────────
app.get('/api/health', async (req, res) => {
  try {
    const dbStatus = await db.testConnection();
    res.json({
      status: dbStatus.success ? 'ok' : 'error',
      user: req.session.user || null,
      database: dbStatus
    });
  } catch (err) {
    res.status(500).json({ status: 'error', message: err.message });
  }
});

// ─── 404 HANDLER ────────────────────────────────────────────────────
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'Not found' });
});

// ─── STATIC FRONTEND ────────────────────────────────────────────────
app.use('/assets', express.static(path.resolve(__dirname, '../src/assets')));

// ─── START SERVER ───────────────────────────────────────────────────
app.listen(PORT, HOST, () => {
  console.log(`Server running at http://${HOST}:${PORT}`);
});
