import { OMAIAgent, OMAIAgentContext, OMAITaskResult } from './types';
import fs from 'fs/promises';
import path from 'path';

export class DocBotAgent implements OMAIAgent {
  id = 'omai-doc-bot';
  name = 'Documentation Bot';
  domain = 'docs';
  triggers = ['schedule', 'file change'];
  canAutofix = true;
  capabilities = ['detect', 'recommend', 'autofix', 'generate', 'report'];

  async run(context: OMAIAgentContext): Promise<OMAITaskResult> {
    const { tenant, target } = context;
    console.log(`üìö DocBot running for tenant: ${tenant}, target: ${target}`);

    try {
      const issues = await this.detectMissingDocs(tenant);
      const recommendations = await this.generateRecommendations(issues);
      
      if (this.canAutofix && issues.length > 0) {
        const fixes = await this.autofixIssues(issues, tenant);
        return {
          success: true,
          output: `Generated documentation for ${fixes.length} components`,
          actions: ['detect', 'autofix'],
          filesCreated: fixes,
          issuesFound: issues.length,
          recommendations
        };
      }

      return {
        success: true,
        output: `Found ${issues.length} documentation issues`,
        actions: ['detect', 'recommend'],
        issuesFound: issues.length,
        recommendations
      };
    } catch (error) {
      return {
        success: false,
        output: `Documentation analysis failed: ${error}`,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  private async detectMissingDocs(tenant?: string): Promise<string[]> {
    const missingDocs: string[] = [];
    
    try {
      // Check for missing component documentation
      const componentsDir = path.join(process.cwd(), 'front-end', 'src', 'components');
      const docsDir = path.join(process.cwd(), 'docs', 'OM-BigBook', 'pages', 'components');
      
      const [components, existingDocs] = await Promise.all([
        this.getComponentFiles(componentsDir),
        this.getExistingDocs(docsDir)
      ]);

      for (const component of components) {
        const docFile = `${component}.md`;
        if (!existingDocs.includes(docFile)) {
          missingDocs.push(component);
        }
      }

      console.log(`üîç Found ${missingDocs.length} missing documentation files`);
      return missingDocs;
    } catch (error) {
      console.error('Error detecting missing docs:', error);
      return [];
    }
  }

  private async getComponentFiles(componentsDir: string): Promise<string[]> {
    try {
      const files = await fs.readdir(componentsDir, { recursive: true });
      return files
        .filter((file: string) => file.endsWith('.tsx') || file.endsWith('.ts'))
        .map((file: string) => path.basename(file, path.extname(file)))
        .filter((name: string) => name !== 'index');
    } catch (error) {
      console.error('Error reading components directory:', error);
      return [];
    }
  }

  private async getExistingDocs(docsDir: string): Promise<string[]> {
    try {
      const files = await fs.readdir(docsDir);
      return files.filter(file => file.endsWith('.md'));
    } catch (error) {
      console.error('Error reading docs directory:', error);
      return [];
    }
  }

  private async generateRecommendations(issues: string[]): Promise<string[]> {
    return issues.map(issue => 
      `Generate documentation for component: ${issue}`
    );
  }

  private async autofixIssues(issues: string[], tenant?: string): Promise<string[]> {
    const createdFiles: string[] = [];
    
    for (const component of issues) {
      try {
        const docContent = await this.generateDocContent(component, tenant);
        const docPath = path.join(
          process.cwd(),
          'docs',
          'OM-BigBook',
          'pages',
          'components',
          `${component}.md`
        );
        
        await fs.writeFile(docPath, docContent, 'utf-8');
        createdFiles.push(docPath);
        
        console.log(`‚úÖ Generated documentation for ${component}`);
      } catch (error) {
        console.error(`‚ùå Failed to generate doc for ${component}:`, error);
      }
    }
    
    return createdFiles;
  }

  private async generateDocContent(component: string, tenant?: string): Promise<string> {
    const template = `# ${component}

## Overview
Auto-generated documentation for the ${component} component.

## Usage
\`\`\`tsx
import { ${component} } from '@/components/${component}';

<${component} />
\`\`\`

## Props
| Prop | Type | Default | Description |
|------|------|---------|-------------|
| (To be documented) | - | - | - |

## Examples
### Basic Usage
\`\`\`tsx
<${component} />
\`\`\`

## Notes
- This documentation was auto-generated by OMAI DocBot
- Last updated: ${new Date().toISOString()}
- Tenant: ${tenant || 'N/A'}

## Related Components
- (To be linked)

## API Endpoints
- (To be documented)
`;

    return template;
  }
}

export const docBotAgent = new DocBotAgent(); 