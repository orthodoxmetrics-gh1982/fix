const express = require('express');
const router = express.Router();
const { promisePool } = require('../../config/db');

// <%= component.name %> API Routes
// Generated from OMAI prompt: <%= prompt %>

// GET <%= component.route %> - Get all <%= component.name.toLowerCase() %> records
router.get('<%= component.route %>', async (req, res) => {
  try {
    const [rows] = await promisePool.query(
      'SELECT * FROM <%= component.dbTable %> ORDER BY created_at DESC'
    );

    res.json({
      success: true,
      data: rows,
      count: rows.length
    });
  } catch (error) {
    console.error('Error fetching <%= component.name.toLowerCase() %>:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch <%= component.name.toLowerCase() %> data'
    });
  }
});

// GET <%= component.route %>/:id - Get single <%= component.name.toLowerCase() %> record
router.get('<%= component.route %>/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const [rows] = await promisePool.query(
      'SELECT * FROM <%= component.dbTable %> WHERE id = ?',
      [id]
    );

    if (rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: '<%= component.name %> not found'
      });
    }

    res.json({
      success: true,
      data: rows[0]
    });
  } catch (error) {
    console.error('Error fetching <%= component.name.toLowerCase() %>:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch <%= component.name.toLowerCase() %> data'
    });
  }
});

// POST <%= component.route %> - Create new <%= component.name.toLowerCase() %> record
router.post('<%= component.route %>', async (req, res) => {
  try {
    const { <% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %><%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %> } = req.body;

    const [result] = await promisePool.query(
      `INSERT INTO <%= component.dbTable %> (<% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %><%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %>) VALUES (<% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %>?<%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %>)`,
      [<% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %><%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %>]
    );

    res.status(201).json({
      success: true,
      message: '<%= component.name %> created successfully',
      id: result.insertId
    });
  } catch (error) {
    console.error('Error creating <%= component.name.toLowerCase() %>:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create <%= component.name.toLowerCase() %>'
    });
  }
});

// PUT <%= component.route %>/:id - Update <%= component.name.toLowerCase() %> record
router.put('<%= component.route %>/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { <% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %><%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %> } = req.body;

    const [result] = await promisePool.query(
      `UPDATE <%= component.dbTable %> SET <% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %> = ?<%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %> WHERE id = ?`,
      [<% fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').forEach((field, index) => { %><%= field.name %><%= index < fields.filter(f => f.name !== 'id' && f.name !== 'created_at' && f.name !== 'updated_at').length - 1 ? ', ' : '' %><% }); %>, id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        error: '<%= component.name %> not found'
      });
    }

    res.json({
      success: true,
      message: '<%= component.name %> updated successfully'
    });
  } catch (error) {
    console.error('Error updating <%= component.name.toLowerCase() %>:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to update <%= component.name.toLowerCase() %>'
    });
  }
});

// DELETE <%= component.route %>/:id - Delete <%= component.name.toLowerCase() %> record
router.delete('<%= component.route %>/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const [result] = await promisePool.query(
      'DELETE FROM <%= component.dbTable %> WHERE id = ?',
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({
        success: false,
        error: '<%= component.name %> not found'
      });
    }

    res.json({
      success: true,
      message: '<%= component.name %> deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting <%= component.name.toLowerCase() %>:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to delete <%= component.name.toLowerCase() %>'
    });
  }
});

module.exports = router; 