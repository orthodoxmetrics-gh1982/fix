import { BoundComponent } from '../../front-end/src/pages/omb/types';
import * as ejs from 'ejs';
import * as fs from 'fs/promises';
import * as path from 'path';

export interface GeneratedFiles {
  componentFile: string;
  apiFile: string;
  docFile: string;
}

export interface GenerationOptions {
  commitToGit?: boolean;
  previewOnly?: boolean;
  user?: string;
}

export async function generateFromComponent(
  component: BoundComponent,
  options: GenerationOptions = {}
): Promise<GeneratedFiles> {
  const { commitToGit = false, previewOnly = false, user = 'system' } = options;

  try {
    // Load templates
    const componentTemplate = await fs.readFile(
      path.join(__dirname, 'templates/component.ejs'),
      'utf8'
    );
    const apiTemplate = await fs.readFile(
      path.join(__dirname, 'templates/api-route.ejs'),
      'utf8'
    );
    const docTemplate = await fs.readFile(
      path.join(__dirname, 'templates/markdown-doc.ejs'),
      'utf8'
    );

    // Generate files using EJS
    const componentCode = ejs.render(componentTemplate, component);
    const apiCode = ejs.render(apiTemplate, component);
    const docCode = ejs.render(docTemplate, component);

    // Define file paths
    const componentFile = `src/pages/auto/${component.id}.tsx`;
    const apiFile = `src/api/auto/${component.id}.ts`;
    const docFile = `docs/OM-BigBook/pages/components/${component.id}.md`;

    if (!previewOnly) {
      // Ensure directories exist
      await ensureDirectories([
        path.dirname(componentFile),
        path.dirname(apiFile),
        path.dirname(docFile)
      ]);

      // Write files
      await fs.writeFile(componentFile, componentCode);
      await fs.writeFile(apiFile, apiCode);
      await fs.writeFile(docFile, docCode);

      // Log generation
      await logGeneration(component, [componentFile, apiFile, docFile], user);

      // Optional Git commit
      if (commitToGit) {
        await commitToGit(component, [componentFile, apiFile, docFile], user);
      }
    }

    return {
      componentFile,
      apiFile,
      docFile
    };

  } catch (error) {
    console.error('Code generation failed:', error);
    throw new Error(`Failed to generate code for component ${component.id}: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

async function ensureDirectories(directories: string[]): Promise<void> {
  for (const dir of directories) {
    try {
      await fs.access(dir);
    } catch {
      await fs.mkdir(dir, { recursive: true });
    }
  }
}

async function logGeneration(
  component: BoundComponent,
  files: string[],
  user: string
): Promise<void> {
  const logEntry = {
    timestamp: new Date().toISOString(),
    componentId: component.id,
    componentName: component.name,
    files,
    user,
    committed: false // Will be updated if Git commit succeeds
  };

  const logFile = 'logs/omb-codegen.log';
  
  try {
    // Ensure logs directory exists
    await fs.mkdir(path.dirname(logFile), { recursive: true });
    
    // Append to log file
    await fs.appendFile(logFile, JSON.stringify(logEntry) + '\n');
  } catch (error) {
    console.error('Failed to log generation:', error);
  }
}

async function commitToGit(
  component: BoundComponent,
  files: string[],
  user: string
): Promise<void> {
  try {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const execAsync = promisify(exec);

    // Stage files
    for (const file of files) {
      await execAsync(`git add ${file}`);
    }

    // Commit with conventional commit message
    const commitMessage = `feat(omb): generated ${component.id} component, route, and doc

Generated from OMB component:
- Name: ${component.name}
- Type: ${component.type}
- Route: ${component.route}
- DB Table: ${component.dbTable}
- Roles: ${component.roles.join(', ')}

Files generated:
${files.map(f => `- ${f}`).join('\n')}

Generated by: ${user}
Generated at: ${new Date().toISOString()}`;

    await execAsync(`git commit -m "${commitMessage.replace(/"/g, '\\"')}"`);

    // Update log entry to mark as committed
    await updateLogEntry(component.id, true);

  } catch (error) {
    console.error('Git commit failed:', error);
    throw new Error(`Failed to commit generated files: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

async function updateLogEntry(componentId: string, committed: boolean): Promise<void> {
  try {
    const logFile = 'logs/omb-codegen.log';
    const logContent = await fs.readFile(logFile, 'utf8');
    
    const lines = logContent.split('\n').filter(line => line.trim());
    const updatedLines = lines.map(line => {
      try {
        const entry = JSON.parse(line);
        if (entry.componentId === componentId) {
          entry.committed = committed;
        }
        return JSON.stringify(entry);
      } catch {
        return line;
      }
    });

    await fs.writeFile(logFile, updatedLines.join('\n') + '\n');
  } catch (error) {
    console.error('Failed to update log entry:', error);
  }
}

export async function previewGeneratedCode(
  component: BoundComponent
): Promise<GeneratedFiles> {
  return generateFromComponent(component, { previewOnly: true });
}

export async function generateAndCommit(
  component: BoundComponent,
  user: string
): Promise<GeneratedFiles> {
  return generateFromComponent(component, { commitToGit: true, user });
} 