{
  "id": "176a2752dda4",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/a0168fec5290.json",
  "relativePath": "bigbook/metadata/a0168fec5290.json",
  "name": "a0168fec5290.json",
  "extension": ".json",
  "size": 9412,
  "modified": "2025-07-26T04:17:10.350Z",
  "created": "2025-07-26T04:17:10.350Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 126,
      "characters": 9366,
      "words": 769
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 113
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 113
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 113
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:secret|token)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 113,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"a0168fec5290\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/config/session-fixed.js\",\n  \"relativePath\": \"server/config/session-fixed.js\",\n  \"name\": \"session-fixed.js\",\n  \"extension\": \".js\",\n  \"size\": 5862,\n  \"modified\": \"2025-07-24T14:50:26.308Z\",\n  \"created\": \"2025-07-24T14:50:26.308Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 4\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 158,\n      \"characters\": 5816,\n      \"words\": 593\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 4\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"express-session\",\n        \"line\": 2\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"express-mysql-session\",\n        \"line\": 3\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"dotenv\",\n        \"line\": 6\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:secret|token)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 85,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 9,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 10,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 11,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 15,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 16,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 17,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 18,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 19,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 80,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 81,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// server/config/session-fixed.js - BULLETPROOF SESSION CONFIGURATION\\r\\nconst session = require('express-session');\\r\\nconst MySQLStore = require('express-mysql-session')(session);\\r\\n\\r\\n// Load environment variables\\r\\nrequire('dotenv').config();\\r\\n\\r\\nconsole.log('🔧 Initializing BULLETPROOF session configuration...');\\r\\nconsole.log('   NODE_ENV:', process.env.[REDACTED]);\\r\\nconsole.log('   DB_HOST:', process.env.[REDACTED] || 'localhost');\\r\\nconsole.log('   DB_NAME:', process.env.[REDACTED] || 'orthodoxmetrics_db');\\r\\n\\r\\n// Database connection options for session store\\r\\nconst sessionStoreOptions = {\\r\\n  host: process.env.[REDACTED] || 'localhost',\\r\\n  port: process.env.[REDACTED] || 3306,\\r\\n  user: process.env.[REDACTED] || 'orthodoxapps',\\r\\n  password: process.env.[REDACTED] || 'Summerof1982@!',\\r\\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\\r\\n  charset: 'utf8mb4',\\r\\n  // Session store specific settings\\r\\n  expiration: 86400000, // 24 hours in milliseconds\\r\\n  checkExpirationInterval: 900000, // Check every 15 minutes\\r\\n  createDatabaseTable: true,\\r\\n  endConnectionOnClose: true,\\r\\n  // 🔧 DEBUG: Limit concurrent sessions for troubleshooting\\r\\n  clearExpired: true,\\r\\n  schema: {\\r\\n    tableName: 'sessions',\\r\\n    columnNames: {\\r\\n      session_id: 'session_id',\\r\\n      expires: 'expires',\\r\\n      data: 'data'\\r\\n    }\\r\\n  }\\r\\n};\\r\\n\\r\\n// Create session store\\r\\nconst store = new MySQLStore(sessionStoreOptions);\\r\\n\\r\\n// Handle store events with enhanced debugging\\r\\nstore.on('error', (error) => {\\r\\n  console.error('❌ Session store error:', error);\\r\\n});\\r\\n\\r\\nstore.on('connect', () => {\\r\\n  console.log('✅ Session store connected to MySQL');\\r\\n});\\r\\n\\r\\n// 🔧 DEBUG: Add session debugging hooks\\r\\nconst originalGet = store.get.bind(store);\\r\\nconst originalSet = store.set.bind(store);\\r\\nconst originalDestroy = store.destroy.bind(store);\\r\\n\\r\\nstore.get = function(sessionId, callback) {\\r\\n  console.log(`🔍 SESSION GET: ${sessionId}`);\\r\\n  return originalGet(sessionId, (err, session) => {\\r\\n    if (err) {\\r\\n      console.log(`❌ SESSION GET ERROR: ${sessionId} - ${err.message}`);\\r\\n    } else if (session) {\\r\\n      console.log(`✅ SESSION FOUND: ${sessionId} - User: ${session.user?.email || 'No user'}`);\\r\\n    } else {\\r\\n      console.log(`🔍 SESSION NOT FOUND: ${sessionId}`);\\r\\n    }\\r\\n    callback(err, session);\\r\\n  });\\r\\n};\\r\\n\\r\\nstore.set = function(sessionId, session, callback) {\\r\\n  console.log(`💾 SESSION SET: ${sessionId} - User: ${session.user?.email || 'No user'}`);\\r\\n  return originalSet(sessionId, session, callback);\\r\\n};\\r\\n\\r\\nstore.destroy = function(sessionId, callback) {\\r\\n  console.log(`🗑️  SESSION DESTROY: ${sessionId}`);\\r\\n  return originalDestroy(sessionId, callback);\\r\\n};\\r\\n\\r\\n// Session configuration\\r\\nconst isProduction = process.env.[REDACTED] === 'production';\\r\\nconst sessionSecret = process.env.[REDACTED] || 'orthodox-metrics-secret-2025';\\r\\n\\r\\nconsole.log('🍪 Session settings:');\\r\\nconsole.log('   Production mode:', isProduction);\\r\\nconsole.log('   Session secret:'[REDACTED]'SET' : 'NOT SET');\\r\\nconsole.log('   Secure cookies:', false); // Temporarily disabled for debugging\\r\\nconsole.log('   Session store:', 'MySQL');\\r\\n\\r\\nconst sessionConfig = {\\r\\n  name: 'orthodox.sid', // Session cookie name\\r\\n  secret: sessionSecret,\\r\\n  store: store,\\r\\n  resave: false, // Don't save session if unmodified\\r\\n  saveUninitialized: false, // Don't create session until something stored\\r\\n  rolling: true, // Extend session on each request\\r\\n  cookie: {\\r\\n    secure: false, // TEMPORARILY DISABLED - set to true for production HTTPS\\r\\n    httpOnly: true, // Prevent XSS attacks\\r\\n    maxAge: 86400000, // 24 hours\\r\\n    sameSite: 'lax', // Allow same-site requests\\r\\n    // domain: undefined // Let browser determine domain automatically\\r\\n  }\\r\\n};\\r\\n\\r\\nconsole.log('🎯 Creating session middleware...');\\r\\nconst sessionMiddleware = session(sessionConfig);\\r\\n\\r\\n// 🔧 DEBUG: Wrap session middleware to log cookie transmission\\r\\nconst debugSessionMiddleware = (req, res, next) => {\\r\\n  const originalSessionId = req.sessionID;\\r\\n  \\r\\n  console.log(`🍪 COOKIE DEBUG - ${req.method} ${req.path}`);\\r\\n  console.log(`   Raw cookies: ${req.headers.cookie || 'NONE'}`);\\r\\n  console.log(`   Session ID before: ${originalSessionId || 'NONE'}`);\\r\\n  \\r\\n  // 🔧 FIX: Check for duplicate session cookies\\r\\n  if (req.headers.cookie) {\\r\\n    const cookies = req.headers.cookie.split(';');\\r\\n    const sessionCookies = cookies.filter(cookie => cookie.trim().startsWith('orthodox.sid='));\\r\\n    if (sessionCookies.length > 1) {\\r\\n      console.log(`⚠️  WARNING: ${sessionCookies.length} duplicate session cookies detected!`);\\r\\n      sessionCookies.forEach((cookie, i) => {\\r\\n        const value = cookie.split('=')[1]?.substring(0, 30) + '...';\\r\\n        console.log(`   Cookie ${i+1}: ${value}`);\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  sessionMiddleware(req, res, (err) => {\\r\\n    if (err) {\\r\\n      console.log(`❌ Session middleware error: ${err.message}`);\\r\\n      return next(err);\\r\\n    }\\r\\n    \\r\\n    const newSessionId = req.sessionID;\\r\\n    console.log(`   Session ID after: ${newSessionId || 'NONE'}`);\\r\\n    console.log(`   Session user: ${req.session?.user?.email || 'NONE'}`);\\r\\n    console.log(`   🔍 Session ${originalSessionId === newSessionId ? 'REUSED' : 'NEW/CHANGED'}`);\\r\\n    \\r\\n    // 🔧 FIX: Clear any duplicate cookies on response\\r\\n    if (req.session && req.session.user) {\\r\\n      res.clearCookie('orthodox.sid', { path: '/', domain: undefined });\\r\\n      res.clearCookie('orthodox.sid', { path: '/', domain: '.orthodoxmetrics.com' });\\r\\n      res.clearCookie('orthodox.sid', { path: '/', domain: 'orthodoxmetrics.com' });\\r\\n    }\\r\\n    \\r\\n    next();\\r\\n  });\\r\\n};\\r\\n\\r\\n// Export both the middleware and store for use in other modules\\r\\nmodule.exports = {\\r\\n  sessionMiddleware: debugSessionMiddleware,\\r\\n  sessionStore: store,\\r\\n  isProduction\\r\\n};\\r\\n\\r\\nconsole.log('✅ Session configuration complete!'); \"\n    },\n    \"complexity\": {\n      \"totalLines\": 158,\n      \"codeLines\": 121,\n      \"commentLines\": 14,\n      \"commentRatio\": 0.1037037037037037,\n      \"averageLineLength\": 41.614814814814814\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.352Z\"\n  },\n  \"contentHash\": \"74d53fed47e68ed98638eab082dd3b38419e3b3ce7038d2d46c82f05805dcd89\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.352Z\"\n}"
    },
    "complexity": {
      "totalLines": 126,
      "codeLines": 126,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 73.34126984126983
    },
    "lastAnalyzed": "2025-07-28T07:19:57.279Z"
  },
  "contentHash": "6074ef3e65c738829d3fea9000542341377cea0d1a6515bbdd801bc65a96fb48",
  "discoveredAt": "2025-07-28T07:19:57.279Z"
}