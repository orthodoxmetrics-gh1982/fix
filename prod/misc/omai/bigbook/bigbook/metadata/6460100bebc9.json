{
  "id": "6460100bebc9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/create-test-data.js",
  "relativePath": "server/scripts/create-test-data.js",
  "name": "create-test-data.js",
  "extension": ".js",
  "size": 5502,
  "modified": "2025-07-20T18:24:41.790Z",
  "created": "2025-07-20T18:17:52.768Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 157,
      "characters": 5462,
      "words": 526
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 7
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 21,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Simple script to create test users and sample session data\r\n */\r\n\r\nconst bcrypt = require('bcrypt');\r\nconst DatabaseService = require('../services/databaseService');\r\n\r\nasync function createTestData() {\r\n  try {\r\n    console.log('🚀 CREATING TEST DATA FOR SESSIONS');\r\n    console.log('=' .repeat(50));\r\n    \r\n    // 1. Create test user\r\n    console.log('\\n👤 1. CREATING TEST USER');\r\n    console.log('-'.repeat(30));\r\n    \r\n    const testUser = {\r\n      email: 'admin@orthodoxmetrics.com',\r\n      password: '[REDACTED]',\r\n      first_name: 'Test',\r\n      last_name: 'Admin',\r\n      role: 'super_admin'\r\n    };\r\n    \r\n    // Check if user exists\r\n    const existing = await DatabaseService.queryPlatform('SELECT id FROM users WHERE email = ?', [testUser.email]);\r\n    \r\n    let userId;\r\n    if (existing.length > 0) {\r\n      userId = existing[0].id;\r\n      console.log('✅ Test user already exists');\r\n      console.log(`📧 Email: ${testUser.email}`);\r\n      console.log(`🔑 Password: ${testUser.password}`);\r\n      console.log(`🆔 User ID: ${userId}`);\r\n    } else {\r\n      const password_hash = await bcrypt.hash(testUser.password, 10);\r\n      \r\n      const result = await DatabaseService.queryPlatform(\r\n        `INSERT INTO users (email, password_hash, first_name, last_name, role, preferred_language, is_active, email_verified, created_at, updated_at) \r\n         VALUES (?, ?, ?, ?, ?, 'en', 1, 1, NOW(), NOW())`,\r\n        [testUser.email, password_hash, testUser.first_name, testUser.last_name, testUser.role]\r\n      );\r\n      \r\n      userId = result.insertId;\r\n      console.log('✅ Test user created!');\r\n      console.log(`📧 Email: ${testUser.email}`);\r\n      console.log(`🔑 Password: ${testUser.password}`);\r\n      console.log(`🆔 User ID: ${userId}`);\r\n    }\r\n    \r\n    // Verify userId is valid\r\n    if (!userId) {\r\n      throw new Error('Failed to get valid user ID');\r\n    }\r\n    \r\n    // 2. Create sample login activities\r\n    console.log('\\n📊 2. CREATING SAMPLE LOGIN ACTIVITIES');\r\n    console.log('-'.repeat(30));\r\n    \r\n    // Check if activities exist\r\n    const existingActivities = await DatabaseService.queryPlatform(\r\n      'SELECT COUNT(*) as total FROM activity_log WHERE user_id = ? AND action = \"login\"',\r\n      [userId]\r\n    );\r\n    \r\n    if (existingActivities[0]?.total > 0) {\r\n      console.log(`✅ ${existingActivities[0].total} login activities already exist for this user`);\r\n    } else {\r\n      // Create sample login activities\r\n      const sampleLogins = [\r\n        {\r\n          ip: '192.168.1.100',\r\n          userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n          time: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 hours ago\r\n        },\r\n        {\r\n          ip: '10.0.0.50',\r\n          userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n          time: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago\r\n        },\r\n        {\r\n          ip: '172.16.0.25',\r\n          userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n          time: new Date() // now\r\n        }\r\n      ];\r\n      \r\n      for (let i = 0; i < sampleLogins.length; i++) {\r\n        const login = sampleLogins[i];\r\n        await DatabaseService.queryPlatform(\r\n          'INSERT INTO activity_log (user_id, action, ip_address, user_agent, details, created_at) VALUES (?, ?, ?, ?, ?, ?)',\r\n          [\r\n            userId,\r\n            'login',\r\n            login.ip,\r\n            login.userAgent,\r\n            JSON.stringify({ email: testUser.email, role: testUser.role, sample: true }),\r\n            login.time.toISOString().slice(0, 19).replace('T', ' ')\r\n          ]\r\n        );\r\n      }\r\n      console.log(`✅ Created ${sampleLogins.length} sample login activities`);\r\n    }\r\n    \r\n    // 3. Verify the data\r\n    console.log('\\n🔧 3. VERIFYING SESSION DATA');\r\n    console.log('-'.repeat(30));\r\n    \r\n    const verifyQuery = `\r\n      SELECT \r\n        al.user_id,\r\n        u.email,\r\n        u.first_name,\r\n        u.last_name,\r\n        u.role,\r\n        al.ip_address,\r\n        al.user_agent,\r\n        al.created_at as login_time\r\n      FROM activity_log al\r\n      JOIN users u ON al.user_id = u.id\r\n      WHERE al.action = 'login'\r\n      ORDER BY al.created_at DESC\r\n      LIMIT 5\r\n    `;\r\n    \r\n    const sessions = await DatabaseService.queryPlatform(verifyQuery);\r\n    console.log(`✅ Found ${sessions.length} login sessions`);\r\n    \r\n    if (sessions.length > 0) {\r\n      console.log('Sample sessions:');\r\n      sessions.forEach((session, i) => {\r\n        console.log(`  ${i+1}. ${session.first_name} ${session.last_name} (${session.email})`);\r\n        console.log(`     IP: ${session.ip_address} | Time: ${session.login_time}`);\r\n      });\r\n    }\r\n    \r\n    console.log('\\n🎉 TEST DATA SETUP COMPLETE!');\r\n    console.log('💡 Now try:');\r\n    console.log('   1. Login with admin@orthodoxmetrics.com / admin123');\r\n    console.log('   2. Visit /admin/logs to see session management');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\ncreateTestData().then(() => {\r\n  console.log('\\n🏁 Test data script completed');\r\n  process.exit(0);\r\n}).catch(error => {\r\n  console.error('💥 Script failed:', error);\r\n  process.exit(1);\r\n});\r\n"
    },
    "complexity": {
      "totalLines": 157,
      "codeLines": 124,
      "commentLines": 11,
      "commentRatio": 0.08148148148148149,
      "averageLineLength": 38.6
    },
    "lastAnalyzed": "2025-07-28T07:20:01.020Z"
  },
  "contentHash": "6f777d2ccec1d03f764d6f08ec3c4297b344fae85d87e933dd4cd64293d820d4",
  "discoveredAt": "2025-07-28T07:20:01.020Z"
}