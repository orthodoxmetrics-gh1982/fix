{
  "id": "52b77c5c49e9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scrapers/test-working-scrapers.js",
  "relativePath": "server/scrapers/test-working-scrapers.js",
  "name": "test-working-scrapers.js",
  "extension": ".js",
  "size": 2771,
  "modified": "2025-07-24T14:51:40.412Z",
  "created": "2025-07-24T14:51:40.412Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 76,
      "characters": 2741,
      "words": 220
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 3
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 18,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Quick test with working URLs only\nconst ChurchDirectoryBuilder = require('./index');\nconst path = require('path');\n\nasync function testWorkingScrapers() {\n    console.log('üß™ Testing Scrapers with Conservative Settings...\\n');\n    \n    const options = {\n        outputDir: path.join(__dirname, '../data/test-working-churches'),\n        logLevel: 'info',\n        maxConcurrentScrapers: 1, // Very conservative\n        validateUrls: false,\n        enableDuplicateDetection: false,\n        saveToDatabase: true,\n        databaseConfig: {\n            host: 'localhost',\n            user: 'orthodoxapps',\n            password: '[REDACTED]',\n            database: 'orthodoxmetrics'\n        }\n    };\n    \n    try {\n        console.log('üöÄ Testing with conservative settings...');\n        console.log('- Concurrent scrapers: 1');\n        console.log('- URL validation: disabled');\n        console.log('- Duplicate detection: disabled');\n        console.log('- Database save: enabled');\n        console.log('');\n        \n        const builder = new ChurchDirectoryBuilder(options);\n        const results = await builder.runAutonomousScraping();\n        \n        console.log('\\n‚úÖ Test Results:');\n        console.log(`üìä Total Churches Found: ${results.statistics.totalChurches}`);\n        console.log(`‚ö†Ô∏è  Total Errors: ${results.errors.length}`);\n        \n        if (results.statistics.totalChurches > 0) {\n            console.log('\\nüéâ SUCCESS: Found some church data!');\n            console.log('\\nüìà By Jurisdiction:');\n            for (const [jurisdiction, count] of Object.entries(results.statistics.jurisdictionCounts)) {\n                if (count > 0) {\n                    console.log(`   ‚úÖ ${jurisdiction}: ${count} churches`);\n                } else {\n                    console.log(`   ‚ùå ${jurisdiction}: ${count} churches`);\n                }\n            }\n        } else {\n            console.log('\\n‚ö†Ô∏è  No churches found - all scrapers failed');\n        }\n        \n        if (results.errors.length > 0) {\n            console.log('\\n‚ùå Errors encountered:');\n            results.errors.slice(0, 5).forEach((error, i) => {\n                console.log(`   ${i + 1}. ${error.jurisdiction}: ${error.error}`);\n            });\n            if (results.errors.length > 5) {\n                console.log(`   ... and ${results.errors.length - 5} more errors`);\n            }\n        }\n        \n        console.log(`\\nüìÅ Results saved to: ${options.outputDir}`);\n        return results;\n        \n    } catch (error) {\n        console.error('‚ùå Test failed completely:', error.message);\n        process.exit(1);\n    }\n}\n\nif (require.main === module) {\n    testWorkingScrapers().catch(console.error);\n}\n\nmodule.exports = testWorkingScrapers;\n"
    },
    "complexity": {
      "totalLines": 76,
      "codeLines": 63,
      "commentLines": 1,
      "commentRatio": 0.015625,
      "averageLineLength": 40.78125
    },
    "lastAnalyzed": "2025-07-28T07:20:00.631Z"
  },
  "contentHash": "0dd3d573b8cedb84de1b330ce66b9f14a162c00765fc98516dd005222caf633c",
  "discoveredAt": "2025-07-28T07:20:00.631Z"
}