{
  "id": "8bc82c046bc6",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/1c73485b6e22.json",
  "relativePath": "bigbook/metadata/1c73485b6e22.json",
  "name": "1c73485b6e22.json",
  "extension": ".json",
  "size": 20137,
  "modified": "2025-07-26T04:17:09.358Z",
  "created": "2025-07-26T04:17:09.358Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 50,
      "characters": 20097,
      "words": 1684
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 37,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"1c73485b6e22\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/TROUBLESHOOTING.md\",\n  \"relativePath\": \"docs/TROUBLESHOOTING.md\",\n  \"name\": \"TROUBLESHOOTING.md\",\n  \"extension\": \".md\",\n  \"size\": 17172,\n  \"modified\": \"2025-07-18T19:45:43.209Z\",\n  \"created\": \"2025-07-18T19:31:16.843Z\",\n  \"classification\": {\n    \"type\": \"Documentation\",\n    \"category\": \"Documentation\",\n    \"confidence\": 7\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 777,\n      \"characters\": 17132,\n      \"words\": 2160\n    },\n    \"classification\": {\n      \"type\": \"Documentation\",\n      \"category\": \"Documentation\",\n      \"confidence\": 7\n    },\n    \"dependencies\": [],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 170,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"# Troubleshooting Guide - Orthodox Metrics\\r\\n\\r\\n## üîß Quick Diagnostic Commands\\r\\n\\r\\nBefore diving into specific issues, run these commands to get system status:\\r\\n\\r\\n```bash\\r\\n# System health check\\r\\nnode testing/unified-tests.js --level basic\\r\\n\\r\\n# Database connectivity\\r\\nnode database/database-manager.js validate\\r\\n\\r\\n# Application logs\\r\\npm2 logs orthodox-metrics --lines 50\\r\\n\\r\\n# System resources\\r\\ntop\\r\\ndf -h\\r\\nfree -h\\r\\n```\\r\\n\\r\\n## üóÑÔ∏è Database Issues\\r\\n\\r\\n### Database Connection Problems\\r\\n\\r\\n#### \\\"Cannot connect to MySQL server\\\"\\r\\n\\r\\n**Symptoms**:\\r\\n- Application fails to start\\r\\n- Database connection timeout errors\\r\\n- \\\"ECONNREFUSED\\\" errors in logs\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check MySQL service status\\r\\nsudo systemctl status mysql\\r\\n\\r\\n# Test MySQL connection\\r\\nmysql -u orthodoxapps -p orthodox_metrics -e \\\"SELECT 1;\\\"\\r\\n\\r\\n# Check MySQL error logs\\r\\nsudo tail -f /var/log/mysql/error.log\\r\\n\\r\\n# Verify database exists\\r\\nmysql -u root -p -e \\\"SHOW DATABASES;\\\"\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Restart MySQL service\\r\\nsudo systemctl restart mysql\\r\\n\\r\\n# Fix permissions\\r\\nmysql -u root -p << EOF\\r\\nGRANT ALL PRIVILEGES ON orthodox_metrics.* TO 'orthodoxapps'@'localhost';\\r\\nGRANT ALL PRIVILEGES ON orthodox_records.* TO 'orthodoxapps'@'localhost';\\r\\nFLUSH PRIVILEGES;\\r\\nEOF\\r\\n\\r\\n# Recreate database if needed\\r\\nnode database/database-manager.js setup --force\\r\\n```\\r\\n\\r\\n#### \\\"Table doesn't exist\\\" Errors\\r\\n\\r\\n**Symptoms**:\\r\\n- API calls return database errors\\r\\n- Missing table errors in logs\\r\\n- Fresh installation issues\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check existing tables\\r\\nmysql -u orthodoxapps -p orthodox_metrics -e \\\"SHOW TABLES;\\\"\\r\\n\\r\\n# Verify schema integrity\\r\\nnode database/database-manager.js validate\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Recreate missing tables\\r\\nnode database/database-manager.js schema\\r\\n\\r\\n# Full database reset (CAUTION: destroys data)\\r\\nnode database/database-manager.js setup --force\\r\\n\\r\\n# Run specific migration\\r\\nmysql -u orthodoxapps -p orthodox_metrics < database/churches_schema.sql\\r\\n```\\r\\n\\r\\n#### Database Performance Issues\\r\\n\\r\\n**Symptoms**:\\r\\n- Slow query responses\\r\\n- High CPU usage by MySQL\\r\\n- Application timeouts\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check running queries\\r\\nmysql -u root -p -e \\\"SHOW PROCESSLIST;\\\"\\r\\n\\r\\n# Check slow queries\\r\\nmysql -u root -p -e \\\"SHOW STATUS LIKE 'Slow_queries';\\\"\\r\\n\\r\\n# Database size analysis\\r\\nmysql -u root -p -e \\\"\\r\\nSELECT \\r\\n    table_schema AS 'Database',\\r\\n    ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'\\r\\nFROM information_schema.tables \\r\\nWHERE table_schema IN ('orthodox_metrics', 'orthodox_records')\\r\\nGROUP BY table_schema;\\r\\n\\\"\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Optimize database\\r\\nnode database/database-manager.js optimize\\r\\n\\r\\n# Manual table optimization\\r\\nmysql -u root -p << EOF\\r\\nOPTIMIZE TABLE orthodox_metrics.churches;\\r\\nOPTIMIZE TABLE orthodox_records.baptism_records;\\r\\nANALYZE TABLE orthodox_metrics.users;\\r\\nEOF\\r\\n\\r\\n# Check MySQL configuration\\r\\nsudo nano /etc/mysql/mysql.conf.d/mysqld.cnf\\r\\n# Increase innodb_buffer_pool_size if needed\\r\\n```\\r\\n\\r\\n## üîê Authentication & Permission Issues\\r\\n\\r\\n### Login Problems\\r\\n\\r\\n#### \\\"Invalid credentials\\\" for Valid Users\\r\\n\\r\\n**Symptoms**:\\r\\n- Users cannot log in with correct passwords\\r\\n- Authentication failures in logs\\r\\n- Session creation errors\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check user records\\r\\nmysql -u orthodoxapps -p orthodox_metrics -e \\\"\\r\\nSELECT id, email, role, active, last_login \\r\\nFROM users \\r\\nWHERE email = 'user@example.com';\\r\\n\\\"\\r\\n\\r\\n# Test authentication endpoint\\r\\ncurl -X POST http://localhost:3000/api/auth/login \\\\\\r\\n  -H \\\"Content-Type: application/json\\\" \\\\\\r\\n  -d '{\\\"email\\\":\\\"test@example.com\\\",\\\"password\\\":\\\"password\\\"}'\\r\\n\\r\\n# Check session configuration\\r\\nnode testing/debug-auth.js\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Reset user password\\r\\nmysql -u orthodoxapps -p orthodox_metrics << EOF\\r\\nUPDATE users \\r\\nSET password = '[REDACTED]' \\r\\nWHERE email = 'user@example.com';\\r\\nEOF\\r\\n\\r\\n# Clear sessions\\r\\nredis-cli FLUSHDB  # If using Redis\\r\\n# OR\\r\\nmysql -u orthodoxapps -p orthodox_metrics -e \\\"DELETE FROM sessions;\\\"\\r\\n\\r\\n# Verify environment variables\\r\\necho $SESSION_SECRET\\r\\necho $JWT_SECRET\\r\\n```\\r\\n\\r\\n#### Permission Denied Errors\\r\\n\\r\\n**Symptoms**:\\r\\n- \\\"Access denied\\\" for valid operations\\r\\n- 403 Forbidden responses\\r\\n- Users cannot access their own church data\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check user permissions\\r\\nmysql -u orthodoxapps -p orthodox_metrics -e \\\"\\r\\nSELECT u.email, u.role, u.church_id, c.name as church_name\\r\\nFROM users u\\r\\nLEFT JOIN churches c ON u.church_id = c.id\\r\\nWHERE u.email = 'user@example.com';\\r\\n\\\"\\r\\n\\r\\n# Test permission middleware\\r\\nnode testing/debug-permissions.js --user-id=123\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Fix user-church association\\r\\nmysql -u orthodoxapps -p orthodox_metrics << EOF\\r\\nUPDATE users \\r\\nSET church_id = 1 \\r\\nWHERE email = 'user@example.com';\\r\\nEOF\\r\\n\\r\\n# Reset user role\\r\\nmysql -u orthodoxapps -p orthodox_metrics << EOF\\r\\nUPDATE users \\r\\nSET role = 'admin' \\r\\nWHERE email = 'admin@church.org';\\r\\nEOF\\r\\n```\\r\\n\\r\\n## üìÑ OCR Processing Issues\\r\\n\\r\\n### Google Vision API Problems\\r\\n\\r\\n#### \\\"GOOGLE_APPLICATION_CREDENTIALS not found\\\"\\r\\n\\r\\n**Symptoms**:\\r\\n- OCR uploads fail immediately\\r\\n- Google API authentication errors\\r\\n- \\\"Service account key not found\\\"\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check credentials file\\r\\nls -la $GOOGLE_APPLICATION_CREDENTIALS\\r\\ncat $GOOGLE_APPLICATION_CREDENTIALS | jq .type\\r\\n\\r\\n# Test Google Vision API\\r\\nnode testing/test-ocr-simple.js --debug\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Set correct path\\r\\nexport GOOGLE_APPLICATION_CREDENTIALS=\\\"/path/to/service-account.json\\\"\\r\\n\\r\\n# Verify service account permissions\\r\\n# In Google Cloud Console:\\r\\n# 1. Check service account has Vision API access\\r\\n# 2. Verify API is enabled\\r\\n# 3. Check billing account is active\\r\\n\\r\\n# Test with sample document\\r\\nnode testing/test-ocr-upload.js --file=test-document.pdf\\r\\n```\\r\\n\\r\\n#### OCR Processing Stuck/Slow\\r\\n\\r\\n**Symptoms**:\\r\\n- Documents stuck in \\\"processing\\\" status\\r\\n- Very slow OCR processing\\r\\n- Timeout errors\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check OCR sessions\\r\\nmysql -u orthodoxapps -p orthodox_records -e \\\"\\r\\nSELECT id, status, created_at, updated_at, file_path\\r\\nFROM ocr_sessions \\r\\nWHERE status = 'processing'\\r\\nORDER BY created_at DESC;\\r\\n\\\"\\r\\n\\r\\n# Check Google API quotas\\r\\n# Google Cloud Console ‚Üí APIs & Services ‚Üí Quotas\\r\\n\\r\\n# Test OCR pipeline\\r\\nnode testing/debug-ocr-pipeline.js --session-id=123\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Reset stuck sessions\\r\\nmysql -u orthodoxapps -p orthodox_records << EOF\\r\\nUPDATE ocr_sessions \\r\\nSET status = 'failed', \\r\\n    error_message = 'Reset due to timeout'\\r\\nWHERE status = 'processing' \\r\\nAND created_at < DATE_SUB(NOW(), INTERVAL 1 HOUR);\\r\\nEOF\\r\\n\\r\\n# Restart OCR processing\\r\\nnode testing/debug-ocr-results.js --retry-failed\\r\\n\\r\\n# Check file permissions\\r\\nls -la server/uploads/\\r\\nsudo chown -R orthodox:orthodox server/uploads/\\r\\n```\\r\\n\\r\\n#### OCR Results Inaccurate\\r\\n\\r\\n**Symptoms**:\\r\\n- Poor text extraction quality\\r\\n- Wrong language detection\\r\\n- Misclassified document types\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check OCR confidence scores\\r\\nmysql -u orthodoxapps -p orthodox_records -e \\\"\\r\\nSELECT file_name, language_detected, confidence_score, document_type\\r\\nFROM ocr_sessions \\r\\nWHERE confidence_score < 0.8\\r\\nORDER BY created_at DESC \\r\\nLIMIT 10;\\r\\n\\\"\\r\\n\\r\\n# Test specific document\\r\\nnode testing/debug-public-ocr.js --file=problem-document.pdf --verbose\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Improve document quality before upload\\r\\n# - Scan at higher resolution (300+ DPI)\\r\\n# - Ensure good lighting and contrast\\r\\n# - Remove shadows and skewing\\r\\n\\r\\n# Adjust OCR parameters\\r\\n# In ocr processing code:\\r\\n# - Lower confidence threshold for difficult documents\\r\\n# - Enable multiple language detection\\r\\n# - Use manual review for borderline cases\\r\\n\\r\\n# Retrain document classification\\r\\nnode maintenance/analyze-ocr-patterns.js --retrain\\r\\n```\\r\\n\\r\\n## üåê Network & Server Issues\\r\\n\\r\\n### Application Not Accessible\\r\\n\\r\\n#### \\\"Connection Refused\\\" Errors\\r\\n\\r\\n**Symptoms**:\\r\\n- Cannot access website\\r\\n- API calls fail\\r\\n- Nginx errors\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check application status\\r\\npm2 status\\r\\npm2 logs orthodox-metrics\\r\\n\\r\\n# Check port binding\\r\\nsudo netstat -tulpn | grep :3000\\r\\nsudo ss -tulpn | grep :3000\\r\\n\\r\\n# Check nginx status\\r\\nsudo systemctl status nginx\\r\\nsudo nginx -t\\r\\n\\r\\n# Check firewall\\r\\nsudo ufw status\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Restart application\\r\\npm2 restart orthodox-metrics\\r\\n\\r\\n# Check application startup\\r\\ncd /opt/orthodoxmetrics/prod/server\\r\\nnode index.js  # Manual start to see errors\\r\\n\\r\\n# Fix nginx configuration\\r\\nsudo nginx -t\\r\\nsudo systemctl reload nginx\\r\\n\\r\\n# Open firewall ports\\r\\nsudo ufw allow 80\\r\\nsudo ufw allow 443\\r\\n```\\r\\n\\r\\n#### SSL Certificate Issues\\r\\n\\r\\n**Symptoms**:\\r\\n- \\\"Your connection is not private\\\" warnings\\r\\n- Certificate expired errors\\r\\n- Mixed content warnings\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check certificate status\\r\\nsudo certbot certificates\\r\\n\\r\\n# Test SSL configuration\\r\\nopenssl s_client -connect yourdomain.com:443 -servername yourdomain.com\\r\\n\\r\\n# Check certificate expiry\\r\\necho | openssl s_client -servername yourdomain.com -connect yourdomain.com:443 2>/dev/null | openssl x509 -noout -dates\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Renew certificates\\r\\nsudo certbot renew\\r\\n\\r\\n# Force renewal\\r\\nsudo certbot renew --force-renewal\\r\\n\\r\\n# Fix nginx SSL configuration\\r\\nsudo nano /etc/nginx/sites-available/orthodoxmetrics\\r\\n# Verify SSL paths are correct\\r\\n\\r\\n# Test SSL setup\\r\\nsudo nginx -t\\r\\nsudo systemctl reload nginx\\r\\n```\\r\\n\\r\\n### Performance Issues\\r\\n\\r\\n#### High Memory Usage\\r\\n\\r\\n**Symptoms**:\\r\\n- System running out of memory\\r\\n- Application crashes with \\\"out of memory\\\"\\r\\n- Slow response times\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check memory usage\\r\\nfree -h\\r\\ntop -o %MEM\\r\\n\\r\\n# Check application memory\\r\\npm2 monit\\r\\nps aux | grep node\\r\\n\\r\\n# Check for memory leaks\\r\\nnode --inspect testing/debug-memory-usage.js\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Restart application to free memory\\r\\npm2 restart orthodox-metrics\\r\\n\\r\\n# Adjust PM2 configuration\\r\\n# In ecosystem.config.cjs:\\r\\nmax_memory_restart: '1G'\\r\\n\\r\\n# Optimize database queries\\r\\nnode database/database-manager.js optimize\\r\\n\\r\\n# Add swap space if needed\\r\\nsudo fallocate -l 2G /swapfile\\r\\nsudo chmod 600 /swapfile\\r\\nsudo mkswap /swapfile\\r\\nsudo swapon /swapfile\\r\\n```\\r\\n\\r\\n#### High CPU Usage\\r\\n\\r\\n**Symptoms**:\\r\\n- System becomes unresponsive\\r\\n- High load averages\\r\\n- Slow API responses\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check CPU usage\\r\\ntop\\r\\nhtop\\r\\n\\r\\n# Check application processes\\r\\npm2 list\\r\\npm2 show orthodox-metrics\\r\\n\\r\\n# Check database load\\r\\nmysql -u root -p -e \\\"SHOW PROCESSLIST;\\\"\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Scale application instances\\r\\npm2 scale orthodox-metrics +2\\r\\n\\r\\n# Optimize database\\r\\nnode database/database-manager.js optimize\\r\\n\\r\\n# Check for infinite loops or blocking operations\\r\\npm2 logs orthodox-metrics --lines 100\\r\\n\\r\\n# Add CPU monitoring\\r\\npm2 install pm2-server-monit\\r\\n```\\r\\n\\r\\n## üìÅ File Upload Issues\\r\\n\\r\\n### Upload Failures\\r\\n\\r\\n#### \\\"File too large\\\" Errors\\r\\n\\r\\n**Symptoms**:\\r\\n- Document uploads fail\\r\\n- \\\"413 Payload Too Large\\\" errors\\r\\n- Upload progress stops\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check nginx upload limits\\r\\ngrep client_max_body_size /etc/nginx/sites-available/orthodoxmetrics\\r\\n\\r\\n# Check application limits\\r\\ngrep MAX_UPLOAD_SIZE server/.env\\r\\n\\r\\n# Check disk space\\r\\ndf -h /opt/orthodoxmetrics/prod/server/uploads/\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Increase nginx limit\\r\\nsudo nano /etc/nginx/sites-available/orthodoxmetrics\\r\\n# Add: client_max_body_size 50M;\\r\\n\\r\\n# Increase application limit\\r\\nnano server/.env\\r\\n# Set: MAX_UPLOAD_SIZE=50mb\\r\\n\\r\\n# Restart services\\r\\nsudo systemctl reload nginx\\r\\npm2 restart orthodox-metrics\\r\\n```\\r\\n\\r\\n#### Upload Directory Permission Issues\\r\\n\\r\\n**Symptoms**:\\r\\n- \\\"Permission denied\\\" on file upload\\r\\n- Cannot save uploaded files\\r\\n- File upload succeeds but files missing\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check upload directory permissions\\r\\nls -la server/uploads/\\r\\nls -la server/uploads/ocr-documents/\\r\\n\\r\\n# Check disk space\\r\\ndf -h server/uploads/\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Fix permissions\\r\\nsudo chown -R orthodox:orthodox server/uploads/\\r\\nsudo chmod -R 755 server/uploads/\\r\\n\\r\\n# Create missing directories\\r\\nmkdir -p server/uploads/ocr-documents\\r\\nmkdir -p server/uploads/profile-images\\r\\nmkdir -p server/uploads/church-assets\\r\\n\\r\\n# Check disk space and clean if needed\\r\\ndu -sh server/uploads/*\\r\\n# Remove old temporary files if needed\\r\\n```\\r\\n\\r\\n## üîÑ Frontend Issues\\r\\n\\r\\n### React Application Problems\\r\\n\\r\\n#### \\\"White screen\\\" or Application Won't Load\\r\\n\\r\\n**Symptoms**:\\r\\n- Blank page after loading\\r\\n- JavaScript errors in browser console\\r\\n- \\\"Loading...\\\" never completes\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Check frontend build\\r\\nls -la front-end/dist/\\r\\n\\r\\n# Check nginx static file serving\\r\\ncurl -I http://yourdomain.com/\\r\\n\\r\\n# Check browser console for errors\\r\\n# Open browser dev tools ‚Üí Console\\r\\n\\r\\n# Check network requests\\r\\n# Browser dev tools ‚Üí Network tab\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Rebuild frontend\\r\\ncd front-end\\r\\nnpm run build\\r\\n\\r\\n# Copy to nginx directory\\r\\nsudo cp -r dist/* /var/www/orthodoxmetrics/\\r\\n\\r\\n# Fix nginx static file configuration\\r\\nsudo nano /etc/nginx/sites-available/orthodoxmetrics\\r\\n# Verify root path is correct\\r\\n\\r\\n# Clear browser cache\\r\\n# Browser dev tools ‚Üí Application ‚Üí Storage ‚Üí Clear storage\\r\\n```\\r\\n\\r\\n#### API Connection Issues\\r\\n\\r\\n**Symptoms**:\\r\\n- Frontend loads but API calls fail\\r\\n- \\\"Network Error\\\" messages\\r\\n- CORS errors in browser console\\r\\n\\r\\n**Diagnosis**:\\r\\n```bash\\r\\n# Test API directly\\r\\ncurl -X GET http://localhost:3000/api/health\\r\\n\\r\\n# Check CORS configuration\\r\\ngrep -r \\\"cors\\\" server/\\r\\n\\r\\n# Check network connectivity\\r\\nping yourdomain.com\\r\\n```\\r\\n\\r\\n**Solutions**:\\r\\n```bash\\r\\n# Fix CORS configuration\\r\\n# In server/index.js or middleware:\\r\\napp.use(cors({\\r\\n  origin: ['http://localhost:5173', 'https://yourdomain.com'],\\r\\n  credentials: true\\r\\n}));\\r\\n\\r\\n# Update API base URL in frontend\\r\\n# Check front-end/src/services/api.js\\r\\n\\r\\n# Restart application\\r\\npm2 restart orthodox-metrics\\r\\n```\\r\\n\\r\\n## üîç Logging and Debugging\\r\\n\\r\\n### Enable Debug Logging\\r\\n\\r\\n#### Application Debug Mode\\r\\n```bash\\r\\n# Enable debug logging\\r\\nDEBUG=orthodox:* npm run dev\\r\\n\\r\\n# Specific component debugging\\r\\nDEBUG=orthodox:auth,orthodox:ocr pm run dev\\r\\n\\r\\n# Production debugging (careful with logs)\\r\\nDEBUG=orthodox:error pm2 restart orthodox-metrics --update-env\\r\\n```\\r\\n\\r\\n#### Database Query Logging\\r\\n```sql\\r\\n-- Enable general query log (temporarily)\\r\\nSET GLOBAL general_log = 'ON';\\r\\nSET GLOBAL general_log_file = '/var/log/mysql/general.log';\\r\\n\\r\\n-- Disable after debugging\\r\\nSET GLOBAL general_log = 'OFF';\\r\\n```\\r\\n\\r\\n### Common Error Patterns\\r\\n\\r\\n#### Memory Leak Detection\\r\\n```bash\\r\\n# Monitor memory over time\\r\\nwhile true; do\\r\\n  ps aux | grep \\\"node.*orthodox\\\" | awk '{print $4, $6}'\\r\\n  sleep 60\\r\\ndone\\r\\n\\r\\n# Use memory profiling\\r\\nnode --inspect=0.0.0.0:9229 index.js\\r\\n# Connect Chrome DevTools to localhost:9229\\r\\n```\\r\\n\\r\\n#### Database Deadlock Detection\\r\\n```sql\\r\\n-- Check for deadlocks\\r\\nSHOW ENGINE INNODB STATUS;\\r\\n\\r\\n-- Monitor blocking queries\\r\\nSELECT \\r\\n    r.trx_id waiting_trx_id,\\r\\n    r.trx_mysql_thread_id waiting_thread,\\r\\n    r.trx_query waiting_query,\\r\\n    b.trx_id blocking_trx_id,\\r\\n    b.trx_mysql_thread_id blocking_thread,\\r\\n    b.trx_query blocking_query\\r\\nFROM information_schema.innodb_lock_waits w\\r\\nINNER JOIN information_schema.innodb_trx b ON b.trx_id = w.blocking_trx_id\\r\\nINNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;\\r\\n```\\r\\n\\r\\n## üÜò Emergency Procedures\\r\\n\\r\\n### System Recovery\\r\\n\\r\\n#### Complete System Restart\\r\\n```bash\\r\\n# Graceful restart\\r\\npm2 stop orthodox-metrics\\r\\nsudo systemctl stop nginx\\r\\nsudo systemctl stop mysql\\r\\n\\r\\n# Wait 30 seconds\\r\\nsleep 30\\r\\n\\r\\n# Start services\\r\\nsudo systemctl start mysql\\r\\nsudo systemctl start nginx\\r\\npm2 start orthodox-metrics\\r\\n\\r\\n# Verify functionality\\r\\nnode testing/unified-tests.js --level basic\\r\\n```\\r\\n\\r\\n#### Database Recovery from Backup\\r\\n```bash\\r\\n# Stop application\\r\\npm2 stop orthodox-metrics\\r\\n\\r\\n# Restore from backup\\r\\nmysql -u root -p orthodox_metrics < /opt/orthodoxmetrics/backups/orthodox_metrics_latest.sql\\r\\nmysql -u root -p orthodox_records < /opt/orthodoxmetrics/backups/orthodox_records_latest.sql\\r\\n\\r\\n# Validate restoration\\r\\nnode database/database-manager.js validate\\r\\n\\r\\n# Restart application\\r\\npm2 start orthodox-metrics\\r\\n```\\r\\n\\r\\n### Emergency Contacts and Escalation\\r\\n\\r\\n#### Immediate Actions for Critical Issues\\r\\n1. **Take screenshot/note exact error message**\\r\\n2. **Check if issue affects all users or specific users**\\r\\n3. **Run quick diagnostic**: `node testing/unified-tests.js --level basic`\\r\\n4. **Check system resources**: `top`, `df -h`, `free -h`\\r\\n5. **Review recent changes**: Check git log and deployment history\\r\\n\\r\\n#### Emergency Rollback\\r\\n```bash\\r\\n# Rollback to previous version\\r\\ncd /opt/orthodoxmetrics/prod\\r\\ngit log --oneline -5  # Check recent commits\\r\\ngit checkout [previous-commit-hash]\\r\\n\\r\\n# Reinstall dependencies\\r\\nnpm ci --only=production\\r\\n\\r\\n# Restart application\\r\\npm2 restart orthodox-metrics\\r\\n\\r\\n# Verify rollback success\\r\\nnode testing/unified-tests.js --level basic\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\nThis troubleshooting guide covers the most common issues in Orthodox Metrics. For additional support, refer to the [Development Guide](DEVELOPMENT_GUIDE.md) for technical details or [Administration Guide](ADMINISTRATION_GUIDE.md) for operational procedures. üèõÔ∏èüîß\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 777,\n      \"codeLines\": 359,\n      \"commentLines\": 238,\n      \"commentRatio\": 0.39865996649916247,\n      \"averageLineLength\": 27.09715242881072\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:09.358Z\"\n  },\n  \"contentHash\": \"320eddd95e49160c4cb855494bdbf359a90a28865ef317831b2a3b3e2d1ef112\",\n  \"discoveredAt\": \"2025-07-26T04:17:09.358Z\"\n}"
    },
    "complexity": {
      "totalLines": 50,
      "codeLines": 50,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 400.96
    },
    "lastAnalyzed": "2025-07-28T07:19:56.714Z"
  },
  "contentHash": "dc968b17e4851e8475378d2957941c9010db93f0f70ba1d1db919ce7952f51e6",
  "discoveredAt": "2025-07-28T07:19:56.714Z"
}