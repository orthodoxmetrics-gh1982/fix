{
  "id": "17579e7e9926",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/config/db.js",
  "relativePath": "server/config/db.js",
  "name": "db.js",
  "extension": ".js",
  "size": 2248,
  "modified": "2025-07-24T14:51:40.516Z",
  "created": "2025-07-24T14:51:40.516Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 71,
      "characters": 2242,
      "words": 248
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "debug",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 14
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 8,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 21,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 22,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 23,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 24,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/config/db.js\r\nconst mysql = require('mysql2/promise');\r\nconst debug = require('debug')('app:db');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n// Try to load environment file if it exists\r\nconst envFile = process.env.[REDACTED] === 'production'\r\n  ? '../.env.production'\r\n  : '../.env.development';\r\n\r\nconst envPath = path.resolve(__dirname, envFile);\r\nif (fs.existsSync(envPath)) {\r\n  require('dotenv').config({ path: envPath });\r\n  console.log(`✅ Loaded environment from: ${envPath}`);\r\n} else {\r\n  console.log(`⚠️  Environment file not found: ${envPath}, using defaults`);\r\n}\r\n\r\nconst promisePool = mysql.createPool({\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  user: process.env.[REDACTED] || 'orthodoxapps',\r\n  password: process.env.[REDACTED] || 'Summerof1982@!',\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  connectTimeout: 60000, // Connection timeout in milliseconds\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n  charset: 'utf8mb4',\r\n  // debug: true // Disable MySQL debug logging\r\n});\r\n// Log all queries\r\npromisePool.on('enqueue', function () {\r\n  debug('Waiting for available connection slot');\r\n});\r\n\r\n// --- Add query logging for all queries ---\r\nfunction logQuery(sql, params) {\r\n  if (params && params.length) {\r\n    console.log('[DB QUERY]', sql, '\\n[PARAMS]', params);\r\n  } else {\r\n    console.log('[DB QUERY]', sql);\r\n  }\r\n}\r\n\r\nconst origQuery = promisePool.query.bind(promisePool);\r\npromisePool.query = async function(sql, params) {\r\n  logQuery(sql, params);\r\n  return origQuery(sql, params);\r\n};\r\n\r\nconst origExecute = promisePool.execute.bind(promisePool);\r\npromisePool.execute = async function(sql, params) {\r\n  logQuery(sql, params);\r\n  return origExecute(sql, params);\r\n};\r\n\r\n// Export both the callback-based pool and the promise-based pool\r\nmodule.exports = {\r\n  promisePool: promisePool,\r\n  // Helper function to test the connection\r\n  testConnection: async () => {\r\n    try {\r\n      const [rows] = await promisePool.query('SELECT 1');\r\n      return { success: true, message: 'Database connection successful' };\r\n    } catch (error) {\r\n      return { success: false, message: `Database connection failed: ${error.message}` };\r\n    }\r\n  }\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 71,
      "codeLines": 56,
      "commentLines": 7,
      "commentRatio": 0.1111111111111111,
      "averageLineLength": 34.36507936507937
    },
    "lastAnalyzed": "2025-07-28T07:19:59.538Z"
  },
  "contentHash": "67d2bb79ebcc140996d555f26fe4684b862106e384b3e05f65ff428b1b02c847",
  "discoveredAt": "2025-07-28T07:19:59.538Z"
}