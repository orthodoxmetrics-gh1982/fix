{
  "id": "4f5f8795f375",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/82188d6feac9.json",
  "relativePath": "bigbook/metadata/82188d6feac9.json",
  "name": "82188d6feac9.json",
  "extension": ".json",
  "size": 13547,
  "modified": "2025-07-26T04:17:10.966Z",
  "created": "2025-07-26T04:17:10.966Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 13507,
      "words": 1112
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"82188d6feac9\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase1-create-ocr-schema.js\",\n  \"relativePath\": \"server/legacy/phase1-create-ocr-schema.js\",\n  \"name\": \"phase1-create-ocr-schema.js\",\n  \"extension\": \".js\",\n  \"size\": 11380,\n  \"modified\": \"2025-07-24T14:51:40.492Z\",\n  \"created\": \"2025-07-24T14:51:40.492Z\",\n  \"classification\": {\n    \"type\": \"Database Scripts\",\n    \"category\": \"Backend > Database\",\n    \"confidence\": 5\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 293,\n      \"characters\": 11340,\n      \"words\": 984\n    },\n    \"classification\": {\n      \"type\": \"Database Scripts\",\n      \"category\": \"Backend > Database\",\n      \"confidence\": 5\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 8\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 142,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"#!/usr/bin/env node\\r\\n\\r\\n/**\\r\\n * Phase 1: Database Schema & Core Infrastructure  \\r\\n * Step 2: Create OCR tables schema in ssppoc_records_db\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\n\\r\\nconst OCR_TABLES_SCHEMA = {\\r\\n  \\r\\n  // OCR Field Configurations - Per-church JSON config for field mappings\\r\\n  ocr_field_configurations: `\\r\\n    CREATE TABLE IF NOT EXISTS ocr_field_configurations (\\r\\n      id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n      church_id INT NOT NULL,\\r\\n      record_type ENUM('baptism', 'marriage', 'funeral') NOT NULL,\\r\\n      field_config JSON NOT NULL,\\r\\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\r\\n      created_by INT,\\r\\n      is_active BOOLEAN DEFAULT TRUE,\\r\\n      version INT DEFAULT 1,\\r\\n      description TEXT,\\r\\n      UNIQUE KEY unique_church_record_type (church_id, record_type),\\r\\n      INDEX idx_church_record (church_id, record_type),\\r\\n      INDEX idx_active (is_active)\\r\\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\\r\\n    COMMENT='Per-church field mapping configurations for OCR processing'\\r\\n  `,\\r\\n  \\r\\n  // OCR Processing Log - Track each OCR batch processing\\r\\n  ocr_processing_log: `\\r\\n    CREATE TABLE IF NOT EXISTS ocr_processing_log (\\r\\n      id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n      church_id INT NOT NULL,\\r\\n      ocr_job_id INT NOT NULL,\\r\\n      record_type ENUM('baptism', 'marriage', 'funeral') NOT NULL,\\r\\n      filename VARCHAR(255) NOT NULL,\\r\\n      status ENUM('pending', 'processing', 'completed', 'failed', 'transferred') NOT NULL DEFAULT 'pending',\\r\\n      user_id INT,\\r\\n      started_at TIMESTAMP NULL,\\r\\n      completed_at TIMESTAMP NULL,\\r\\n      error_message TEXT,\\r\\n      processing_metadata JSON,\\r\\n      confidence_score DECIMAL(5,2),\\r\\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\r\\n      INDEX idx_church_id (church_id),\\r\\n      INDEX idx_ocr_job_id (ocr_job_id),\\r\\n      INDEX idx_status (status),\\r\\n      INDEX idx_record_type (record_type),\\r\\n      INDEX idx_user_id (user_id),\\r\\n      INDEX idx_created_at (created_at)\\r\\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\\r\\n    COMMENT='Log of OCR processing batches and their status'\\r\\n  `,\\r\\n  \\r\\n  // OCR Review Queue - Stores OCR results pending manual review/approval\\r\\n  ocr_review_queue: `\\r\\n    CREATE TABLE IF NOT EXISTS ocr_review_queue (\\r\\n      id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n      church_id INT NOT NULL,\\r\\n      ocr_job_id INT NOT NULL,\\r\\n      processing_log_id INT NOT NULL,\\r\\n      record_type ENUM('baptism', 'marriage', 'funeral') NOT NULL,\\r\\n      filename VARCHAR(255) NOT NULL,\\r\\n      original_filename VARCHAR(255),\\r\\n      extracted_text LONGTEXT,\\r\\n      mapped_fields JSON,\\r\\n      confidence_avg DECIMAL(5,2),\\r\\n      status ENUM('pending_review', 'in_review', 'approved', 'rejected', 'needs_correction') NOT NULL DEFAULT 'pending_review',\\r\\n      priority ENUM('low', 'normal', 'high', 'urgent') DEFAULT 'normal',\\r\\n      assigned_to INT,\\r\\n      reviewed_by INT,\\r\\n      reviewed_at TIMESTAMP NULL,\\r\\n      approval_notes TEXT,\\r\\n      correction_data JSON,\\r\\n      auto_insertable BOOLEAN DEFAULT FALSE,\\r\\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\r\\n      FOREIGN KEY (processing_log_id) REFERENCES ocr_processing_log(id) ON DELETE CASCADE,\\r\\n      INDEX idx_church_id (church_id),\\r\\n      INDEX idx_ocr_job_id (ocr_job_id),\\r\\n      INDEX idx_status (status),\\r\\n      INDEX idx_priority (priority),\\r\\n      INDEX idx_assigned_to (assigned_to),\\r\\n      INDEX idx_reviewed_by (reviewed_by),\\r\\n      INDEX idx_confidence (confidence_avg),\\r\\n      INDEX idx_auto_insertable (auto_insertable),\\r\\n      INDEX idx_created_at (created_at)\\r\\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\\r\\n    COMMENT='Queue of OCR results pending manual review and approval'\\r\\n  `,\\r\\n  \\r\\n  // OCR Job Transfers - Track transfers from OCR DB to Records DB\\r\\n  ocr_job_transfers: `\\r\\n    CREATE TABLE IF NOT EXISTS ocr_job_transfers (\\r\\n      id INT AUTO_INCREMENT PRIMARY KEY,\\r\\n      church_id INT NOT NULL,\\r\\n      source_ocr_job_id INT NOT NULL,\\r\\n      processing_log_id INT,\\r\\n      review_queue_id INT,\\r\\n      transfer_status ENUM('pending', 'in_progress', 'completed', 'failed', 'cancelled') NOT NULL DEFAULT 'pending',\\r\\n      transfer_type ENUM('auto', 'manual', 'batch') NOT NULL DEFAULT 'auto',\\r\\n      source_database VARCHAR(100) NOT NULL DEFAULT 'saints_peter_and_paul_orthodox_church_db',\\r\\n      target_table VARCHAR(100),\\r\\n      record_type ENUM('baptism', 'marriage', 'funeral') NOT NULL,\\r\\n      transferred_data JSON,\\r\\n      target_record_id INT,\\r\\n      transfer_started_at TIMESTAMP NULL,\\r\\n      transfer_completed_at TIMESTAMP NULL,\\r\\n      error_message TEXT,\\r\\n      retry_count INT DEFAULT 0,\\r\\n      initiated_by INT,\\r\\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\\r\\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\r\\n      FOREIGN KEY (processing_log_id) REFERENCES ocr_processing_log(id) ON DELETE SET NULL,\\r\\n      FOREIGN KEY (review_queue_id) REFERENCES ocr_review_queue(id) ON DELETE SET NULL,\\r\\n      INDEX idx_church_id (church_id),\\r\\n      INDEX idx_source_ocr_job_id (source_ocr_job_id),\\r\\n      INDEX idx_transfer_status (transfer_status),\\r\\n      INDEX idx_transfer_type (transfer_type),\\r\\n      INDEX idx_record_type (record_type),\\r\\n      INDEX idx_target_record_id (target_record_id),\\r\\n      INDEX idx_created_at (created_at)\\r\\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\\r\\n    COMMENT='Track transfers of OCR jobs from processing DB to records DB'\\r\\n  `\\r\\n};\\r\\n\\r\\nasync function createOcrSchema() {\\r\\n  let connection;\\r\\n  \\r\\n  try {\\r\\n    console.log('🔨 PHASE 1 - Step 2: Creating OCR schema tables in ssppoc_records_db...');\\r\\n    console.log('================================================================================');\\r\\n    \\r\\n    connection = await mysql.createConnection({\\r\\n      host: 'localhost',\\r\\n      user: 'orthodoxapps', \\r\\n      password: '[REDACTED]',\\r\\n      database: 'ssppoc_records_db'\\r\\n    });\\r\\n    \\r\\n    console.log('✅ Connected to ssppoc_records_db');\\r\\n    \\r\\n    // Create each table\\r\\n    let tablesCreated = 0;\\r\\n    let tablesExisted = 0;\\r\\n    \\r\\n    for (const [tableName, sql] of Object.entries(OCR_TABLES_SCHEMA)) {\\r\\n      try {\\r\\n        console.log(`\\\\n🔨 Creating table: ${tableName}`);\\r\\n        \\r\\n        await connection.execute(sql);\\r\\n        \\r\\n        // Check if table was actually created or already existed\\r\\n        const [tableCheck] = await connection.query(\\r\\n          `SELECT COUNT(*) as count FROM information_schema.tables \\r\\n           WHERE table_schema = 'ssppoc_records_db' AND table_name = ?`,\\r\\n          [tableName]\\r\\n        );\\r\\n        \\r\\n        if (tableCheck[0].count > 0) {\\r\\n          console.log(`   ✅ ${tableName} - Ready`);\\r\\n          tablesCreated++;\\r\\n        } else {\\r\\n          console.log(`   ❌ ${tableName} - Failed to create`);\\r\\n        }\\r\\n        \\r\\n      } catch (error) {\\r\\n        if (error.code === 'ER_TABLE_EXISTS_ERROR') {\\r\\n          console.log(`   ℹ️  ${tableName} - Already exists`);\\r\\n          tablesExisted++;\\r\\n        } else {\\r\\n          console.error(`   ❌ ${tableName} - Error:`, error.message);\\r\\n          throw error;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    console.log('\\\\n🔍 Verifying table structure...');\\r\\n    \\r\\n    // Verify all tables exist and show their structure\\r\\n    for (const tableName of Object.keys(OCR_TABLES_SCHEMA)) {\\r\\n      const [columns] = await connection.query(`DESCRIBE ${tableName}`);\\r\\n      console.log(`\\\\n📋 ${tableName} (${columns.length} columns):`);\\r\\n      \\r\\n      columns.forEach(col => {\\r\\n        const nullable = col.Null === 'YES' ? 'NULL' : 'NOT NULL';\\r\\n        const key = col.Key ? ` [${col.Key}]` : '';\\r\\n        const defaultVal = col.Default !== null ? ` DEFAULT: ${col.Default}` : '';\\r\\n        console.log(`   - ${col.Field}: ${col.Type} ${nullable}${key}${defaultVal}`);\\r\\n      });\\r\\n    }\\r\\n    \\r\\n    // Insert sample field configuration for church 14 (Saints Peter and Paul)\\r\\n    console.log('\\\\n🌱 Creating sample field configuration for Saints Peter and Paul (church_id: 14)...');\\r\\n    \\r\\n    const sampleBaptismConfig = {\\r\\n      fields: [\\r\\n        {\\r\\n          ocr_label: \\\"Name\\\",\\r\\n          target_column: \\\"full_name\\\", \\r\\n          required: true,\\r\\n          validation: \\\"^[A-Za-z\\\\\\\\s]{2,100}$\\\",\\r\\n          format: \\\"{first_name} {last_name}\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Date of Birth\\\",\\r\\n          target_column: \\\"birth_date\\\",\\r\\n          required: true,\\r\\n          validation: \\\"date\\\",\\r\\n          format: \\\"YYYY-MM-DD\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Date of Baptism\\\", \\r\\n          target_column: \\\"baptism_date\\\",\\r\\n          required: true,\\r\\n          validation: \\\"date\\\",\\r\\n          format: \\\"YYYY-MM-DD\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Father\\\",\\r\\n          target_column: \\\"father_name\\\",\\r\\n          required: false,\\r\\n          validation: \\\"^[A-Za-z\\\\\\\\s]{0,100}$\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Mother\\\",\\r\\n          target_column: \\\"mother_name\\\", \\r\\n          required: false,\\r\\n          validation: \\\"^[A-Za-z\\\\\\\\s]{0,100}$\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Godparent\\\",\\r\\n          target_column: \\\"godparent_name\\\",\\r\\n          required: false,\\r\\n          validation: \\\"^[A-Za-z\\\\\\\\s]{0,100}$\\\"\\r\\n        },\\r\\n        {\\r\\n          ocr_label: \\\"Clergy\\\",\\r\\n          target_column: \\\"clergy\\\",\\r\\n          required: false,\\r\\n          validation: \\\"^[A-Za-z\\\\\\\\s\\\\\\\\.]{0,100}$\\\"\\r\\n        }\\r\\n      ],\\r\\n      settings: {\\r\\n        auto_insert_threshold: 85,\\r\\n        require_manual_review: [\\\"birth_date\\\", \\\"baptism_date\\\"],\\r\\n        confidence_warning_threshold: 70\\r\\n      }\\r\\n    };\\r\\n    \\r\\n    await connection.execute(`\\r\\n      INSERT INTO ocr_field_configurations (church_id, record_type, field_config, description, created_by) \\r\\n      VALUES (?, ?, ?, ?, ?)\\r\\n      ON DUPLICATE KEY UPDATE \\r\\n        field_config = VALUES(field_config),\\r\\n        updated_at = CURRENT_TIMESTAMP,\\r\\n        description = VALUES(description)\\r\\n    `, [\\r\\n      14, \\r\\n      'baptism', \\r\\n      JSON.stringify(sampleBaptismConfig),\\r\\n      'Default baptism record field configuration for Saints Peter and Paul Orthodox Church',\\r\\n      1\\r\\n    ]);\\r\\n    \\r\\n    console.log('   ✅ Sample baptism field configuration created');\\r\\n    \\r\\n    await connection.end();\\r\\n    \\r\\n    console.log('\\\\n================================================================================');\\r\\n    console.log('🎉 OCR Schema Creation Complete!');\\r\\n    console.log(`📊 Tables created/verified: ${Object.keys(OCR_TABLES_SCHEMA).length}`);\\r\\n    console.log(`✅ New tables: ${tablesCreated}`);\\r\\n    console.log(`ℹ️  Existing tables: ${tablesExisted}`);\\r\\n    console.log('\\\\n📝 Next step: Run phase1-create-typescript-interfaces.js to create TypeScript definitions');\\r\\n    console.log('================================================================================');\\r\\n    \\r\\n  } catch (error) {\\r\\n    console.error('❌ Schema creation failed:', error.message);\\r\\n    console.error('📋 Check database permissions and connection');\\r\\n    if (connection) await connection.end();\\r\\n    process.exit(1);\\r\\n  }\\r\\n}\\r\\n\\r\\n// Run schema creation\\r\\ncreateOcrSchema().catch(console.error);\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 293,\n      \"codeLines\": 250,\n      \"commentLines\": 14,\n      \"commentRatio\": 0.05303030303030303,\n      \"averageLineLength\": 41.36363636363637\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.968Z\"\n  },\n  \"contentHash\": \"9d0af853e952f60ed2a19280f7e16dea859b88f0c46ee9de235955e16245876e\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.968Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 240.21428571428572
    },
    "lastAnalyzed": "2025-07-28T07:19:57.158Z"
  },
  "contentHash": "1f8bb8f83af724f4b14932a971b9614d4d9ac8496eee0d52651ea2e404bc8cb8",
  "discoveredAt": "2025-07-28T07:19:57.158Z"
}