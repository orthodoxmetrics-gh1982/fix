{
  "id": "0b147a6359f8",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/scripts/capture-bigbook-screenshots.js",
  "relativePath": "scripts/capture-bigbook-screenshots.js",
  "name": "capture-bigbook-screenshots.js",
  "extension": ".js",
  "size": 10278,
  "modified": "2025-07-28T03:57:35.163Z",
  "created": "2025-07-28T03:57:33.585Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 323,
      "characters": 10236,
      "words": 895
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "puppeteer",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 10
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 19,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 20,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Big Book Custom Components Screenshot Capture\r\n * Automated visual verification of the system using Puppeteer\r\n */\r\n\r\nconst puppeteer = require('puppeteer');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\n// Configuration\r\nconst BASE_URL = process.env.[REDACTED] || 'http://localhost:3000';\r\nconst OUTPUT_DIR = path.join(__dirname, '../screenshots');\r\nconst TIMESTAMP = new Date().toISOString().split('T')[0];\r\n\r\n// Test credentials (for demo/testing purposes)\r\nconst TEST_CREDENTIALS = {\r\n  username: process.env.[REDACTED] || 'admin',\r\n  password: process.env.[REDACTED] || 'admin123'\r\n};\r\n\r\n// Screenshots to capture\r\nconst SCREENSHOT_TARGETS = [\r\n  {\r\n    name: 'BigBook-CustomComponents-Tab',\r\n    path: '/admin',\r\n    action: 'navigate-to-bigbook-custom-components',\r\n    description: 'Big Book Custom Components Tab showing ParishMap'\r\n  },\r\n  {\r\n    name: 'ParishMap-Direct-Access',\r\n    path: '/bigbook/parish-map',\r\n    action: 'wait-for-map-load',\r\n    description: 'ParishMap component loaded directly via URL'\r\n  },\r\n  {\r\n    name: 'BigBook-ComponentViewer',\r\n    path: '/admin',\r\n    action: 'open-parish-map-viewer',\r\n    description: 'BigBookCustomComponentViewer displaying ParishMap'\r\n  }\r\n];\r\n\r\nclass BigBookScreenshotCapture {\r\n  constructor() {\r\n    this.browser = null;\r\n    this.page = null;\r\n  }\r\n\r\n  async initialize() {\r\n    console.log('🚀 Initializing Big Book Screenshot Capture...');\r\n    \r\n    // Ensure output directory exists\r\n    await fs.mkdir(OUTPUT_DIR, { recursive: true });\r\n    \r\n    // Launch browser\r\n    this.browser = await puppeteer.launch({\r\n      headless: 'new',\r\n      args: [\r\n        '--no-sandbox',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-dev-shm-usage',\r\n        '--disable-gpu'\r\n      ]\r\n    });\r\n    \r\n    this.page = await this.browser.newPage();\r\n    \r\n    // Set viewport for consistent screenshots\r\n    await this.page.setViewport({\r\n      width: 1920,\r\n      height: 1080,\r\n      deviceScaleFactor: 1\r\n    });\r\n    \r\n    console.log('✅ Browser initialized');\r\n  }\r\n\r\n  async login() {\r\n    console.log('🔐 Attempting login...');\r\n    \r\n    try {\r\n      await this.page.goto(`${BASE_URL}/auth/login`, { waitUntil: 'networkidle2' });\r\n      \r\n      // Wait for login form\r\n      await this.page.waitForSelector('input[name=\"username\"], input[type=\"email\"]', { timeout: 10000 });\r\n      \r\n      // Fill login form (adjust selectors based on your login form)\r\n      await this.page.type('input[name=\"username\"], input[type=\"email\"]', TEST_CREDENTIALS.username);\r\n      await this.page.type('input[name=\"password\"], input[type=\"password\"]', TEST_CREDENTIALS.password);\r\n      \r\n      // Submit form\r\n      await this.page.click('button[type=\"submit\"], .login-button, .signin-button');\r\n      \r\n      // Wait for redirect after login\r\n      await this.page.waitForNavigation({ waitUntil: 'networkidle2' });\r\n      \r\n      console.log('✅ Login successful');\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.log('⚠️ Login failed or not required:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async captureScreenshot(target) {\r\n    console.log(`📸 Capturing: ${target.name}`);\r\n    \r\n    try {\r\n      // Navigate to target page\r\n      await this.page.goto(`${BASE_URL}${target.path}`, { \r\n        waitUntil: 'networkidle2',\r\n        timeout: 30000 \r\n      });\r\n      \r\n      // Perform specific action based on target\r\n      await this.performAction(target.action);\r\n      \r\n      // Add URL overlay\r\n      await this.addUrlOverlay();\r\n      \r\n      // Capture screenshot\r\n      const screenshotPath = path.join(OUTPUT_DIR, `${target.name}-${TIMESTAMP}.png`);\r\n      await this.page.screenshot({\r\n        path: screenshotPath,\r\n        fullPage: true,\r\n        type: 'png'\r\n      });\r\n      \r\n      console.log(`✅ Screenshot saved: ${screenshotPath}`);\r\n      \r\n      return {\r\n        success: true,\r\n        path: screenshotPath,\r\n        target: target.name,\r\n        description: target.description\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ Failed to capture ${target.name}:`, error.message);\r\n      return {\r\n        success: false,\r\n        target: target.name,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  async performAction(action) {\r\n    switch (action) {\r\n      case 'navigate-to-bigbook-custom-components':\r\n        // Navigate to Big Book\r\n        await this.page.waitForSelector('a[href*=\"bigbook\"], .bigbook-link', { timeout: 10000 });\r\n        await this.page.click('a[href*=\"bigbook\"], .bigbook-link');\r\n        await this.page.waitForTimeout(2000);\r\n        \r\n        // Click on Custom Components tab (tab #7)\r\n        await this.page.waitForSelector('.MuiTab-root:nth-child(7), [data-testid=\"custom-components-tab\"]', { timeout: 10000 });\r\n        await this.page.click('.MuiTab-root:nth-child(7), [data-testid=\"custom-components-tab\"]');\r\n        await this.page.waitForTimeout(3000);\r\n        break;\r\n        \r\n      case 'wait-for-map-load':\r\n        // Wait for Leaflet map to load\r\n        await this.page.waitForSelector('.leaflet-container, .parish-map', { timeout: 15000 });\r\n        await this.page.waitForTimeout(5000); // Allow map tiles to load\r\n        break;\r\n        \r\n      case 'open-parish-map-viewer':\r\n        // Navigate to Big Book Custom Components and click View on ParishMap\r\n        await this.performAction('navigate-to-bigbook-custom-components');\r\n        await this.page.waitForSelector('[data-component=\"parish-map\"] .view-button, .parish-map-card .view-button', { timeout: 10000 });\r\n        await this.page.click('[data-component=\"parish-map\"] .view-button, .parish-map-card .view-button');\r\n        await this.page.waitForTimeout(5000);\r\n        break;\r\n        \r\n      default:\r\n        // Just wait for page to stabilize\r\n        await this.page.waitForTimeout(3000);\r\n    }\r\n  }\r\n\r\n  async addUrlOverlay() {\r\n    // Add URL overlay to screenshot\r\n    const currentUrl = this.page.url();\r\n    \r\n    await this.page.evaluate((url) => {\r\n      // Create overlay element\r\n      const overlay = document.createElement('div');\r\n      overlay.style.cssText = `\r\n        position: fixed;\r\n        top: 10px;\r\n        right: 10px;\r\n        background: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        padding: 8px 12px;\r\n        border-radius: 4px;\r\n        font-family: monospace;\r\n        font-size: 12px;\r\n        z-index: 9999;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n      `;\r\n      overlay.textContent = url;\r\n      document.body.appendChild(overlay);\r\n    }, currentUrl);\r\n    \r\n    // Wait a moment for overlay to render\r\n    await this.page.waitForTimeout(500);\r\n  }\r\n\r\n  async captureAllScreenshots() {\r\n    console.log(`📋 Capturing ${SCREENSHOT_TARGETS.length} screenshots...`);\r\n    \r\n    const results = [];\r\n    \r\n    for (const target of SCREENSHOT_TARGETS) {\r\n      const result = await this.captureScreenshot(target);\r\n      results.push(result);\r\n      \r\n      // Brief pause between screenshots\r\n      await this.page.waitForTimeout(1000);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  async generateReport(results) {\r\n    const reportPath = path.join(OUTPUT_DIR, `BigBook-Screenshot-Report-${TIMESTAMP}.md`);\r\n    \r\n    let report = `# Big Book Custom Components - Screenshot Report\\n\\n`;\r\n    report += `**Date**: ${new Date().toISOString()}\\n`;\r\n    report += `**Base URL**: ${BASE_URL}\\n\\n`;\r\n    \r\n    report += `## Screenshots Captured\\n\\n`;\r\n    \r\n    results.forEach(result => {\r\n      if (result.success) {\r\n        report += `### ✅ ${result.target}\\n`;\r\n        report += `- **Description**: ${result.description}\\n`;\r\n        report += `- **File**: ${path.basename(result.path)}\\n`;\r\n        report += `- **Status**: Successfully captured\\n\\n`;\r\n      } else {\r\n        report += `### ❌ ${result.target}\\n`;\r\n        report += `- **Error**: ${result.error}\\n`;\r\n        report += `- **Status**: Failed to capture\\n\\n`;\r\n      }\r\n    });\r\n    \r\n    report += `## Summary\\n\\n`;\r\n    const successful = results.filter(r => r.success).length;\r\n    const failed = results.filter(r => !r.success).length;\r\n    \r\n    report += `- **Total Screenshots**: ${results.length}\\n`;\r\n    report += `- **Successful**: ${successful}\\n`;\r\n    report += `- **Failed**: ${failed}\\n\\n`;\r\n    \r\n    if (successful === results.length) {\r\n      report += `🎉 **All screenshots captured successfully!**\\n`;\r\n      report += `The Big Book Custom Components system appears to be working correctly.\\n`;\r\n    } else {\r\n      report += `⚠️ **Some screenshots failed to capture.**\\n`;\r\n      report += `Please check the errors above and verify the system is running correctly.\\n`;\r\n    }\r\n    \r\n    await fs.writeFile(reportPath, report);\r\n    console.log(`📄 Report generated: ${reportPath}`);\r\n    \r\n    return reportPath;\r\n  }\r\n\r\n  async cleanup() {\r\n    if (this.browser) {\r\n      await this.browser.close();\r\n      console.log('🧹 Browser closed');\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    try {\r\n      await this.initialize();\r\n      \r\n      // Attempt login (may not be required for localhost)\r\n      await this.login();\r\n      \r\n      // Capture all screenshots\r\n      const results = await this.captureAllScreenshots();\r\n      \r\n      // Generate report\r\n      await this.generateReport(results);\r\n      \r\n      // Summary\r\n      const successful = results.filter(r => r.success).length;\r\n      console.log(`\\n🎉 Screenshot capture complete!`);\r\n      console.log(`✅ Successful: ${successful}/${results.length}`);\r\n      console.log(`📁 Output directory: ${OUTPUT_DIR}`);\r\n      \r\n      return results;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Screenshot capture failed:', error);\r\n      throw error;\r\n    } finally {\r\n      await this.cleanup();\r\n    }\r\n  }\r\n}\r\n\r\n// CLI execution\r\nif (require.main === module) {\r\n  const capture = new BigBookScreenshotCapture();\r\n  \r\n  capture.run().then(results => {\r\n    const successful = results.filter(r => r.success).length;\r\n    process.exit(successful === results.length ? 0 : 1);\r\n  }).catch(error => {\r\n    console.error('Fatal error:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = BigBookScreenshotCapture; "
    },
    "complexity": {
      "totalLines": 323,
      "codeLines": 229,
      "commentLines": 33,
      "commentRatio": 0.12595419847328243,
      "averageLineLength": 36.73664122137404
    },
    "lastAnalyzed": "2025-07-28T07:19:59.074Z"
  },
  "contentHash": "4b36cdc1410d63f8c205e59fc7f450692648030b6395b98f1f344e016d5836c1",
  "discoveredAt": "2025-07-28T07:19:59.074Z"
}