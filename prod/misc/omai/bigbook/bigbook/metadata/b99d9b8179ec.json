{
  "id": "b99d9b8179ec",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/611d3f7e3019.json",
  "relativePath": "bigbook/metadata/611d3f7e3019.json",
  "name": "611d3f7e3019.json",
  "extension": ".json",
  "size": 4909,
  "modified": "2025-07-26T04:17:10.970Z",
  "created": "2025-07-26T04:17:10.970Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 4875,
      "words": 391
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"611d3f7e3019\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase1-verify-records-db.js\",\n  \"relativePath\": \"server/legacy/phase1-verify-records-db.js\",\n  \"name\": \"phase1-verify-records-db.js\",\n  \"extension\": \".js\",\n  \"size\": 3224,\n  \"modified\": \"2025-07-24T14:51:40.492Z\",\n  \"created\": \"2025-07-24T14:51:40.492Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 93,\n      \"characters\": 3190,\n      \"words\": 278\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 8\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 18,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"#!/usr/bin/env node\\r\\n\\r\\n/**\\r\\n * Phase 1: Database Schema & Core Infrastructure\\r\\n * Step 1: Verify ssppoc_records_db database exists and is accessible\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\n\\r\\nasync function verifyRecordsDb() {\\r\\n  try {\\r\\n    console.log('üîç PHASE 1 - Step 1: Verifying ssppoc_records_db database access...');\\r\\n    console.log('================================================================================');\\r\\n    \\r\\n    const connection = await mysql.createConnection({\\r\\n      host: 'localhost',\\r\\n      user: 'orthodoxapps',\\r\\n      password: '[REDACTED]',\\r\\n      database: 'ssppoc_records_db'\\r\\n    });\\r\\n    \\r\\n    console.log('‚úÖ Connected to ssppoc_records_db successfully');\\r\\n    \\r\\n    // Check existing tables\\r\\n    const [tables] = await connection.query('SHOW TABLES');\\r\\n    console.log(`üìä Found ${tables.length} existing tables:`);\\r\\n    \\r\\n    const tableNames = tables.map(table => Object.values(table)[0]);\\r\\n    tableNames.forEach(table => {\\r\\n      console.log(`   - ${table}`);\\r\\n    });\\r\\n    \\r\\n    // Check for OCR-related tables that we need to create\\r\\n    const requiredTables = [\\r\\n      'ocr_field_configurations',\\r\\n      'ocr_processing_log', \\r\\n      'ocr_review_queue',\\r\\n      'ocr_job_transfers'\\r\\n    ];\\r\\n    \\r\\n    console.log('\\\\nüîç Checking for required OCR tables...');\\r\\n    const missingTables = [];\\r\\n    \\r\\n    for (const table of requiredTables) {\\r\\n      if (tableNames.includes(table)) {\\r\\n        console.log(`   ‚úÖ ${table} - EXISTS`);\\r\\n      } else {\\r\\n        console.log(`   ‚ùå ${table} - MISSING`);\\r\\n        missingTables.push(table);\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    // Check for existing record tables\\r\\n    console.log('\\\\nüìã Checking for existing record tables...');\\r\\n    const recordTables = ['baptism_records', 'marriage_records', 'funeral_records'];\\r\\n    \\r\\n    for (const table of recordTables) {\\r\\n      if (tableNames.includes(table)) {\\r\\n        console.log(`   ‚úÖ ${table} - EXISTS`);\\r\\n        \\r\\n        // Count records\\r\\n        const [countResult] = await connection.query(`SELECT COUNT(*) as count FROM ${table}`);\\r\\n        console.log(`      üìä Contains ${countResult[0].count} records`);\\r\\n      } else {\\r\\n        console.log(`   ‚ùå ${table} - MISSING (will need to be created)`);\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    await connection.end();\\r\\n    \\r\\n    console.log('\\\\n================================================================================');\\r\\n    console.log('üéØ Database verification complete');\\r\\n    console.log(`üìä Total tables found: ${tables.length}`);\\r\\n    console.log(`‚ùå Missing OCR tables: ${missingTables.length}`);\\r\\n    \\r\\n    if (missingTables.length > 0) {\\r\\n      console.log('\\\\nüìù Next step: Run phase1-create-ocr-schema.js to create missing tables');\\r\\n    } else {\\r\\n      console.log('\\\\n‚úÖ All required OCR tables exist - schema is ready!');\\r\\n    }\\r\\n    \\r\\n    console.log('================================================================================');\\r\\n    \\r\\n  } catch (error) {\\r\\n    console.error('‚ùå Database verification failed:', error.message);\\r\\n    console.error('üìã Check connection details and database permissions');\\r\\n    process.exit(1);\\r\\n  }\\r\\n}\\r\\n\\r\\n// Run verification\\r\\nverifyRecordsDb().catch(console.error);\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 93,\n      \"codeLines\": 63,\n      \"commentLines\": 10,\n      \"commentRatio\": 0.136986301369863,\n      \"averageLineLength\": 41.3013698630137\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.972Z\"\n  },\n  \"contentHash\": \"0c90619adf9195e7d8b075af2b510556097994852ed19eb9a16ed99a263b9f45\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.972Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 86.07142857142857
    },
    "lastAnalyzed": "2025-07-28T07:19:57.025Z"
  },
  "contentHash": "df0b585475dabe4ad9fd4ff421655c8b2b574b1b069f6c592c7b6ab7574c895c",
  "discoveredAt": "2025-07-28T07:19:57.025Z"
}