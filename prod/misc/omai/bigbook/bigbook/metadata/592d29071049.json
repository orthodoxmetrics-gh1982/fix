{
  "id": "592d29071049",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/create-test-user.js",
  "relativePath": "server/utils/create-test-user.js",
  "name": "create-test-user.js",
  "extension": ".js",
  "size": 2908,
  "modified": "2025-07-05T06:52:48.000Z",
  "created": "2025-07-09T00:48:38.526Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 103,
      "characters": 2880,
      "words": 268
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 29,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 53,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 76,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 10,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * Create a test user for login testing\r\n */\r\n\r\nconst bcrypt = require('bcrypt');\r\nconst mysql = require('mysql2/promise');\r\n\r\n// Database configuration\r\nconst dbConfig = {\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  user: process.env.[REDACTED] || 'orthodoxmetrics_user',\r\n  password: process.env.[REDACTED] || 'securepassword123',\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  connectTimeout: 60000,\r\n  acquireTimeout: 60000,\r\n  timeout: 60000,\r\n};\r\n\r\nasync function createTestUser() {\r\n  let connection;\r\n  \r\n  try {\r\n    console.log('🔗 Connecting to database...');\r\n    connection = await mysql.createConnection(dbConfig);\r\n    \r\n    // Test user data\r\n    const testUser = {\r\n      email: 'admin@orthodoxmetrics.com',\r\n      password: '[REDACTED]',\r\n      first_name: 'Test',\r\n      last_name: 'Admin',\r\n      role: 'admin',\r\n      preferred_language: 'en',\r\n      is_active: true,\r\n      email_verified: true\r\n    };\r\n    \r\n    // Hash password\r\n    console.log('🔐 Hashing password...');\r\n    const saltRounds = 10;\r\n    const password_hash = await bcrypt.hash(testUser.password, saltRounds);\r\n    \r\n    // Check if user already exists\r\n    console.log('🔍 Checking if user exists...');\r\n    const [existingUsers] = await connection.execute(\r\n      'SELECT id FROM users WHERE email = ?',\r\n      [testUser.email]\r\n    );\r\n    \r\n    if (existingUsers.length > 0) {\r\n      console.log('✅ Test user already exists!');\r\n      console.log('📧 Email:', testUser.email);\r\n      console.log('🔑 Password:'[REDACTED]'👤 Creating test user...');\r\n    const [result] = await connection.execute(\r\n      `INSERT INTO users (email, password_hash, first_name, last_name, role, preferred_language, is_active, email_verified, created_at, updated_at) \r\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`,\r\n      [\r\n        testUser.email,\r\n        password_hash,\r\n        testUser.first_name,\r\n        testUser.last_name,\r\n        testUser.role,\r\n        testUser.preferred_language,\r\n        testUser.is_active,\r\n        testUser.email_verified\r\n      ]\r\n    );\r\n    \r\n    console.log('✅ Test user created successfully!');\r\n    console.log('📧 Email:', testUser.email);\r\n    console.log('🔑 Password:'[REDACTED]'🆔 User ID:', result.insertId);\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error creating test user:', error);\r\n    throw error;\r\n  } finally {\r\n    if (connection) {\r\n      await connection.end();\r\n    }\r\n  }\r\n}\r\n\r\n// Run the script\r\nif (require.main === module) {\r\n  createTestUser()\r\n    .then(() => {\r\n      console.log('🎉 Test user setup complete!');\r\n      process.exit(0);\r\n    })\r\n    .catch((error) => {\r\n      console.error('💥 Script failed:', error);\r\n      process.exit(1);\r\n    });\r\n}\r\n\r\nmodule.exports = createTestUser;\r\n"
    },
    "complexity": {
      "totalLines": 103,
      "codeLines": 80,
      "commentLines": 9,
      "commentRatio": 0.10112359550561797,
      "averageLineLength": 30.730337078651687
    },
    "lastAnalyzed": "2025-07-28T07:20:01.236Z"
  },
  "contentHash": "ba9343c25af92b4faaf7b83028f8c9c528c8b4e4cad6cb36914d0a39303cd9ec",
  "discoveredAt": "2025-07-28T07:20:01.236Z"
}