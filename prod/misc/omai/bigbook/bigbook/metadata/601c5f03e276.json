{
  "id": "601c5f03e276",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/0b5ad0fc5f20.json",
  "relativePath": "bigbook/metadata/0b5ad0fc5f20.json",
  "name": "0b5ad0fc5f20.json",
  "extension": ".json",
  "size": 6312,
  "modified": "2025-07-26T04:17:11.770Z",
  "created": "2025-07-26T04:17:11.770Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 62,
      "characters": 6296,
      "words": 537
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 49
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 49,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"0b5ad0fc5f20\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/dbConnections.js\",\n  \"relativePath\": \"server/utils/dbConnections.js\",\n  \"name\": \"dbConnections.js\",\n  \"extension\": \".js\",\n  \"size\": 4324,\n  \"modified\": \"2025-07-24T14:51:40.492Z\",\n  \"created\": \"2025-07-24T14:51:40.492Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 185,\n      \"characters\": 4308,\n      \"words\": 459\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 7\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 14,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"process\\\\.env\\\\.([A-Z_]+)\",\n          \"line\": 45,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"/**\\r\\n * Cross-Database Connection Utilities for OCR System\\r\\n * Handles connections between orthodoxmetrics_db ‚Üî ssppoc_records_db ‚Üî orthodoxmetrics_ocr_db\\r\\n * Generated by Phase 1 setup script\\r\\n */\\r\\n\\r\\nconst mysql = require('mysql2/promise');\\r\\nconst { promisePool: centralPool } = require('../../config/db');\\r\\n\\r\\n// Database Configuration\\r\\nconst DB_CONFIG = {\\r\\n  host: 'localhost',\\r\\n  user: 'orthodoxapps',\\r\\n  password: '[REDACTED]',\\r\\n  charset: 'utf8mb4',\\r\\n  connectionLimit: 10,\\r\\n  acquireTimeout: 60000,\\r\\n  timeout: 60000\\r\\n};\\r\\n\\r\\n// Connection pools for each database\\r\\nlet recordsPool = null;\\r\\nlet ocrPool = null;\\r\\n\\r\\n/**\\r\\n * Get connection pool for Records Database (ssppoc_records_db)\\r\\n */\\r\\nfunction getRecordsDbPool() {\\r\\n  if (!recordsPool) {\\r\\n    recordsPool = mysql.createPool({\\r\\n      ...DB_CONFIG,\\r\\n      database: 'ssppoc_records_db'\\r\\n    });\\r\\n  }\\r\\n  return recordsPool;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Get connection pool for OCR Processing Database (orthodoxmetrics_ocr_db)\\r\\n */\\r\\nfunction getOcrDbPool() {\\r\\n  if (!ocrPool) {\\r\\n    ocrPool = mysql.createPool({\\r\\n      ...DB_CONFIG,\\r\\n      database: process.env.[REDACTED] || 'orthodoxmetrics_ocr_db'\\r\\n    });\\r\\n  }\\r\\n  return ocrPool;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Get single connection to Records Database\\r\\n */\\r\\nasync function getRecordsDbConnection() {\\r\\n  const pool = getRecordsDbPool();\\r\\n  return await pool.getConnection();\\r\\n}\\r\\n\\r\\n/**\\r\\n * Get single connection to OCR Database  \\r\\n */\\r\\nasync function getOcrDbConnection() {\\r\\n  const pool = getOcrDbPool();\\r\\n  return await pool.getConnection();\\r\\n}\\r\\n\\r\\n/**\\r\\n * Execute query on Records Database\\r\\n */\\r\\nasync function executeRecordsQuery(query, params = []) {\\r\\n  const pool = getRecordsDbPool();\\r\\n  return await pool.execute(query, params);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Execute query on OCR Database\\r\\n */\\r\\nasync function executeOcrQuery(query, params = []) {\\r\\n  const pool = getOcrDbPool();\\r\\n  return await pool.execute(query, params);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Execute query on Central Database (orthodoxmetrics_db)\\r\\n */\\r\\nasync function executeCentralQuery(query, params = []) {\\r\\n  return await centralPool.execute(query, params);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Transaction wrapper for Records Database\\r\\n */\\r\\nasync function recordsTransaction(callback) {\\r\\n  const connection = await getRecordsDbConnection();\\r\\n  try {\\r\\n    await connection.beginTransaction();\\r\\n    const result = await callback(connection);\\r\\n    await connection.commit();\\r\\n    return result;\\r\\n  } catch (error) {\\r\\n    await connection.rollback();\\r\\n    throw error;\\r\\n  } finally {\\r\\n    connection.release();\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Transaction wrapper for OCR Database\\r\\n */\\r\\nasync function ocrTransaction(callback) {\\r\\n  const connection = await getOcrDbConnection();\\r\\n  try {\\r\\n    await connection.beginTransaction();\\r\\n    const result = await callback(connection);\\r\\n    await connection.commit();\\r\\n    return result;\\r\\n  } catch (error) {\\r\\n    await connection.rollback();\\r\\n    throw error;\\r\\n  } finally {\\r\\n    connection.release();\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Close all database connections gracefully\\r\\n */\\r\\nasync function closeAllConnections() {\\r\\n  const promises = [];\\r\\n  \\r\\n  if (recordsPool) {\\r\\n    promises.push(recordsPool.end());\\r\\n  }\\r\\n  \\r\\n  if (ocrPool) {\\r\\n    promises.push(ocrPool.end());\\r\\n  }\\r\\n  \\r\\n  await Promise.all(promises);\\r\\n  console.log('‚úÖ All database connections closed');\\r\\n}\\r\\n\\r\\n/**\\r\\n * Test database connections\\r\\n */\\r\\nasync function testConnections() {\\r\\n  console.log('üîç Testing database connections...');\\r\\n  \\r\\n  try {\\r\\n    // Test Records DB\\r\\n    const recordsPool = getRecordsDbPool();\\r\\n    await recordsPool.execute('SELECT 1 as test');\\r\\n    console.log('‚úÖ Records database connection OK');\\r\\n    \\r\\n    // Test OCR DB\\r\\n    const ocrPool = getOcrDbPool();\\r\\n    await ocrPool.execute('SELECT 1 as test');\\r\\n    console.log('‚úÖ OCR database connection OK');\\r\\n    \\r\\n    // Test Central DB\\r\\n    await centralPool.execute('SELECT 1 as test');\\r\\n    console.log('‚úÖ Central database connection OK');\\r\\n    \\r\\n    return true;\\r\\n  } catch (error) {\\r\\n    console.error('‚ùå Database connection test failed:', error.message);\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\\r\\nmodule.exports = {\\r\\n  getRecordsDbPool,\\r\\n  getOcrDbPool,\\r\\n  getRecordsDbConnection,\\r\\n  getOcrDbConnection,\\r\\n  executeRecordsQuery,\\r\\n  executeOcrQuery,\\r\\n  executeCentralQuery,\\r\\n  recordsTransaction,\\r\\n  ocrTransaction,\\r\\n  closeAllConnections,\\r\\n  testConnections\\r\\n};\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 185,\n      \"codeLines\": 119,\n      \"commentLines\": 43,\n      \"commentRatio\": 0.2654320987654321,\n      \"averageLineLength\": 25.19753086419753\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.772Z\"\n  },\n  \"contentHash\": \"7d1c396630a990c568d73f415b1e1f401e26e3eaaccadfdb61e400afaf24462e\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.772Z\"\n}"
    },
    "complexity": {
      "totalLines": 62,
      "codeLines": 62,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 100.56451612903226
    },
    "lastAnalyzed": "2025-07-28T07:19:56.635Z"
  },
  "contentHash": "eb9045b9a3a7093141ef43a1d8973fe55c352bba2fb1281144fbee9b8bd669a9",
  "discoveredAt": "2025-07-28T07:19:56.635Z"
}