{
  "id": "9592ddd5893e",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/7-7-25/AUTHENTICATION_TROUBLESHOOTING.md",
  "relativePath": "docs/archive/7-7-25/AUTHENTICATION_TROUBLESHOOTING.md",
  "name": "AUTHENTICATION_TROUBLESHOOTING.md",
  "extension": ".md",
  "size": 11289,
  "modified": "2025-07-08T03:38:22.520Z",
  "created": "2025-07-09T12:15:03.296Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 382,
      "characters": 11231,
      "words": 1282
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 28
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 29
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 31
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 35
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 32,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 39,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 40,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 41,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 42,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 43,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 78,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 79,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 85,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 88,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 89,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 265,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Orthodox Metrics - 401 Authentication Issues Troubleshooting Guide\r\n\r\n## üö® Problem Identified\r\nIntermittent 401 errors during login, resolved when switching users, indicates session management and authentication middleware issues.\r\n\r\n## üîç Root Causes Found\r\n\r\n### 1. Session Store Connection Issues\r\n- MySQL session store connection timeouts\r\n- Database connection pool exhaustion\r\n- Session table corruption or locking issues\r\n\r\n### 2. Session Configuration Problems\r\n- `httpOnly: false` creates security vulnerabilities\r\n- Inconsistent `sameSite` settings between environments\r\n- Session timeout conflicts\r\n\r\n### 3. Authentication Race Conditions\r\n- Multiple concurrent session writes\r\n- Session save/destroy timing issues\r\n- Cookie domain/path mismatches\r\n\r\n## üõ†Ô∏è Immediate Fixes\r\n\r\n### Fix 1: Update Session Configuration\r\n```javascript\r\n// server/config/session.js - UPDATED VERSION\r\nconst session = require('express-session');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\n\r\nconst path = require('path');\r\nconst envFile = process.env.[REDACTED] === 'production'\r\n  ? '../.env.production'\r\n  : '../.env.development';\r\nrequire('dotenv').config({ path: path.resolve(__dirname, envFile) });\r\n\r\n// Enhanced DB connection options\r\nconst dbOptions = {\r\n  host: process.env.[REDACTED] || '0.0.0.0',\r\n  port: process.env.[REDACTED] || 3306,\r\n  user: process.env.[REDACTED] || 'orthodoxapp',\r\n  password: process.env.[REDACTED] || 'Summerof1982@!',\r\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n  connectTimeout: 30000, // Increased to 30 seconds\r\n  acquireTimeout: 30000,\r\n  waitForConnections: true,\r\n  connectionLimit: 20, // Increased pool size\r\n  queueLimit: 0,\r\n  reconnect: true,\r\n  // Session store specific options\r\n  expiration: 24 * 60 * 60 * 1000, // 1 day in milliseconds\r\n  checkExpirationInterval: 15 * 60 * 1000, // Check every 15 minutes\r\n  createDatabaseTable: true,\r\n  endConnectionOnClose: true,\r\n  charset: 'utf8mb4',\r\n  schema: {\r\n    tableName: 'sessions',\r\n    columnNames: {\r\n      session_id: 'session_id',\r\n      expires: 'expires',\r\n      data: 'data'\r\n    }\r\n  }\r\n};\r\n\r\nconst store = new MySQLStore(dbOptions);\r\n\r\n// Handle store errors gracefully\r\nstore.on('error', (error) => {\r\n  console.error('‚ùå Session store error:', error);\r\n});\r\n\r\nstore.on('connect', () => {\r\n  console.log('‚úÖ Session store connected successfully');\r\n});\r\n\r\nmodule.exports = session({\r\n  key: process.env.[REDACTED] || 'orthodox.sid',\r\n  secret: process.env.[REDACTED] || 'fallback-secret-key-for-development',\r\n  store,\r\n  resave: false,\r\n  saveUninitialized: false,\r\n  rolling: true,\r\n  cookie: {\r\n    secure: process.env.[REDACTED] === 'production', // HTTPS only in production\r\n    httpOnly: true, // SECURITY FIX: Prevent XSS attacks\r\n    maxAge: 1000 * 60 * 60 * 24, // 1 day\r\n    sameSite: process.env.[REDACTED] === 'production' ? 'strict' : 'lax', // Consistent setting\r\n    domain: process.env.[REDACTED] === 'production' ? '.orthodoxmetrics.com' : undefined\r\n  },\r\n  // Add session name for better identification\r\n  name: 'orthodox.sid'\r\n});\r\n```\r\n\r\n### Fix 2: Enhanced Authentication Middleware\r\n```javascript\r\n// server/middleware/auth.js - NEW FILE\r\nconst authMiddleware = (req, res, next) => {\r\n  console.log('üîê Auth middleware - Session ID:', req.sessionID);\r\n  console.log('üîê Auth middleware - User:', req.session?.user?.email);\r\n  \r\n  // Check if session exists and has user\r\n  if (!req.session || !req.session.user) {\r\n    console.log('‚ùå No valid session found');\r\n    return res.status(401).json({ \r\n      error: 'Authentication required',\r\n      code: 'NO_SESSION'\r\n    });\r\n  }\r\n\r\n  // Verify session hasn't expired\r\n  if (req.session.expires && new Date() > new Date(req.session.expires)) {\r\n    console.log('‚ùå Session expired');\r\n    req.session.destroy();\r\n    return res.status(401).json({ \r\n      error: 'Session expired',\r\n      code: 'SESSION_EXPIRED'\r\n    });\r\n  }\r\n\r\n  // Add user to request object for easy access\r\n  req.user = req.session.user;\r\n  \r\n  // Update last activity\r\n  req.session.lastActivity = new Date();\r\n  \r\n  next();\r\n};\r\n\r\nconst optionalAuth = (req, res, next) => {\r\n  if (req.session?.user) {\r\n    req.user = req.session.user;\r\n  }\r\n  next();\r\n};\r\n\r\nmodule.exports = { authMiddleware, optionalAuth };\r\n```\r\n\r\n### Fix 3: Improved Login Endpoint\r\n```javascript\r\n// server/routes/auth.js - UPDATED LOGIN FUNCTION\r\n// POST /api/auth/login - User login (IMPROVED VERSION)\r\nrouter.post('/login', async (req, res) => {\r\n  try {\r\n    const { email, password, username } = req.body;\r\n    const loginEmail = email || username;\r\n\r\n    console.log('üîë Login attempt for:', loginEmail);\r\n    console.log('üîë Session ID before login:', req.sessionID);\r\n\r\n    if (!loginEmail || !password) {\r\n      return res.status(400).json({ \r\n        error: 'Email and password are required',\r\n        code: 'MISSING_CREDENTIALS'\r\n      });\r\n    }\r\n\r\n    // Destroy any existing session first to prevent conflicts\r\n    if (req.session.user) {\r\n      console.log('üîÑ Destroying existing session for user:', req.session.user.email);\r\n      await new Promise((resolve, reject) => {\r\n        req.session.destroy((err) => {\r\n          if (err) reject(err);\r\n          else resolve();\r\n        });\r\n      });\r\n    }\r\n\r\n    // Look up user by email\r\n    const [users] = await promisePool.query(\r\n      'SELECT id, email, password_hash, first_name, last_name, role, is_active, last_login FROM users WHERE email = ? AND is_active = 1',\r\n      [loginEmail]\r\n    );\r\n\r\n    if (users.length === 0) {\r\n      console.log('‚ùå User not found or inactive:', loginEmail);\r\n      return res.status(401).json({ \r\n        error: 'Invalid email or password',\r\n        code: 'INVALID_CREDENTIALS'\r\n      });\r\n    }\r\n\r\n    const user = users[0];\r\n    console.log('üë§ Found user:', { id: user.id, email: user.email, role: user.role });\r\n\r\n    // Verify password\r\n    const isValidPassword = await bcrypt.compare(password, user.password_hash);\r\n    if (!isValidPassword) {\r\n      console.log('‚ùå Invalid password for user:', loginEmail);\r\n      return res.status(401).json({ \r\n        error: 'Invalid email or password',\r\n        code: 'INVALID_CREDENTIALS'\r\n      });\r\n    }\r\n\r\n    // Update last login timestamp\r\n    await promisePool.query(\r\n      'UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?',\r\n      [user.id]\r\n    );\r\n\r\n    // Regenerate session ID for security\r\n    await new Promise((resolve, reject) => {\r\n      req.session.regenerate((err) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n\r\n    // Create new session\r\n    req.session.user = {\r\n      id: user.id,\r\n      email: user.email,\r\n      first_name: user.first_name,\r\n      last_name: user.last_name,\r\n      role: user.role,\r\n      landing_page: '/dashboard/analytics'\r\n    };\r\n\r\n    req.session.loginTime = new Date();\r\n    req.session.lastActivity = new Date();\r\n\r\n    // Save session with error handling\r\n    await new Promise((resolve, reject) => {\r\n      req.session.save((err) => {\r\n        if (err) {\r\n          console.error('‚ùå Session save error:', err);\r\n          reject(err);\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n\r\n    console.log('‚úÖ Login successful for user:', req.session.user.email);\r\n    console.log('‚úÖ New Session ID:', req.sessionID);\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Login successful',\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        first_name: user.first_name,\r\n        last_name: user.last_name,\r\n        role: user.role\r\n      },\r\n      sessionId: req.sessionID,\r\n      redirectTo: '/dashboard/analytics'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Login error:', error);\r\n    \r\n    // Clean up any partial session\r\n    if (req.session) {\r\n      req.session.destroy();\r\n    }\r\n    \r\n    res.status(500).json({\r\n      error: 'Login failed',\r\n      code: 'LOGIN_ERROR',\r\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n### Fix 4: Database Session Table Optimization\r\n```sql\r\n-- Run this SQL to optimize the session table\r\n-- Connect to your orthodoxmetrics_db database\r\n\r\n-- Create optimized sessions table if it doesn't exist\r\nCREATE TABLE IF NOT EXISTS sessions (\r\n  session_id VARCHAR(128) COLLATE utf8mb4_bin NOT NULL,\r\n  expires INT(11) UNSIGNED NOT NULL,\r\n  data MEDIUMTEXT COLLATE utf8mb4_bin,\r\n  PRIMARY KEY (session_id),\r\n  KEY expires_idx (expires)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\r\n\r\n-- Clean up expired sessions\r\nDELETE FROM sessions WHERE expires < UNIX_TIMESTAMP();\r\n\r\n-- Add index for better performance\r\nALTER TABLE sessions ADD INDEX IF NOT EXISTS idx_expires (expires);\r\n\r\n-- Optimize table\r\nOPTIMIZE TABLE sessions;\r\n```\r\n\r\n## üöÄ Quick Implementation Steps\r\n\r\n### Step 1: Update Session Configuration\r\n```bash\r\n# Backup current session config\r\ncp Z:\\server\\config\\session.js Z:\\server\\config\\session.js.backup\r\n\r\n# Replace with the improved version above\r\n```\r\n\r\n### Step 2: Clean Database Sessions\r\n```bash\r\n# Connect to your database and run the SQL optimization\r\nmysql -u orthodoxapp -p orthodoxmetrics_db < session_cleanup.sql\r\n```\r\n\r\n### Step 3: Restart Services\r\n```bash\r\n# Restart the backend service\r\ncd Z:\\server\r\nnpm restart\r\n\r\n# Or if using PM2\r\npm2 restart orthodox-backend\r\n```\r\n\r\n### Step 4: Clear Browser Data\r\n```javascript\r\n// Have users clear cookies and local storage\r\nlocalStorage.clear();\r\nsessionStorage.clear();\r\n// And clear cookies for orthodoxmetrics.com\r\n```\r\n\r\n## üîç Monitoring & Verification\r\n\r\n### Check Session Health\r\n```bash\r\n# Monitor session table\r\nmysql -u orthodoxapp -p -e \"SELECT COUNT(*) as active_sessions, MIN(expires) as oldest_expires, MAX(expires) as newest_expires FROM orthodoxmetrics_db.sessions WHERE expires > UNIX_TIMESTAMP();\"\r\n\r\n# Monitor logs for session errors\r\ntail -f Z:\\logs\\error.log | grep -i session\r\n```\r\n\r\n### Test Authentication Flow\r\n```bash\r\n# Test login endpoint\r\ncurl -X POST http://localhost:3001/api/auth/login \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"email\":\"test@example.com\",\"password\":\"testpassword\"}' \\\r\n  -c cookies.txt\r\n\r\n# Test auth check with session\r\ncurl -X GET http://localhost:3001/api/auth/check \\\r\n  -b cookies.txt\r\n```\r\n\r\n## ‚ö° Expected Results\r\n\r\nAfter implementing these fixes:\r\n- ‚úÖ No more intermittent 401 errors\r\n- ‚úÖ Consistent login behavior across users\r\n- ‚úÖ Improved session security\r\n- ‚úÖ Better error logging and debugging\r\n- ‚úÖ Faster session operations\r\n\r\n## üÜò If Issues Persist\r\n\r\nIf you still experience 401 errors after these fixes:\r\n\r\n1. **Check Database Connection**:\r\n   ```bash\r\n   mysql -u orthodoxapp -p orthodoxmetrics_db -e \"SHOW PROCESSLIST;\"\r\n   ```\r\n\r\n2. **Monitor Session Store**:\r\n   ```bash\r\n   tail -f Z:\\logs\\orthodox-backend.log | grep -i \"session\\|auth\"\r\n   ```\r\n\r\n3. **Test with Clean Browser**:\r\n   - Use incognito/private browsing\r\n   - Clear all site data\r\n   - Test with different browsers\r\n\r\nThe key insight is that the 401 errors are primarily caused by session store connection issues and session configuration problems, not nginx configuration issues. These fixes address the root causes in the backend authentication system.\r\n"
    },
    "complexity": {
      "totalLines": 382,
      "codeLines": 265,
      "commentLines": 52,
      "commentRatio": 0.1640378548895899,
      "averageLineLength": 33.981072555205046
    },
    "lastAnalyzed": "2025-07-28T07:19:58.087Z"
  },
  "contentHash": "4a4176fa65a739b03b029681f6f52d3fd1119dfc621e0c1c7d97a5db3c0d0ea7",
  "discoveredAt": "2025-07-28T07:19:58.087Z"
}