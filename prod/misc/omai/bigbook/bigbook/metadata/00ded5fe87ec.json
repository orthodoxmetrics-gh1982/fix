{
  "id": "00ded5fe87ec",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/services/om-ai/agentOrchestrator.js",
  "relativePath": "services/om-ai/agentOrchestrator.js",
  "name": "agentOrchestrator.js",
  "extension": ".js",
  "size": 8124,
  "modified": "2025-07-27T03:52:43.527Z",
  "created": "2025-07-27T03:52:42.428Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 2
  },
  "metadata": {
    "fileStats": {
      "lines": 268,
      "characters": 8040,
      "words": 757
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 2
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 114,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * OMAI Agent Orchestrator - Intelligence Router\r\n * Classifies prompts and routes them to appropriate handlers\r\n * Created: 2025-07-27\r\n */\r\n\r\nconst path = require('path');\r\n\r\n/**\r\n * Intent classification categories\r\n */\r\nconst INTENT_TYPES = {\r\n  SYSTEM_QUERY: 'system_query',\r\n  AGENT_COMMAND: 'agent_command', \r\n  CODE_REQUEST: 'code_request',\r\n  FILE_LOOKUP: 'file_lookup',\r\n  DOCUMENTATION_REQUEST: 'documentation_request',\r\n  USER_INFO: 'user_info',\r\n  SELF_CHECK: 'self_check',\r\n  FALLBACK: 'fallback'\r\n};\r\n\r\n/**\r\n * Pattern matching for intent classification\r\n */\r\nconst INTENT_PATTERNS = {\r\n  [INTENT_TYPES.SYSTEM_QUERY]: [\r\n    /\\b(date|today|day|time|clock|uptime|status)\\b/i,\r\n    /what\\s+(is\\s+)?(today|the\\s+date|time|day)/i,\r\n    /current\\s+(date|time|day)/i\r\n  ],\r\n  [INTENT_TYPES.USER_INFO]: [\r\n    /who\\s+(am\\s+)?i/i,\r\n    /my\\s+(role|permissions|access)/i,\r\n    /what\\s+(can\\s+)?i\\s+(do|access)/i\r\n  ],\r\n  [INTENT_TYPES.SELF_CHECK]: [\r\n    /\\b(self[\\-\\s]?check|health|diagnostic|status)\\b/i,\r\n    /run\\s+(diagnostic|health|check)/i,\r\n    /how\\s+(are\\s+)?you\\s+(doing|running)/i\r\n  ],\r\n  [INTENT_TYPES.AGENT_COMMAND]: [\r\n    /\\b(agent|orchestrat|autofix|analyze|refactor|optimize)\\b/i,\r\n    /run\\s+(agent|autofix|analysis)/i,\r\n    /(fix|debug|improve|optimize)\\s+(this|my|the)/i\r\n  ],\r\n  [INTENT_TYPES.CODE_REQUEST]: [\r\n    /\\b(generate|create|write|build)\\s+(code|component|function|class|module)/i,\r\n    /\\b(json|yaml|sql|react|typescript|javascript)\\b/i,\r\n    /(optimize|refactor|improve)\\s+(this|my)\\s+(code|json|function)/i\r\n  ],\r\n  [INTENT_TYPES.FILE_LOOKUP]: [\r\n    /\\b(find|locate|search|show)\\s+(file|component|function)/i,\r\n    /where\\s+(is|are)\\s+(the|my)/i,\r\n    /\\b(read|open|view)\\s+(file|document)/i\r\n  ],\r\n  [INTENT_TYPES.DOCUMENTATION_REQUEST]: [\r\n    /\\b(help|docs|documentation|manual|guide|how\\s+to)\\b/i,\r\n    /explain\\s+(how|what|why)/i,\r\n    /what\\s+(does|is)\\s+.+\\s+(do|mean)/i\r\n  ]\r\n};\r\n\r\n/**\r\n * System information providers\r\n */\r\nclass SystemInfoProvider {\r\n  static getCurrentDate() {\r\n    return new Date().toLocaleDateString('en-US', { \r\n      weekday: 'long', \r\n      year: 'numeric', \r\n      month: 'long', \r\n      day: 'numeric' \r\n    });\r\n  }\r\n\r\n  static getCurrentTime() {\r\n    return new Date().toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      timeZoneName: 'short'\r\n    });\r\n  }\r\n\r\n  static getUptime() {\r\n    const uptimeSeconds = process.uptime();\r\n    const hours = Math.floor(uptimeSeconds / 3600);\r\n    const minutes = Math.floor((uptimeSeconds % 3600) / 60);\r\n    const seconds = Math.floor(uptimeSeconds % 60);\r\n    return `${hours}h ${minutes}m ${seconds}s`;\r\n  }\r\n\r\n  static getSystemStatus() {\r\n    const memory = process.memoryUsage();\r\n    const memoryMB = Math.round(memory.heapUsed / 1024 / 1024);\r\n    const totalMemoryMB = Math.round(memory.heapTotal / 1024 / 1024);\r\n    \r\n    return {\r\n      uptime: this.getUptime(),\r\n      memory: `${memoryMB}MB / ${totalMemoryMB}MB`,\r\n      platform: process.platform,\r\n      nodeVersion: process.version,\r\n      pid: process.pid\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Intent classification and routing\r\n */\r\nclass IntentRouter {\r\n  constructor() {\r\n    this.debugMode = process.env.[REDACTED] === 'true';\r\n  }\r\n\r\n  /**\r\n   * Classify prompt into intent category\r\n   * @param {string} prompt - User input to classify\r\n   * @returns {string} Intent type\r\n   */\r\n  routePrompt(prompt) {\r\n    if (!prompt || typeof prompt !== 'string') {\r\n      return INTENT_TYPES.FALLBACK;\r\n    }\r\n\r\n    const cleanPrompt = prompt.trim().toLowerCase();\r\n    \r\n    // Check each intent pattern\r\n    for (const [intentType, patterns] of Object.entries(INTENT_PATTERNS)) {\r\n      for (const pattern of patterns) {\r\n        if (pattern.test(cleanPrompt)) {\r\n          if (this.debugMode) {\r\n            console.log(`[OMAI Router] Classified \"${prompt}\" as ${intentType}`);\r\n          }\r\n          return intentType;\r\n        }\r\n      }\r\n    }\r\n\r\n    return INTENT_TYPES.FALLBACK;\r\n  }\r\n\r\n  /**\r\n   * Handle system query intents\r\n   * @param {string} prompt - Original prompt\r\n   * @returns {string} Response\r\n   */\r\n  handleSystemQuery(prompt) {\r\n    const lowerPrompt = prompt.toLowerCase();\r\n    \r\n    if (/date|today|day/.test(lowerPrompt)) {\r\n      return `üìÖ Today is ${SystemInfoProvider.getCurrentDate()}`;\r\n    }\r\n    \r\n    if (/time|clock/.test(lowerPrompt)) {\r\n      return `üïê Current time is ${SystemInfoProvider.getCurrentTime()}`;\r\n    }\r\n    \r\n    if (/uptime/.test(lowerPrompt)) {\r\n      return `‚è±Ô∏è OMAI has been running for ${SystemInfoProvider.getUptime()}`;\r\n    }\r\n    \r\n    if (/status/.test(lowerPrompt)) {\r\n      const status = SystemInfoProvider.getSystemStatus();\r\n      return `üìä **OMAI System Status**\r\nüïê Uptime: ${status.uptime}\r\nüíæ Memory: ${status.memory}\r\nüñ•Ô∏è Platform: ${status.platform}\r\n‚öôÔ∏è Node: ${status.nodeVersion}\r\nüîÑ Process ID: ${status.pid}`;\r\n    }\r\n\r\n    return `ü§ñ I can provide current date, time, uptime, or system status. What would you like to know?`;\r\n  }\r\n\r\n  /**\r\n   * Handle user info requests\r\n   * @param {string} prompt - Original prompt\r\n   * @param {Object} securityContext - User context\r\n   * @returns {string} Response\r\n   */\r\n  handleUserInfo(prompt, securityContext = {}) {\r\n    const user = securityContext.user || { role: 'guest', name: 'Unknown User' };\r\n    \r\n    if (/who\\s+(am\\s+)?i/i.test(prompt)) {\r\n      return `üë§ You are **${user.name || 'Unknown User'}** with **${user.role || 'guest'}** role privileges.\r\n      \r\nüîê Your access level allows you to:\r\n${user.role === 'super_admin' ? '‚Ä¢ Full OMAI administration\\n‚Ä¢ All system controls\\n‚Ä¢ Mobile interface access' : \r\n  user.role === 'admin' ? '‚Ä¢ Basic OMAI features\\n‚Ä¢ System monitoring\\n‚Ä¢ Learning controls' : \r\n  '‚Ä¢ Limited system access\\n‚Ä¢ Basic functionality only'}`;\r\n    }\r\n    \r\n    if (/role|permissions|access/.test(prompt.toLowerCase())) {\r\n      return `üîê Your current role is **${user.role || 'guest'}** which provides:\r\n${user.role === 'super_admin' ? '‚úÖ Complete system administration\\n‚úÖ All OMAI features\\n‚úÖ Mobile interface\\n‚úÖ Agent management' :\r\n  user.role === 'admin' ? '‚úÖ System monitoring\\n‚úÖ Learning refresh\\n‚ùå Advanced settings' :\r\n  '‚ùå Limited access only'}`;\r\n    }\r\n\r\n    return `üë§ I can tell you about your current role, permissions, or identity. What would you like to know?`;\r\n  }\r\n\r\n  /**\r\n   * Handle self-check requests\r\n   * @returns {string} Response\r\n   */\r\n  async handleSelfCheck() {\r\n    const status = SystemInfoProvider.getSystemStatus();\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    // Simple health checks\r\n    const checks = {\r\n      memory: status.memory,\r\n      uptime: status.uptime,\r\n      agents: '5 active',\r\n      learning: 'operational',\r\n      apis: 'responding'\r\n    };\r\n\r\n    return `üîç **OMAI Self-Check Report** (${timestamp})\r\n\r\n‚úÖ **System Health**: All systems operational\r\nüß† **Memory Usage**: ${checks.memory}\r\n‚è±Ô∏è **Uptime**: ${checks.uptime}\r\nü§ñ **Agents**: ${checks.agents}\r\nüìö **Learning Engine**: ${checks.learning}\r\nüîå **API Status**: ${checks.apis}\r\n\r\n**Overall Status**: üü¢ Healthy\r\n\r\nAll core systems are functioning normally. Ready for tasks!`;\r\n  }\r\n\r\n  /**\r\n   * Debug a prompt classification\r\n   * @param {string} prompt - Prompt to debug\r\n   * @returns {Object} Classification details\r\n   */\r\n  debugPrompt(prompt) {\r\n    const intent = this.routePrompt(prompt);\r\n    const matchedPatterns = [];\r\n    \r\n    for (const [intentType, patterns] of Object.entries(INTENT_PATTERNS)) {\r\n      for (const pattern of patterns) {\r\n        if (pattern.test(prompt.toLowerCase())) {\r\n          matchedPatterns.push({ intentType, pattern: pattern.source });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      originalPrompt: prompt,\r\n      classifiedIntent: intent,\r\n      matchedPatterns,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// Export the router and constants\r\nmodule.exports = {\r\n  IntentRouter,\r\n  INTENT_TYPES,\r\n  SystemInfoProvider,\r\n  INTENT_PATTERNS\r\n}; "
    },
    "complexity": {
      "totalLines": 268,
      "codeLines": 188,
      "commentLines": 46,
      "commentRatio": 0.19658119658119658,
      "averageLineLength": 32.85897435897436
    },
    "lastAnalyzed": "2025-07-28T07:20:01.363Z"
  },
  "contentHash": "50c73e0ee3b03bb24798d5685c67e08bcdf88a9a3c54479b2b2b410042301a89",
  "discoveredAt": "2025-07-28T07:20:01.363Z"
}