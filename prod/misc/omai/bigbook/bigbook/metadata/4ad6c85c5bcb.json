{
  "id": "4ad6c85c5bcb",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/debug.js",
  "relativePath": "server/routes/debug.js",
  "name": "debug.js",
  "extension": ".js",
  "size": 12481,
  "modified": "2025-07-22T03:32:31.765Z",
  "created": "2025-07-09T00:48:38.478Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 334,
      "characters": 12429,
      "words": 985
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 98,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 109,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 119,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 136,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 216,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Debug session endpoint\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\n// Debug endpoint to check session status (uncomment for debugging)\r\nrouter.get('/session', (req, res) => {\r\n    console.log('🔍 Session Debug:');\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Session exists:', !!req.session);\r\n    console.log('  Session user:', req.session?.user);\r\n    console.log('  Session cookie:', req.session?.cookie);\r\n\r\n    res.json({\r\n        sessionID: req.sessionID,\r\n        hasSession: !!req.session,\r\n        hasUser: !!req.session?.user,\r\n        user: req.session?.user || null,\r\n        cookie: req.session?.cookie || null\r\n    });\r\n});\r\n\r\n// Debug endpoint to test kanban auth middleware\r\nrouter.get('/kanban-auth', (req, res, next) => {\r\n    const { requireAuth } = require('../middleware/auth');\r\n    requireAuth(req, res, (err) => {\r\n        if (err) {\r\n            return res.status(500).json({ error: 'Auth middleware error', details: err.message });\r\n        }\r\n        res.json({\r\n            message: 'Auth middleware passed',\r\n            user: req.user,\r\n            sessionUser: req.session?.user\r\n        });\r\n    });\r\n});\r\n\r\n// Debug endpoint to test notification counts with full debugging\r\nrouter.get('/notification-counts', (req, res) => {\r\n    console.log('🔍 Debug Notification Counts Request:');\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Session exists:', !!req.session);\r\n    console.log('  Session user:', req.session?.user);\r\n    console.log('  Headers:', req.headers);\r\n    console.log('  Cookies:', req.headers.cookie);\r\n\r\n    // Test auth middleware manually\r\n    const { requireAuth } = require('../middleware/auth');\r\n    requireAuth(req, res, (err) => {\r\n        if (err) {\r\n            console.log('❌ Auth middleware failed:', err);\r\n            return res.status(401).json({ \r\n                error: 'Auth middleware failed', \r\n                details: err.message,\r\n                debug: {\r\n                    sessionID: req.sessionID,\r\n                    hasSession: !!req.session,\r\n                    sessionUser: req.session?.user || null,\r\n                    headers: req.headers,\r\n                    cookies: req.headers.cookie\r\n                }\r\n            });\r\n        }\r\n        \r\n        console.log('✅ Auth middleware passed for debug notification counts');\r\n        res.json({\r\n            message: 'Auth middleware passed for notification counts',\r\n            user: req.user,\r\n            sessionUser: req.session?.user,\r\n            debug: {\r\n                sessionID: req.sessionID,\r\n                hasSession: !!req.session,\r\n                headers: req.headers,\r\n                cookies: req.headers.cookie\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\n// Debug endpoint to check raw cookie parsing\r\nrouter.get('/cookies', (req, res) => {\r\n    console.log('🔍 Cookie Debug:');\r\n    console.log('  Raw cookies:', req.headers.cookie);\r\n    console.log('  Parsed cookies:', req.cookies);\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Session:', req.session);\r\n\r\n    res.json({\r\n        rawCookies: req.headers.cookie,\r\n        parsedCookies: req.cookies,\r\n        sessionID: req.sessionID,\r\n        session: req.session\r\n    });\r\n});\r\n\r\n// Debug endpoint to manually set and test cookies\r\nrouter.get('/test-cookie', (req, res) => {\r\n    console.log('🔍 Testing Cookie Setting:');\r\n    console.log('  Environment:', process.env.[REDACTED]);\r\n    console.log('  Session before:', req.session);\r\n    \r\n    // Manually set a test session value\r\n    req.session.testValue = 'debug-test-' + Date.now();\r\n    req.session.save((err) => {\r\n        if (err) {\r\n            console.log('❌ Session save error:', err);\r\n            return res.json({\r\n                error: 'Session save failed',\r\n                details: err.message,\r\n                environment: process.env.[REDACTED],\r\n                sessionID: req.sessionID\r\n            });\r\n        }\r\n        \r\n        console.log('✅ Session saved successfully');\r\n        res.json({\r\n            message: 'Test cookie/session set',\r\n            testValue: req.session.testValue,\r\n            sessionID: req.sessionID,\r\n            environment: process.env.[REDACTED],\r\n            session: req.session\r\n        });\r\n    });\r\n});\r\n\r\n// Debug endpoint to check if test cookie persists\r\nrouter.get('/check-cookie', (req, res) => {\r\n    console.log('🔍 Checking Cookie Persistence:');\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Test value:', req.session?.testValue);\r\n    console.log('  Full session:', req.session);\r\n\r\n    res.json({\r\n        sessionID: req.sessionID,\r\n        testValue: req.session?.testValue || 'NOT FOUND',\r\n        hasSession: !!req.session,\r\n        environment: process.env.[REDACTED],\r\n        fullSession: req.session\r\n    });\r\n});\r\n\r\n// Test endpoint to debug session continuity\r\nrouter.get('/session-continuity', (req, res) => {\r\n    console.log('🔍 Session Continuity Test:');\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Session exists:', !!req.session);\r\n    console.log('  Session user:', req.session?.user);\r\n    console.log('  Cookie header:', req.headers.cookie);\r\n    console.log('  Set-Cookie header from last response:', req.get('Set-Cookie'));\r\n\r\n    // Test setting a simple session value\r\n    if (!req.session.continuityTest) {\r\n        req.session.continuityTest = {\r\n            timestamp: new Date().toISOString(),\r\n            counter: 1\r\n        };\r\n        console.log('🆕 First visit - setting continuity test data');\r\n    } else {\r\n        req.session.continuityTest.counter += 1;\r\n        console.log('🔄 Return visit - incrementing counter:', req.session.continuityTest.counter);\r\n    }\r\n\r\n    res.json({\r\n        sessionID: req.sessionID,\r\n        hasSession: !!req.session,\r\n        hasUser: !!req.session?.user,\r\n        continuityTest: req.session.continuityTest,\r\n        cookies: req.headers.cookie,\r\n        userAgent: req.headers['user-agent'],\r\n        host: req.headers.host,\r\n        origin: req.headers.origin,\r\n        referer: req.headers.referer\r\n    });\r\n});\r\n\r\n// Comprehensive session debugging endpoint\r\nrouter.get('/session-full-debug', (req, res) => {\r\n    console.log('🔍 FULL Session Debug:');\r\n    console.log('  Session ID:', req.sessionID);\r\n    console.log('  Session exists:', !!req.session);\r\n    console.log('  Session user:', req.session?.user);\r\n    console.log('  Raw cookie header:', req.headers.cookie);\r\n    console.log('  User-Agent:', req.headers['user-agent']);\r\n    console.log('  Host:', req.headers.host);\r\n    console.log('  X-Forwarded-For:', req.headers['x-forwarded-for']);\r\n    console.log('  X-Forwarded-Proto:', req.headers['x-forwarded-proto']);\r\n    console.log('  X-Real-IP:', req.headers['x-real-ip']);\r\n    console.log('  Session cookie config:', req.session?.cookie);\r\n\r\n    // Check if cookies are being parsed correctly\r\n    const cookies = req.headers.cookie;\r\n    let sessionCookie = null;\r\n    if (cookies) {\r\n        const cookieArray = cookies.split(';');\r\n        sessionCookie = cookieArray.find(cookie => \r\n            cookie.trim().startsWith('orthodox.sid=')\r\n        );\r\n    }\r\n\r\n    res.json({\r\n        sessionID: req.sessionID,\r\n        hasSession: !!req.session,\r\n        hasUser: !!req.session?.user,\r\n        userInfo: req.session?.user || null,\r\n        sessionCookie: sessionCookie,\r\n        allCookies: req.headers.cookie,\r\n        headers: {\r\n            host: req.headers.host,\r\n            userAgent: req.headers['user-agent'],\r\n            xForwardedFor: req.headers['x-forwarded-for'],\r\n            xForwardedProto: req.headers['x-forwarded-proto'],\r\n            xRealIP: req.headers['x-real-ip'],\r\n            origin: req.headers.origin,\r\n            referer: req.headers.referer\r\n        },\r\n        sessionCookieConfig: req.session?.cookie,\r\n        environment: process.env.[REDACTED]\r\n    });\r\n});\r\n\r\n// 🔧 SESSION DEBUG ENDPOINT - Shows session transmission details\r\nrouter.get('/session-status', async (req, res) => {\r\n    console.log('🔍 SESSION STATUS DEBUG ENDPOINT CALLED');\r\n    console.log('======================================');\r\n    \r\n    try {\r\n        const { promisePool } = require('../../config/db');\r\n        \r\n        // Get session information\r\n        const sessionInfo = {\r\n            // Request info\r\n            sessionID: req.sessionID,\r\n            hasSession: !!req.session,\r\n            hasUser: !!req.session?.user,\r\n            userEmail: req.session?.user?.email || null,\r\n            \r\n            // Cookie info\r\n            rawCookies: req.headers.cookie || null,\r\n            hasCookieHeader: !!req.headers.cookie,\r\n            \r\n            // Cookie parsing\r\n            cookiesReceived: [],\r\n            \r\n            // Server info\r\n            timestamp: new Date().toISOString(),\r\n            userAgent: req.headers['user-agent']\r\n        };\r\n        \r\n        // Parse cookies\r\n        if (req.headers.cookie) {\r\n            const cookies = req.headers.cookie.split(';');\r\n            cookies.forEach(cookie => {\r\n                const [name, value] = cookie.trim().split('=');\r\n                sessionInfo.cookiesReceived.push({ \r\n                    name, \r\n                    value: value ? value.substring(0, 20) + '...' : 'empty',\r\n                    isSessionCookie: name === 'orthodox.sid'\r\n                });\r\n            });\r\n        }\r\n        \r\n        // Check database for sessions\r\n        const [sessionCount] = await promisePool.query('SELECT COUNT(*) as count FROM sessions');\r\n        const [recentSessions] = await promisePool.query(`\r\n            SELECT session_id, expires, \r\n                   CASE WHEN data LIKE '%\"email\"%' THEN 'HAS_USER' ELSE 'NO_USER' END as has_user,\r\n                   LENGTH(data) as data_size\r\n            FROM sessions \r\n            ORDER BY expires DESC \r\n            LIMIT 5\r\n        `);\r\n        \r\n        sessionInfo.database = {\r\n            totalSessions: sessionCount[0].count,\r\n            recentSessions: recentSessions.map(s => ({\r\n                id: s.session_id.substring(0, 20) + '...',\r\n                hasUser: s.has_user,\r\n                expires: s.expires,\r\n                isExpired: new Date(s.expires) < new Date(),\r\n                dataSize: s.data_size\r\n            }))\r\n        };\r\n        \r\n        // Diagnosis\r\n        const diagnosis = [];\r\n        \r\n        if (!req.headers.cookie) {\r\n            diagnosis.push('❌ NO COOKIES: Browser is not sending any cookies');\r\n        } else if (!sessionInfo.cookiesReceived.find(c => c.isSessionCookie)) {\r\n            diagnosis.push('❌ NO SESSION COOKIE: Browser sent cookies but no orthodox.sid');\r\n        } else {\r\n            diagnosis.push('✅ SESSION COOKIE: Browser is sending orthodox.sid cookie');\r\n        }\r\n        \r\n        if (!req.session?.user) {\r\n            diagnosis.push('❌ NO USER: Session exists but no user data');\r\n        } else {\r\n            diagnosis.push('✅ USER AUTHENTICATED: Session has user data');\r\n        }\r\n        \r\n        if (sessionCount[0].count === 0) {\r\n            diagnosis.push('❌ NO SESSIONS: No sessions in database');\r\n        } else if (sessionCount[0].count > 10) {\r\n            diagnosis.push('⚠️  MANY SESSIONS: Too many sessions in database');\r\n        } else {\r\n            diagnosis.push(`✅ SESSIONS: ${sessionCount[0].count} sessions in database`);\r\n        }\r\n        \r\n        sessionInfo.diagnosis = diagnosis;\r\n        \r\n        console.log('🔍 Session Debug Results:');\r\n        console.log(`   Session ID: ${sessionInfo.sessionID}`);\r\n        console.log(`   Has User: ${sessionInfo.hasUser}`);\r\n        console.log(`   User Email: ${sessionInfo.userEmail}`);\r\n        console.log(`   Cookies Received: ${sessionInfo.cookiesReceived.length}`);\r\n        console.log(`   Session Cookie Present: ${sessionInfo.cookiesReceived.find(c => c.isSessionCookie) ? 'YES' : 'NO'}`);\r\n        \r\n        res.json({\r\n            success: true,\r\n            message: 'Session debug information',\r\n            data: sessionInfo\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Session debug error:', error);\r\n        res.status(500).json({\r\n            success: false,\r\n            error: 'Session debug failed',\r\n            message: error.message\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 334,
      "codeLines": 274,
      "commentLines": 22,
      "commentRatio": 0.07432432432432433,
      "averageLineLength": 40.21283783783784
    },
    "lastAnalyzed": "2025-07-28T07:20:00.468Z"
  },
  "contentHash": "02cdbf94e05d6ab3e5334e862edb5ade43c47fcf693b3e4efbfb143b949f8a8c",
  "discoveredAt": "2025-07-28T07:20:00.468Z"
}