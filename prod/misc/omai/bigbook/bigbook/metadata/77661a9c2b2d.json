{
  "id": "77661a9c2b2d",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/temp/church-provisioner.js",
  "relativePath": "server/temp/church-provisioner.js",
  "name": "church-provisioner.js",
  "extension": ".js",
  "size": 8182,
  "modified": "2025-07-21T18:32:00.577Z",
  "created": "2025-07-13T23:16:27.427Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 249,
      "characters": 8154,
      "words": 753
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 216,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// Church Provisioning System\r\n// Creates new church databases with complete schema from template\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst bcrypt = require('bcrypt');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nclass ChurchProvisioner {\r\n  constructor() {\r\n    this.systemDbConfig = {\r\n      host: process.env.[REDACTED] || 'localhost',\r\n      user: process.env.[REDACTED] || 'root',\r\n      password: process.env.[REDACTED] || '',\r\n      multipleStatements: true\r\n    };\r\n  }\r\n\r\n  // Generate church database name from church info\r\n  generateDbName(churchName) {\r\n    return churchName\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\r\n      .replace(/\\s+/g, '_') // Replace spaces with underscores\r\n      .replace(/_+/g, '_') // Remove duplicate underscores\r\n      .replace(/^_|_$/g, '') // Remove leading/trailing underscores\r\n      .substring(0, 50) + '_db'; // Limit length and add suffix\r\n  }\r\n\r\n  // Create new church database and schema\r\n  async createChurchDatabase(churchData) {\r\n    const connection = await mysql.createConnection(this.systemDbConfig);\r\n    \r\n    try {\r\n      console.log('🏛️ Starting church provisioning process...');\r\n      \r\n      // 1. Generate database name\r\n      const dbName = this.generateDbName(churchData.name);\r\n      console.log(`📋 Generated database name: ${dbName}`);\r\n      \r\n      // 2. Create database\r\n      await connection.execute(`CREATE DATABASE IF NOT EXISTS \\`${dbName}\\``);\r\n      console.log(`✅ Database \"${dbName}\" created successfully`);\r\n      \r\n      // 3. Switch to new database\r\n      await connection.execute(`USE \\`${dbName}\\``);\r\n      \r\n      // 4. Load and execute database template\r\n      const templatePath = path.join(__dirname, 'templates', 'church-database-template.sql');\r\n      const templateSql = await fs.readFile(templatePath, 'utf8');\r\n      \r\n      console.log('📊 Executing database template...');\r\n      await connection.execute(templateSql);\r\n      console.log('✅ Database schema created from template');\r\n      \r\n      // 5. Update church_info with actual data\r\n      const churchId = this.generateChurchId(churchData.name);\r\n      const hashedPassword = await bcrypt.hash(churchData.adminPassword || 'DefaultPassword123!', 10);\r\n      \r\n      await connection.execute(`\r\n        UPDATE church_info SET \r\n          church_id = ?,\r\n          name = ?,\r\n          email = ?,\r\n          phone = ?,\r\n          website = ?,\r\n          address = ?,\r\n          city = ?,\r\n          state_province = ?,\r\n          postal_code = ?,\r\n          country = ?,\r\n          description = ?,\r\n          founded_year = ?,\r\n          language_preference = ?,\r\n          timezone = ?,\r\n          currency = ?\r\n        WHERE id = 1\r\n      `, [\r\n        churchId,\r\n        churchData.name,\r\n        churchData.email,\r\n        churchData.phone || null,\r\n        churchData.website || null,\r\n        churchData.address || null,\r\n        churchData.city || null,\r\n        churchData.state_province || null,\r\n        churchData.postal_code || null,\r\n        churchData.country || 'United States',\r\n        churchData.description || null,\r\n        churchData.founded_year || null,\r\n        churchData.language_preference || 'en',\r\n        churchData.timezone || 'UTC',\r\n        churchData.currency || 'USD'\r\n      ]);\r\n      \r\n      // 6. Update admin user\r\n      await connection.execute(`\r\n        UPDATE users SET \r\n          name = ?,\r\n          email = ?,\r\n          password = ?\r\n        WHERE id = 1\r\n      `, [\r\n        churchData.adminName || 'Church Administrator',\r\n        churchData.email,\r\n        hashedPassword\r\n      ]);\r\n      \r\n      console.log('✅ Church data updated successfully');\r\n      \r\n      // 7. Add to global church registry\r\n      await this.addToGlobalRegistry({\r\n        ...churchData,\r\n        church_id: churchId,\r\n        database_name: dbName\r\n      });\r\n      \r\n      console.log('🎉 Church provisioning completed successfully!');\r\n      \r\n      return {\r\n        success: true,\r\n        churchId: churchId,\r\n        databaseName: dbName,\r\n        adminEmail: churchData.email,\r\n        message: 'Church database created and configured successfully'\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Church provisioning failed:', error);\r\n      \r\n      // Cleanup: attempt to drop database if created\r\n      try {\r\n        await connection.execute(`DROP DATABASE IF EXISTS \\`${dbName}\\``);\r\n        console.log('🧹 Cleanup: Database removed due to error');\r\n      } catch (cleanupError) {\r\n        console.error('❌ Cleanup failed:', cleanupError);\r\n      }\r\n      \r\n      throw error;\r\n    } finally {\r\n      await connection.end();\r\n    }\r\n  }\r\n\r\n  // Generate unique church ID\r\n  generateChurchId(churchName) {\r\n    const prefix = churchName\r\n      .split(' ')\r\n      .map(word => word.charAt(0).toUpperCase())\r\n      .join('')\r\n      .substring(0, 6);\r\n    \r\n    const timestamp = Date.now().toString().slice(-6);\r\n    return `${prefix}_${timestamp}`;\r\n  }\r\n\r\n  // Add church to global registry (main database)\r\n  async addToGlobalRegistry(churchData) {\r\n    const mainConnection = await mysql.createConnection({\r\n      ...this.systemDbConfig,\r\n      database: 'orthodoxmetrics_db' // Use the correct main system database\r\n    });\r\n    \r\n    try {\r\n      // Create churches table if it doesn't exist (schema should match your main system)\r\n      await mainConnection.execute(`\r\n        CREATE TABLE IF NOT EXISTS churches (\r\n          id INT AUTO_INCREMENT PRIMARY KEY,\r\n          church_id VARCHAR(50) UNIQUE,\r\n          name VARCHAR(255) NOT NULL,\r\n          email VARCHAR(255) NOT NULL,\r\n          database_name VARCHAR(100) NOT NULL,\r\n          is_active BOOLEAN DEFAULT TRUE,\r\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n        )\r\n      `);\r\n      // Insert church record\r\n      const insertQuery = `\r\n        INSERT INTO churches (church_id, name, email, database_name, is_active)\r\n        VALUES (?, ?, ?, ?, TRUE)\r\n      `;\r\n      const values = [\r\n        churchData.church_id,\r\n        churchData.name,\r\n        churchData.email,\r\n        churchData.database_name\r\n      ];\r\n      console.log('Inserting into orthodoxmetrics_db.churches:', insertQuery, values);\r\n      const [result] = await mainConnection.execute(insertQuery, values);\r\n      console.log('Insert result:', result);\r\n      console.log('✅ Church added to global registry (orthodoxmetrics_db)');\r\n    } finally {\r\n      await mainConnection.end();\r\n    }\r\n  }\r\n\r\n  // Test the provisioning system\r\n  async testProvisioning() {\r\n    const testChurch = {\r\n      name: 'Holy Trinity Orthodox Church',\r\n      email: 'admin@holytrinityorthodox.org',\r\n      phone: '(555) 987-6543',\r\n      website: 'https://holytrinityorthodox.org',\r\n      address: '456 Orthodox Avenue',\r\n      city: 'Springfield',\r\n      state_province: 'Illinois',\r\n      postal_code: '62702',\r\n      country: 'United States',\r\n      description: 'A vibrant Orthodox community serving Springfield since 1965.',\r\n      founded_year: 1965,\r\n      language_preference: 'en',\r\n      timezone: 'America/Chicago',\r\n      currency: 'USD',\r\n      adminName: 'Father Michael Stavros',\r\n      adminPassword: '[REDACTED]'\r\n    };\r\n    \r\n    try {\r\n      const result = await this.createChurchDatabase(testChurch);\r\n      console.log('🧪 Test Result:', result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error('🧪 Test Failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export for use in other modules\r\nmodule.exports = ChurchProvisioner;\r\n\r\n// CLI usage\r\nif (require.main === module) {\r\n  const provisioner = new ChurchProvisioner();\r\n  \r\n  const command = process.argv[2];\r\n  \r\n  if (command === 'test') {\r\n    provisioner.testProvisioning()\r\n      .then(() => process.exit(0))\r\n      .catch(() => process.exit(1));\r\n  } else {\r\n    console.log('Church Provisioning System');\r\n    console.log('Usage: node church-provisioner.js test');\r\n    console.log('       node church-provisioner.js create');\r\n  }\r\n}\r\n"
    },
    "complexity": {
      "totalLines": 249,
      "codeLines": 199,
      "commentLines": 19,
      "commentRatio": 0.0871559633027523,
      "averageLineLength": 35.62385321100918
    },
    "lastAnalyzed": "2025-07-28T07:20:01.149Z"
  },
  "contentHash": "cca0d100be0456f54f901d9a44e4f0435561d531f71745cd9216d0370920b86d",
  "discoveredAt": "2025-07-28T07:20:01.149Z"
}