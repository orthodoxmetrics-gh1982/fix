{
  "id": "598c0b0f3f15",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/admin/users.js",
  "relativePath": "server/routes/admin/users.js",
  "name": "users.js",
  "extension": ".js",
  "size": 20788,
  "modified": "2025-07-22T13:00:01.143Z",
  "created": "2025-07-20T19:03:51.966Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 664,
      "characters": 20732,
      "words": 2180
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 1
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 130
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 210
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 230,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "const express = require('express');\r\nconst router = express.Router();\r\nconst { requireRole } = require('../../middleware/auth');\r\nconst DatabaseService = require('../../services/databaseService');\r\n\r\n/**\r\n * User Management API Routes\r\n * Accessible only to super_admin and admin roles\r\n */\r\n\r\n// GET /api/admin/users - Get all users with optional filters\r\nrouter.get('/', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { search, status, limit = 100, offset = 0 } = req.query;\r\n    \r\n    // Build the query\r\n    let query = `\r\n      SELECT \r\n        u.id,\r\n        u.email,\r\n        u.first_name,\r\n        u.last_name,\r\n        u.role,\r\n        u.is_active,\r\n        u.is_locked,\r\n        u.locked_at,\r\n        u.locked_by,\r\n        u.created_at,\r\n        u.last_login,\r\n        c.name as church_name\r\n      FROM users u\r\n      LEFT JOIN churches c ON u.church_id = c.id\r\n      WHERE 1=1\r\n    `;\r\n    \r\n    const params = [];\r\n    \r\n    // Apply search filter\r\n    if (search) {\r\n      query += ` AND (u.email LIKE ? OR u.first_name LIKE ? OR u.last_name LIKE ?)`;\r\n      params.push(`%${search}%`, `%${search}%`, `%${search}%`);\r\n    }\r\n    \r\n    // Apply status filter\r\n    if (status === 'locked') {\r\n      query += ` AND u.is_locked = 1`;\r\n    } else if (status === 'active') {\r\n      query += ` AND (u.is_locked = 0 OR u.is_locked IS NULL)`;\r\n    }\r\n    \r\n    // Order by email\r\n    query += ` ORDER BY u.email`;\r\n    \r\n    // Add pagination\r\n    query += ` LIMIT ? OFFSET ?`;\r\n    params.push(parseInt(limit), parseInt(offset));\r\n    \r\n    console.log('üîç Executing users query:', query);\r\n    console.log('üîç Query params:', params);\r\n    const usersResult = await DatabaseService.queryPlatform(query, params);\r\n    const users = usersResult[0] || [];\r\n    console.log('üîç Raw users from DB:', users.slice(0, 2)); // Log first 2 users\r\n    \r\n    // Get total count for pagination\r\n    let countQuery = `\r\n      SELECT COUNT(*) as total\r\n      FROM users u\r\n      WHERE 1=1\r\n    `;\r\n    \r\n    const countParams = [];\r\n    \r\n    if (search) {\r\n      countQuery += ` AND (u.email LIKE ? OR u.first_name LIKE ? OR u.last_name LIKE ?)`;\r\n      countParams.push(`%${search}%`, `%${search}%`, `%${search}%`);\r\n    }\r\n    \r\n    if (status === 'locked') {\r\n      countQuery += ` AND u.is_locked = 1`;\r\n    } else if (status === 'active') {\r\n      countQuery += ` AND (u.is_locked = 0 OR u.is_locked IS NULL)`;\r\n    }\r\n    \r\n    const countResult = await DatabaseService.queryPlatform(countQuery, countParams);\r\n    const countData = countResult[0] || [];\r\n    const total = countData[0]?.total || 0;\r\n    \r\n    res.json({ success: true, users: users || [], message: 'Users fetched successfully', pagination: { total, limit: parseInt(limit), offset: parseInt(offset), hasMore: (parseInt(offset) + parseInt(limit)) < total } });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error fetching users:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to fetch users',\r\n      message: error.message,\r\n      users: []\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/admin/users - Create a new user\r\nrouter.post('/', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { email, first_name, last_name, role, church_id, phone, preferred_language, send_welcome_email } = req.body;\r\n    \r\n    // Validate required fields\r\n    if (!email || !first_name || !last_name || !role) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Missing required fields',\r\n        message: 'Email, first name, last name, and role are required'\r\n      });\r\n    }\r\n    \r\n    // Check if user already exists\r\n    const existingUserQuery = `SELECT id FROM users WHERE email = ?`;\r\n    const existingUserResult = await DatabaseService.queryPlatform(existingUserQuery, [email]);\r\n    const existingUserData = existingUserResult[0] || [];\r\n    \r\n    if (existingUserData.length > 0) {\r\n      return res.status(409).json({\r\n        success: false,\r\n        error: 'User already exists',\r\n        message: `A user with email ${email} already exists`\r\n      });\r\n    }\r\n    \r\n    // Generate temporary password\r\n    const tempPassword = Math.random().toString(36).slice(-12);\r\n    const bcrypt = require('bcrypt');\r\n    const hashedPassword = await bcrypt.hash(tempPassword, 10);\r\n    \r\n    // Create user\r\n    const createUserQuery = `\r\n      INSERT INTO users (email, first_name, last_name, role, church_id, phone, preferred_language, password_hash, is_active, created_at)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, NOW())\r\n    `;\r\n    \r\n    const createResult = await DatabaseService.queryPlatform(createUserQuery, [\r\n      email,\r\n      first_name,\r\n      last_name,\r\n      role,\r\n      church_id || null,\r\n      phone || null,\r\n      preferred_language || 'en',\r\n      hashedPassword\r\n    ]);\r\n    \r\n    const userId = createResult[0].insertId;\r\n    \r\n    console.log(`‚úÖ User created: ${email} (ID: ${userId}) by ${req.user?.email}`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'User created successfully',\r\n      tempPassword: tempPassword,\r\n      user: {\r\n        id: userId,\r\n        email: email,\r\n        first_name: first_name,\r\n        last_name: last_name,\r\n        role: role,\r\n        church_id: church_id,\r\n        phone: phone,\r\n        preferred_language: preferred_language\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating user:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to create user',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// PATCH /api/admin/users/:userId/reset-password - Reset user password\r\nrouter.patch('/:userId/reset-password', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { userId } = req.params;\r\n    \r\n    if (!userId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Missing user ID',\r\n        message: 'User ID is required'\r\n      });\r\n    }\r\n    \r\n    // Check if user exists\r\n    const userQuery = `SELECT id, email FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [userId]);\r\n    const userData = userResult[0] || [];\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'User not found',\r\n        message: `No user found with ID: ${userId}`\r\n      });\r\n    }\r\n    \r\n    const user = userData[0];\r\n    \r\n    // Generate new password\r\n    const newPassword = Math.random().toString(36).slice(-12);\r\n    const bcrypt = require('bcrypt');\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n    \r\n    // Update password\r\n    const updateQuery = `UPDATE users SET password_hash = ?, updated_at = NOW() WHERE id = ?`;\r\n    await DatabaseService.queryPlatform(updateQuery, [hashedPassword, userId]);\r\n    \r\n    console.log(`üîë Password reset for user: ${user.email} by ${req.user?.email}`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Password reset successfully',\r\n      newPassword: newPassword,\r\n      user: {\r\n        id: userId,\r\n        email: user.email\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error resetting password:'[REDACTED]'Failed to reset password',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// DELETE /api/admin/users/:id - Delete a user\r\nrouter.delete('/:id', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    // Validate user ID\r\n    if (!id || isNaN(parseInt(id))) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Invalid user ID',\r\n        message: 'User ID must be a valid number'\r\n      });\r\n    }\r\n    \r\n    // Check if user exists\r\n    const userQuery = `SELECT id, email, role FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [id]);\r\n    const userData = userResult[0] || [];\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'User not found',\r\n        message: `No user found with ID: ${id}`\r\n      });\r\n    }\r\n    \r\n    const user = userData[0];\r\n    \r\n    // Prevent deleting super_admin users (safety check)\r\n    if (user.role === 'super_admin') {\r\n      return res.status(403).json({\r\n        success: false,\r\n        error: 'Cannot delete super admin',\r\n        message: 'Super admin users cannot be deleted'\r\n      });\r\n    }\r\n    \r\n    // Delete user\r\n    const deleteQuery = `DELETE FROM users WHERE id = ?`;\r\n    const deleteResult = await DatabaseService.queryPlatform(deleteQuery, [id]);\r\n    \r\n    if (deleteResult[0].affectedRows === 0) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Delete failed',\r\n        message: 'User not found or already deleted'\r\n      });\r\n    }\r\n    \r\n    console.log(`üóëÔ∏è User deleted: ${user.email} (ID: ${id}) by ${req.user?.email}`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'User deleted successfully',\r\n      deletedUser: {\r\n        id: parseInt(id),\r\n        email: user.email\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error deleting user:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to delete user',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/admin/users/:userId/lockout - Lockout a user account\r\nrouter.post('/:userId/lockout', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { userId } = req.params;\r\n    const lockoutReason = req.body.reason || 'Administrative action';\r\n    \r\n    // First check if user exists\r\n    const userQuery = `SELECT id, email, is_locked FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [userId]);\r\n    const userData = userResult[0] || [];\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n      success: false,\r\n      error: 'User not found',\r\n      message: `No user found with ID: ${userId}`\r\n    });\r\n    }\r\n    \r\n    const user = userData[0];\r\n    \r\n    if (user.is_locked) {\r\n      return res.status(400).json({\r\n        error: 'User already locked',\r\n        message: `User ${user.email} is already locked out`\r\n      });\r\n    }\r\n    \r\n    // Lockout the user\r\n    const lockoutQuery = `\r\n      UPDATE users \r\n      SET is_locked = 1, locked_at = NOW(), locked_by = ?, lockout_reason = ?\r\n      WHERE id = ?\r\n    `;\r\n    \r\n    await DatabaseService.queryPlatform(lockoutQuery, [\r\n      req.user?.email || 'System',\r\n      lockoutReason,\r\n      userId\r\n    ]);\r\n    \r\n    // Terminate all active sessions for this user\r\n    const terminateSessionsQuery = `\r\n      UPDATE sessions \r\n      SET expires = UNIX_TIMESTAMP() \r\n      WHERE JSON_EXTRACT(data, '$.user.id') = ?\r\n    `;\r\n    \r\n    const terminateResult = await DatabaseService.queryPlatform(terminateSessionsQuery, [userId]);\r\n    const terminatedSessions = terminateResult.affectedRows || 0;\r\n    \r\n    // Log the action\r\n    const logQuery = `\r\n      INSERT INTO activity_log (user_id, action, details, ip_address, user_agent, created_at)\r\n      VALUES (?, 'user_locked', ?, ?, ?, NOW())\r\n    `;\r\n    \r\n    await DatabaseService.queryPlatform(logQuery, [\r\n      userId,\r\n      JSON.stringify({\r\n        locked_by: req.user?.email || 'System',\r\n        reason: lockoutReason,\r\n        terminated_sessions: terminatedSessions\r\n      }),\r\n      req.ip || 'unknown',\r\n      req.get('User-Agent') || 'unknown'\r\n    ]);\r\n    \r\n    console.log(`üîí User locked out: ${req.user?.email || 'System'} locked out user ${user.email} (terminated ${terminatedSessions} sessions)`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: `User ${user.email} has been locked out and ${terminatedSessions} active sessions terminated`,\r\n      lockout_details: {\r\n        user_id: userId,\r\n        user_email: user.email,\r\n        locked_by: req.user?.email || 'System',\r\n        terminated_sessions: terminatedSessions,\r\n        locked_at: new Date().toISOString()\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error locking out user:', error);\r\n    res.status(500).json({\r\n      error: 'Failed to lockout user',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/admin/users/:userId/unlock - Unlock a user account\r\nrouter.post('/:userId/unlock', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { userId } = req.params;\r\n    \r\n    // First check if user exists and is locked\r\n    const userQuery = `SELECT id, email, is_locked FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [userId]);\r\n    const userData = userResult[0] || [];\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n      success: false,\r\n      error: 'User not found',\r\n      message: `No user found with ID: ${userId}`\r\n    });\r\n    }\r\n    \r\n    const user = userData[0];\r\n    \r\n    if (!user.is_locked) {\r\n      return res.status(400).json({\r\n        error: 'User not locked',\r\n        message: `User ${user.email} is not currently locked out`\r\n      });\r\n    }\r\n    \r\n    // Unlock the user\r\n    const unlockQuery = `\r\n      UPDATE users \r\n      SET is_locked = 0, locked_at = NULL, locked_by = NULL, lockout_reason = NULL\r\n      WHERE id = ?\r\n    `;\r\n    \r\n    await DatabaseService.queryPlatform(unlockQuery, [userId]);\r\n    \r\n    // Log the action\r\n    const logQuery = `\r\n      INSERT INTO activity_log (user_id, action, details, ip_address, user_agent, created_at)\r\n      VALUES (?, 'user_unlocked', ?, ?, ?, NOW())\r\n    `;\r\n    \r\n    await DatabaseService.queryPlatform(logQuery, [\r\n      userId,\r\n      JSON.stringify({\r\n        unlocked_by: req.user?.email || 'System'\r\n      }),\r\n      req.ip || 'unknown',\r\n      req.get('User-Agent') || 'unknown'\r\n    ]);\r\n    \r\n    console.log(`üîì User unlocked: ${req.user?.email || 'System'} unlocked user ${user.email}`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: `User ${user.email} has been unlocked and can now log in`,\r\n      unlock_details: {\r\n        user_id: userId,\r\n        user_email: user.email,\r\n        unlocked_by: req.user?.email || 'System',\r\n        unlocked_at: new Date().toISOString()\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error unlocking user:', error);\r\n    res.status(500).json({\r\n      error: 'Failed to unlock user',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// PUT /api/admin/users/:id/toggle-status - Toggle user active/inactive status\r\nrouter.put('/:id/toggle-status', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    console.log(`üîÑ Toggling user status for ID: ${id}`, 'by:', req.user?.email || req.session?.user?.email);\r\n    \r\n    // Validate user ID\r\n    if (!id || isNaN(parseInt(id))) {\r\n      console.log(`‚ùå Invalid user ID provided: ${id}`);\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Invalid user ID',\r\n        message: 'User ID must be a valid number'\r\n      });\r\n    }\r\n    \r\n    // Check if user exists and get current status\r\n    console.log(`üîç Looking up user with ID: ${id}`);\r\n    const userQuery = `SELECT id, email, is_active FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [id]);\r\n    const userData = userResult[0] || [];\r\n    console.log(`üìä User query result:`, userData.length, 'users found');\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'User not found',\r\n        message: `No user found with ID: ${id}`\r\n      });\r\n    }\r\n    \r\n    const user = userData[0];\r\n    console.log(`üë§ Found user: ${user.email}, current is_active: ${user.is_active} (type: ${typeof user.is_active})`);\r\n    \r\n    // Simple toggle: if is_active is 1 or true, set to 0; otherwise set to 1\r\n    const newStatus = user.is_active ? 0 : 1;\r\n    console.log(`üîÑ Toggling status: ${user.is_active} -> ${newStatus}`);\r\n    \r\n    // Update user status\r\n    const updateQuery = `UPDATE users SET is_active = ? WHERE id = ?`;\r\n    console.log(`üìù Executing update query with newStatus: ${newStatus}, id: ${id}`);\r\n    const updateResult = await DatabaseService.queryPlatform(updateQuery, [newStatus, id]);\r\n    console.log(`üìä Update result:`, updateResult[0]);\r\n    \r\n    if (updateResult[0].affectedRows === 0) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Update failed',\r\n        message: 'User not found or no changes made'\r\n      });\r\n    }\r\n    \r\n    const statusText = newStatus ? 'activated' : 'deactivated';\r\n    console.log(`‚úÖ User ${statusText}: ${user.email} (${user.is_active} -> ${newStatus})`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: `User ${statusText} successfully`,\r\n      user: {\r\n        id: parseInt(id),\r\n        email: user.email,\r\n        is_active: Boolean(newStatus)\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error toggling user status:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to toggle user status',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// PUT /api/admin/users/:id - Update user data\r\nrouter.put('/:id', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updateData = req.body;\r\n    \r\n    console.log(`üîß Updating user ID: ${id}`, 'by:', req.user?.email);\r\n    \r\n    // Validate user ID\r\n    if (!id || isNaN(parseInt(id))) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Invalid user ID',\r\n        message: 'User ID must be a valid number'\r\n      });\r\n    }\r\n    \r\n    // Check if user exists\r\n    const userQuery = `SELECT id, email, role FROM users WHERE id = ?`;\r\n    const userResult = await DatabaseService.queryPlatform(userQuery, [id]);\r\n    const userData = userResult[0] || [];\r\n    \r\n    if (!userData.length) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'User not found',\r\n        message: `No user found with ID: ${id}`\r\n      });\r\n    }\r\n    \r\n    const existingUser = userData[0];\r\n    \r\n    // Prepare update fields (only include provided fields)\r\n    const allowedFields = ['first_name', 'last_name', 'email', 'role', 'church_id'];\r\n    const updateFields = {};\r\n    \r\n    allowedFields.forEach(field => {\r\n      if (updateData[field] !== undefined && updateData[field] !== '') {\r\n        updateFields[field] = updateData[field];\r\n      }\r\n    });\r\n    \r\n    // If no valid fields to update\r\n    if (Object.keys(updateFields).length === 0) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'No valid fields to update',\r\n        message: 'Please provide at least one field to update'\r\n      });\r\n    }\r\n    \r\n    // Build dynamic UPDATE query\r\n    const fieldNames = Object.keys(updateFields);\r\n    const setClause = fieldNames.map(field => `${field} = ?`).join(', ');\r\n    const values = fieldNames.map(field => updateFields[field]);\r\n    values.push(id);\r\n    \r\n    const updateQuery = `\r\n      UPDATE users \r\n      SET ${setClause}, updated_at = NOW()\r\n      WHERE id = ?\r\n    `;\r\n    \r\n    const updateResult = await DatabaseService.queryPlatform(updateQuery, values);\r\n    \r\n    if (updateResult[0].affectedRows === 0) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Update failed',\r\n        message: 'User not found or no changes made'\r\n      });\r\n    }\r\n    \r\n    // Fetch updated user data\r\n    const updatedUserQuery = `\r\n      SELECT \r\n        u.id,\r\n        u.email,\r\n        u.first_name,\r\n        u.last_name,\r\n        u.role,\r\n        u.is_locked,\r\n        u.church_id,\r\n        u.created_at,\r\n        u.updated_at,\r\n        c.name as church_name\r\n      FROM users u\r\n      LEFT JOIN churches c ON u.church_id = c.id\r\n      WHERE u.id = ?\r\n    `;\r\n    \r\n    const updatedUserResult = await DatabaseService.queryPlatform(updatedUserQuery, [id]);\r\n    const updatedUser = updatedUserResult[0][0];\r\n    \r\n    console.log(`‚úÖ User updated successfully: ${existingUser.email}`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'User updated successfully',\r\n      user: updatedUser,\r\n      changes: updateFields\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error updating user:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to update user',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 664,
      "codeLines": 512,
      "commentLines": 46,
      "commentRatio": 0.08243727598566308,
      "averageLineLength": 35.096774193548384
    },
    "lastAnalyzed": "2025-07-28T07:20:00.377Z"
  },
  "contentHash": "65fc4a5016b676b8af1ae41bb83db6c1afd57b9d62be3cfc37e49f85c33f5154",
  "discoveredAt": "2025-07-28T07:20:00.377Z"
}