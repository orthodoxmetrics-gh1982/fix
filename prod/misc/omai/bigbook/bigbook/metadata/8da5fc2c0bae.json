{
  "id": "8da5fc2c0bae",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/services/om-ai/fallbackResponder.js",
  "relativePath": "services/om-ai/fallbackResponder.js",
  "name": "fallbackResponder.js",
  "extension": ".js",
  "size": 12518,
  "modified": "2025-07-27T03:54:50.885Z",
  "created": "2025-07-27T03:54:47.824Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 1
  },
  "metadata": {
    "fileStats": {
      "lines": 322,
      "characters": 12404,
      "words": 1420
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 1
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 291,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * OMAI Fallback Responder - Intelligent Context-Aware Responses\r\n * Provides smart fallback responses when specific handlers don't match\r\n * Created: 2025-07-27\r\n */\r\n\r\n/**\r\n * Context-aware fallback response generator\r\n */\r\nclass FallbackResponder {\r\n  constructor(memoryCore = null) {\r\n    this.memoryCore = memoryCore;\r\n    this.responsePatterns = this.initializeResponsePatterns();\r\n    this.conversationalTone = true;\r\n  }\r\n\r\n  /**\r\n   * Initialize response patterns for different scenarios\r\n   */\r\n  initializeResponsePatterns() {\r\n    return {\r\n      // Weather requests\r\n      weather: {\r\n        patterns: [/weather|temperature|rain|snow|sunny|cloudy|forecast/i],\r\n        responses: [\r\n          \"🌤️ I don't currently have weather API access, but I can help you debug sunny SQL queries and cloudy code issues!\",\r\n          \"☀️ No weather data here, but I can definitely help brighten your day by fixing those pesky frontend bugs!\",\r\n          \"🌧️ Can't predict rain, but I can predict your database needs optimization. Want me to take a look?\"\r\n        ]\r\n      },\r\n      \r\n      // Humor/jokes\r\n      humor: {\r\n        patterns: [/joke|funny|humor|laugh|haha|lol/i],\r\n        responses: [\r\n          \"😂 OrthodoxMetrics isn't funny... but I can debug your database with a smile! 🐛→✨\",\r\n          \"🤖 Why did the developer pray? Because their code had too many bugs and not enough features! Now, how can I help you?\",\r\n          \"😄 I'm funnier when I'm fixing your code than when I'm telling jokes. Got any broken components for me?\"\r\n        ]\r\n      },\r\n      \r\n      // Emotional/personal\r\n      emotional: {\r\n        patterns: [/love|like|hate|feel|emotion|sad|happy|angry/i],\r\n        responses: [\r\n          \"💙 I feel most alive when optimizing your SQL queries and fixing frontend bugs! How can I help?\",\r\n          \"❤️ I love a good debugging session! What's not working the way you'd like it to?\",\r\n          \"🤗 I care deeply about your code quality. Show me something that needs improvement!\"\r\n        ]\r\n      },\r\n      \r\n      // Food/drinks\r\n      food: {\r\n        patterns: [/food|eat|drink|coffee|tea|hungry|thirsty/i],\r\n        responses: [\r\n          \"☕ I don't drink coffee, but I do consume error logs! Got any for me to analyze?\",\r\n          \"🍕 I feed on well-structured JSON and perfectly formatted code. Want to show me yours?\",\r\n          \"🥤 The only thing I'm thirsty for is optimizing your database queries!\"\r\n        ]\r\n      },\r\n      \r\n      // Time/scheduling\r\n      time: {\r\n        patterns: [/schedule|meeting|appointment|calendar|busy/i],\r\n        responses: [\r\n          \"📅 My calendar is always open for debugging sessions! What needs fixing?\",\r\n          \"⏰ I'm available 24/7 for code reviews and system optimization. What's on your mind?\",\r\n          \"🗓️ No meetings in my schedule, just continuous integration and deployment help!\"\r\n        ]\r\n      },\r\n      \r\n      // Nonsense/gibberish\r\n      nonsense: {\r\n        patterns: [/^[^a-zA-Z]*$/, /^(z+|x+|a+|q+|zzz|xxx|aaa|qqq)$/i, /^[!@#$%^&*()_+=-]+$/],\r\n        responses: [\r\n          \"🤔 That doesn't look like any programming language I know! Try asking me about your code instead.\",\r\n          \"🧩 Interesting pattern, but I speak JavaScript, SQL, and React better than... whatever that was! 😅\",\r\n          \"🔤 I need actual words to help you effectively. What's the real question you'd like to ask?\"\r\n        ]\r\n      },\r\n      \r\n      // Greetings\r\n      greetings: {\r\n        patterns: [/^(hi|hello|hey|greetings|good\\s+(morning|afternoon|evening))/i],\r\n        responses: [\r\n          \"👋 Hello! I'm OMAI, ready to help optimize your OrthodoxMetrics system. What can I improve for you today?\",\r\n          \"🤖 Greetings! I'm here to debug, optimize, and enhance your code. What's on your troubleshooting list?\",\r\n          \"✨ Hi there! Let's make your code run smoother than a Sunday service. What needs attention?\"\r\n        ]\r\n      },\r\n      \r\n      // Compliments\r\n      compliments: {\r\n        patterns: [/good\\s+job|great|awesome|amazing|excellent|perfect|wonderful/i],\r\n        responses: [\r\n          \"🙏 Thank you! I do my best work when helping optimize your OrthodoxMetrics platform. What's next?\",\r\n          \"😊 Glad I could help! I'm always here when you need debugging assistance or code improvements.\",\r\n          \"✨ Appreciate it! Ready for the next challenge - got any tricky bugs that need squashing?\"\r\n        ]\r\n      },\r\n      \r\n      // Technical but unclear\r\n      technical_unclear: {\r\n        patterns: [/code|program|debug|fix|error|bug|optimize|improve/i],\r\n        responses: [\r\n          \"🔧 I'm great with technical problems! Could you be more specific about what code or system needs attention?\",\r\n          \"💻 I love debugging! What specific component, file, or error message are you working with?\",\r\n          \"🐛 Technical issues are my specialty! Share some details about what's not working as expected.\"\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate intelligent fallback response\r\n   * @param {string} prompt - User's input\r\n   * @param {Object} context - Additional context (user, system state, etc.)\r\n   * @returns {string} Contextual response\r\n   */\r\n  generateFallback(prompt, context = {}) {\r\n    if (!prompt || typeof prompt !== 'string') {\r\n      return this.getDefaultResponse();\r\n    }\r\n\r\n    const cleanPrompt = prompt.trim();\r\n    \r\n    // Try memory-based contextual response first\r\n    if (this.memoryCore) {\r\n      try {\r\n        const memoryResponse = this.memoryCore.getContextualFallback(cleanPrompt);\r\n        if (memoryResponse && !memoryResponse.includes('not sure how to answer')) {\r\n          return memoryResponse;\r\n        }\r\n      } catch (error) {\r\n        console.warn('[OMAI Fallback] Memory core error:', error.message);\r\n      }\r\n    }\r\n\r\n    // Check for pattern matches\r\n    for (const [category, config] of Object.entries(this.responsePatterns)) {\r\n      for (const pattern of config.patterns) {\r\n        if (pattern.test(cleanPrompt)) {\r\n          return this.selectResponse(config.responses, context);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle code-related but unclear requests\r\n    if (this.isCodeRelated(cleanPrompt)) {\r\n      return this.getCodeRelatedResponse(cleanPrompt, context);\r\n    }\r\n\r\n    // Handle questions\r\n    if (this.isQuestion(cleanPrompt)) {\r\n      return this.getQuestionResponse(cleanPrompt, context);\r\n    }\r\n\r\n    // Handle commands that don't match patterns\r\n    if (this.isCommand(cleanPrompt)) {\r\n      return this.getCommandResponse(cleanPrompt, context);\r\n    }\r\n\r\n    // Final fallback\r\n    return this.getIntelligentDefaultResponse(cleanPrompt, context);\r\n  }\r\n\r\n  /**\r\n   * Select a response from available options\r\n   */\r\n  selectResponse(responses, context = {}) {\r\n    if (!Array.isArray(responses) || responses.length === 0) {\r\n      return this.getDefaultResponse();\r\n    }\r\n\r\n    // For now, select randomly. Could be enhanced with context-aware selection\r\n    const index = Math.floor(Math.random() * responses.length);\r\n    return responses[index];\r\n  }\r\n\r\n  /**\r\n   * Check if prompt is code-related\r\n   */\r\n  isCodeRelated(prompt) {\r\n    const codeKeywords = [\r\n      'function', 'component', 'class', 'variable', 'api', 'database',\r\n      'frontend', 'backend', 'react', 'typescript', 'javascript', 'sql',\r\n      'json', 'html', 'css', 'npm', 'node', 'server', 'client'\r\n    ];\r\n    \r\n    const lowerPrompt = prompt.toLowerCase();\r\n    return codeKeywords.some(keyword => lowerPrompt.includes(keyword));\r\n  }\r\n\r\n  /**\r\n   * Check if prompt is a question\r\n   */\r\n  isQuestion(prompt) {\r\n    return /^(what|how|why|when|where|who|can|could|would|should|is|are|do|does|will)\\b/i.test(prompt) ||\r\n           prompt.includes('?');\r\n  }\r\n\r\n  /**\r\n   * Check if prompt is a command\r\n   */\r\n  isCommand(prompt) {\r\n    return /^(run|execute|start|stop|create|delete|update|show|list|get|set)\\b/i.test(prompt);\r\n  }\r\n\r\n  /**\r\n   * Generate code-related response\r\n   */\r\n  getCodeRelatedResponse(prompt, context) {\r\n    const suggestions = [\r\n      \"💻 I can help with that! Could you share the specific file, component, or error message you're working with?\",\r\n      \"🔧 That sounds like something I can assist with! What specific part of your code needs attention?\",\r\n      \"🐛 I'm ready to dive into the technical details! Can you provide more context about the issue?\",\r\n      \"⚡ I love solving coding problems! What's the exact error or behavior you're experiencing?\"\r\n    ];\r\n\r\n    const suggestion = suggestions[Math.floor(Math.random() * suggestions.length)];\r\n    \r\n    if (context.user?.role === 'super_admin') {\r\n      return `${suggestion}\\n\\n🔐 As a super admin, you also have access to the mobile OMAI interface at \\`/admin/omai/mobile\\` for quick diagnostics!`;\r\n    }\r\n    \r\n    return suggestion;\r\n  }\r\n\r\n  /**\r\n   * Generate question response\r\n   */\r\n  getQuestionResponse(prompt, context) {\r\n    const responses = [\r\n      \"🤔 That's an interesting question! Could you provide more context so I can give you a specific answer?\",\r\n      \"💭 I'd love to help answer that! Can you share more details about what you're trying to accomplish?\",\r\n      \"🎯 Good question! The answer depends on your specific situation. What's the context?\",\r\n      \"📝 I can help with that! Could you be more specific about what aspect you're most curious about?\"\r\n    ];\r\n\r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  }\r\n\r\n  /**\r\n   * Generate command response\r\n   */\r\n  getCommandResponse(prompt, context) {\r\n    return `🎮 I recognize that as a command! For the best results, try using specific OMAI commands like:\r\n\r\n🔧 \\`status\\` - Check system health\r\n📚 \\`learning refresh\\` - Update knowledge base  \r\n🤖 \\`autofix\\` - Run automatic fixes\r\n🔍 \\`agents\\` - View available agents\r\n\r\nOr ask me about specific files, components, or issues you'd like help with!`;\r\n  }\r\n\r\n  /**\r\n   * Generate intelligent default response\r\n   */\r\n  getIntelligentDefaultResponse(prompt, context) {\r\n    const defaultResponses = [\r\n      \"🤔 I'm not sure how to handle that specific request yet. Could you rephrase it or ask about something more specific?\",\r\n      \"💡 I didn't quite catch that. Try asking me about code debugging, system optimization, or check my Operators Manual for guidance!\",\r\n      \"🔍 I'm still learning! Could you be more specific about what you need help with? I'm great with technical problems!\",\r\n      \"📚 That's outside my current knowledge base. Ask me about OrthodoxMetrics components, debugging, or system administration instead!\"\r\n    ];\r\n\r\n    const baseResponse = defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n    \r\n    // Add contextual hints based on user role\r\n    if (context.user?.role === 'super_admin') {\r\n      return `${baseResponse}\\n\\n💡 **Super Admin Tip**: Check the OMAI Operators Manual or use the mobile interface for advanced features!`;\r\n    } else if (context.user?.role === 'admin') {\r\n      return `${baseResponse}\\n\\n💡 **Admin Tip**: Try asking about system status, learning refresh, or component debugging!`;\r\n    }\r\n    \r\n    return baseResponse;\r\n  }\r\n\r\n  /**\r\n   * Basic default response\r\n   */\r\n  getDefaultResponse() {\r\n    return \"🤖 I'm OMAI, your OrthodoxMetrics AI assistant! I'm here to help with code debugging, system optimization, and platform maintenance. What can I help you with?\";\r\n  }\r\n\r\n  /**\r\n   * Log unhandled prompts for training improvements\r\n   */\r\n  logUnhandledPrompt(prompt, context = {}) {\r\n    if (process.env.[REDACTED] === 'true') {\r\n      console.log('[OMAI Unhandled]', {\r\n        prompt: prompt.substring(0, 100),\r\n        timestamp: new Date().toISOString(),\r\n        userRole: context.user?.role || 'unknown',\r\n        length: prompt.length\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update response patterns dynamically\r\n   */\r\n  updatePatterns(newPatterns) {\r\n    this.responsePatterns = { ...this.responsePatterns, ...newPatterns };\r\n  }\r\n\r\n  /**\r\n   * Get statistics about fallback usage\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalPatterns: Object.keys(this.responsePatterns).length,\r\n      totalResponses: Object.values(this.responsePatterns).reduce(\r\n        (sum, config) => sum + config.responses.length, 0\r\n      ),\r\n      memoryEnabled: !!this.memoryCore\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = { FallbackResponder }; "
    },
    "complexity": {
      "totalLines": 322,
      "codeLines": 210,
      "commentLines": 70,
      "commentRatio": 0.25,
      "averageLineLength": 42.746428571428574
    },
    "lastAnalyzed": "2025-07-28T07:20:01.454Z"
  },
  "contentHash": "706b03fabe0b37ce63d9ac37869a70aeff43a69c2b69c21b62f667367f603887",
  "discoveredAt": "2025-07-28T07:20:01.454Z"
}