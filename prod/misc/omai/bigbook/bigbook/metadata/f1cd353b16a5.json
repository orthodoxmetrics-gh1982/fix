{
  "id": "f1cd353b16a5",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/52b77c5c49e9.json",
  "relativePath": "bigbook/metadata/52b77c5c49e9.json",
  "name": "52b77c5c49e9.json",
  "extension": ".json",
  "size": 4312,
  "modified": "2025-07-26T04:17:11.246Z",
  "created": "2025-07-26T04:17:11.246Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 4282,
      "words": 324
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"52b77c5c49e9\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scrapers/test-working-scrapers.js\",\n  \"relativePath\": \"server/scrapers/test-working-scrapers.js\",\n  \"name\": \"test-working-scrapers.js\",\n  \"extension\": \".js\",\n  \"size\": 2771,\n  \"modified\": \"2025-07-24T14:51:40.412Z\",\n  \"created\": \"2025-07-24T14:51:40.412Z\",\n  \"classification\": {\n    \"type\": \"Testing Scripts\",\n    \"category\": \"DevOps > Test\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 76,\n      \"characters\": 2741,\n      \"words\": 220\n    },\n    \"classification\": {\n      \"type\": \"Testing Scripts\",\n      \"category\": \"DevOps > Test\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"path\",\n        \"line\": 3\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 18,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// Quick test with working URLs only\\nconst ChurchDirectoryBuilder = require('./index');\\nconst path = require('path');\\n\\nasync function testWorkingScrapers() {\\n    console.log('üß™ Testing Scrapers with Conservative Settings...\\\\n');\\n    \\n    const options = {\\n        outputDir: path.join(__dirname, '../data/test-working-churches'),\\n        logLevel: 'info',\\n        maxConcurrentScrapers: 1, // Very conservative\\n        validateUrls: false,\\n        enableDuplicateDetection: false,\\n        saveToDatabase: true,\\n        databaseConfig: {\\n            host: 'localhost',\\n            user: 'orthodoxapps',\\n            password: '[REDACTED]',\\n            database: 'orthodoxmetrics'\\n        }\\n    };\\n    \\n    try {\\n        console.log('üöÄ Testing with conservative settings...');\\n        console.log('- Concurrent scrapers: 1');\\n        console.log('- URL validation: disabled');\\n        console.log('- Duplicate detection: disabled');\\n        console.log('- Database save: enabled');\\n        console.log('');\\n        \\n        const builder = new ChurchDirectoryBuilder(options);\\n        const results = await builder.runAutonomousScraping();\\n        \\n        console.log('\\\\n‚úÖ Test Results:');\\n        console.log(`üìä Total Churches Found: ${results.statistics.totalChurches}`);\\n        console.log(`‚ö†Ô∏è  Total Errors: ${results.errors.length}`);\\n        \\n        if (results.statistics.totalChurches > 0) {\\n            console.log('\\\\nüéâ SUCCESS: Found some church data!');\\n            console.log('\\\\nüìà By Jurisdiction:');\\n            for (const [jurisdiction, count] of Object.entries(results.statistics.jurisdictionCounts)) {\\n                if (count > 0) {\\n                    console.log(`   ‚úÖ ${jurisdiction}: ${count} churches`);\\n                } else {\\n                    console.log(`   ‚ùå ${jurisdiction}: ${count} churches`);\\n                }\\n            }\\n        } else {\\n            console.log('\\\\n‚ö†Ô∏è  No churches found - all scrapers failed');\\n        }\\n        \\n        if (results.errors.length > 0) {\\n            console.log('\\\\n‚ùå Errors encountered:');\\n            results.errors.slice(0, 5).forEach((error, i) => {\\n                console.log(`   ${i + 1}. ${error.jurisdiction}: ${error.error}`);\\n            });\\n            if (results.errors.length > 5) {\\n                console.log(`   ... and ${results.errors.length - 5} more errors`);\\n            }\\n        }\\n        \\n        console.log(`\\\\nüìÅ Results saved to: ${options.outputDir}`);\\n        return results;\\n        \\n    } catch (error) {\\n        console.error('‚ùå Test failed completely:', error.message);\\n        process.exit(1);\\n    }\\n}\\n\\nif (require.main === module) {\\n    testWorkingScrapers().catch(console.error);\\n}\\n\\nmodule.exports = testWorkingScrapers;\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 76,\n      \"codeLines\": 63,\n      \"commentLines\": 1,\n      \"commentRatio\": 0.015625,\n      \"averageLineLength\": 40.78125\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.247Z\"\n  },\n  \"contentHash\": \"0dd3d573b8cedb84de1b330ce66b9f14a162c00765fc98516dd005222caf633c\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.247Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 75.48214285714286
    },
    "lastAnalyzed": "2025-07-28T07:19:56.953Z"
  },
  "contentHash": "d92167e49497d160faf2ab88023f17e149f20a1424d84a8b226390a183becca9",
  "discoveredAt": "2025-07-28T07:19:56.953Z"
}