{
  "id": "7ca0529695cd",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/debug-church-records-api.js",
  "relativePath": "server/debug/debug-church-records-api.js",
  "name": "debug-church-records-api.js",
  "extension": ".js",
  "size": 5283,
  "modified": "2025-07-22T22:28:03.563Z",
  "created": "2025-07-22T22:28:01.683Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 144,
      "characters": 5263,
      "words": 486
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 1
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 5,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 6,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 7,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "const mysql = require('mysql2/promise');\r\n\r\n// Database configuration\r\nconst dbConfig = {\r\n  host: process.env.[REDACTED] || 'localhost',\r\n  user: process.env.[REDACTED] || 'root',\r\n  password: process.env.[REDACTED] || '',\r\n  multipleStatements: true\r\n};\r\n\r\nasync function debugChurchRecordsIssue() {\r\n  console.log('üîç Debugging Church Records Issue...\\n');\r\n  \r\n  try {\r\n    // Connect to MySQL\r\n    const connection = await mysql.createConnection(dbConfig);\r\n    console.log('‚úÖ Connected to MySQL\\n');\r\n\r\n    // Step 1: Check church database linkage\r\n    console.log('=== STEP 1: Church Database Linkage ===');\r\n    const [churches] = await connection.execute(`\r\n      SELECT id, name, database_name \r\n      FROM orthodoxmetrics_db.churches \r\n      WHERE name LIKE '%Saints Peter%' OR name LIKE '%SSPPOC%'\r\n    `);\r\n    \r\n    console.log('Churches found:', churches);\r\n    \r\n    if (churches.length === 0) {\r\n      console.log('‚ùå No SSPPOC church found in orthodoxmetrics_db.churches');\r\n      return;\r\n    }\r\n    \r\n    const church = churches[0];\r\n    console.log(`\\n‚úÖ Church found: ${church.name} (ID: ${church.id})`);\r\n    console.log(`Database name: ${church.database_name}\\n`);\r\n\r\n    // Step 2: Check if the database exists\r\n    console.log('=== STEP 2: Database Existence Check ===');\r\n    const [databases] = await connection.execute(`\r\n      SELECT SCHEMA_NAME \r\n      FROM information_schema.SCHEMATA \r\n      WHERE SCHEMA_NAME = ?\r\n    `, [church.database_name]);\r\n    \r\n    if (databases.length === 0) {\r\n      console.log(`‚ùå Database ${church.database_name} does not exist!`);\r\n      return;\r\n    }\r\n    console.log(`‚úÖ Database ${church.database_name} exists\\n`);\r\n\r\n    // Step 3: Check marriage_records table\r\n    console.log('=== STEP 3: Marriage Records Count ===');\r\n    const [totalCount] = await connection.execute(`\r\n      SELECT COUNT(*) as total_records \r\n      FROM \\`${church.database_name}\\`.marriage_records\r\n    `);\r\n    console.log(`Total marriage records: ${totalCount[0].total_records}\\n`);\r\n\r\n    // Step 4: Check church_id distribution\r\n    console.log('=== STEP 4: Church ID Distribution ===');\r\n    const [distribution] = await connection.execute(`\r\n      SELECT \r\n        church_id, \r\n        COUNT(*) as record_count,\r\n        MIN(id) as first_record_id,\r\n        MAX(id) as last_record_id\r\n      FROM \\`${church.database_name}\\`.marriage_records \r\n      GROUP BY church_id \r\n      ORDER BY church_id\r\n    `);\r\n    \r\n    console.log('Church ID distribution in marriage_records:');\r\n    distribution.forEach(row => {\r\n      console.log(`  Church ID ${row.church_id}: ${row.record_count} records (IDs: ${row.first_record_id}-${row.last_record_id})`);\r\n    });\r\n    console.log();\r\n\r\n    // Step 5: Check records for the church ID\r\n    console.log(`=== STEP 5: Records for Church ID ${church.id} ===`);\r\n    const [churchRecords] = await connection.execute(`\r\n      SELECT \r\n        id, church_id, fname_groom, lname_groom, fname_bride, lname_bride, mdate\r\n      FROM \\`${church.database_name}\\`.marriage_records \r\n      WHERE church_id = ? \r\n      LIMIT 5\r\n    `, [church.id]);\r\n    \r\n    if (churchRecords.length === 0) {\r\n      console.log(`‚ùå No marriage records found for church_id = ${church.id}`);\r\n      \r\n      // Check if records exist with different church_id\r\n      const [otherRecords] = await connection.execute(`\r\n        SELECT DISTINCT church_id, COUNT(*) as count\r\n        FROM \\`${church.database_name}\\`.marriage_records \r\n        GROUP BY church_id\r\n      `);\r\n      console.log('Records found with different church_id values:');\r\n      otherRecords.forEach(row => {\r\n        console.log(`  Church ID ${row.church_id}: ${row.count} records`);\r\n      });\r\n    } else {\r\n      console.log(`‚úÖ Found ${churchRecords.length} marriage records for church_id = ${church.id}:`);\r\n      churchRecords.forEach(record => {\r\n        console.log(`  ID: ${record.id}, Groom: ${record.fname_groom} ${record.lname_groom}, Bride: ${record.fname_bride} ${record.lname_bride}, Date: ${record.mdate}`);\r\n      });\r\n    }\r\n    console.log();\r\n\r\n    // Step 6: Test the API endpoint simulation\r\n    console.log('=== STEP 6: API Endpoint Simulation ===');\r\n    console.log(`Testing query: SELECT * FROM marriage_records WHERE church_id = ${church.id} ORDER BY id DESC LIMIT 10`);\r\n    \r\n    const [apiSimulation] = await connection.execute(`\r\n      SELECT * FROM \\`${church.database_name}\\`.marriage_records \r\n      WHERE church_id = ? \r\n      ORDER BY id DESC \r\n      LIMIT 10\r\n    `, [church.id]);\r\n    \r\n    console.log(`API would return: ${apiSimulation.length} records`);\r\n    if (apiSimulation.length > 0) {\r\n      console.log('Sample record:', {\r\n        id: apiSimulation[0].id,\r\n        church_id: apiSimulation[0].church_id,\r\n        groom: `${apiSimulation[0].fname_groom} ${apiSimulation[0].lname_groom}`,\r\n        bride: `${apiSimulation[0].fname_bride} ${apiSimulation[0].lname_bride}`\r\n      });\r\n    }\r\n\r\n    await connection.end();\r\n    console.log('\\nüîç Debug complete!');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Debug error:', error);\r\n  }\r\n}\r\n\r\n// Run the debug if this file is executed directly\r\nif (require.main === module) {\r\n  debugChurchRecordsIssue();\r\n}\r\n\r\nmodule.exports = { debugChurchRecordsIssue }; "
    },
    "complexity": {
      "totalLines": 144,
      "codeLines": 112,
      "commentLines": 10,
      "commentRatio": 0.08196721311475409,
      "averageLineLength": 41.42622950819672
    },
    "lastAnalyzed": "2025-07-28T07:20:00.095Z"
  },
  "contentHash": "af1ae74141ab1d3b6f54f29a7ef5d4d9988d75582f513eb2f76fe7c2c6aada40",
  "discoveredAt": "2025-07-28T07:20:00.095Z"
}