{
  "id": "2dd22a1c975d",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/index.js",
  "relativePath": "server/index.js",
  "name": "index.js",
  "extension": ".js",
  "size": 22816,
  "modified": "2025-07-28T06:03:00.401Z",
  "created": "2025-07-21T09:32:03.175Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 6
  },
  "metadata": {
    "fileStats": {
      "lines": 558,
      "characters": 22768,
      "words": 1965
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 6
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "express",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "morgan",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "cors",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "http",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "node-cron",
        "line": 515
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 190,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 191,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 487,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 546,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// ?? backend/server/index.js\r\nrequire('dotenv').config();\r\n\r\nconst express = require('express');\r\nconst morgan = require('morgan');\r\nconst cors = require('cors');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst http = require('http');\r\n\r\n// 🔧 FIXED: Use the updated session configuration  \r\nconst sessionMiddleware = require('./config/session');\r\nconst db = require('./config/db');\r\nconst { requestLogger, errorLogger } = require('./middleware/logger');\r\n// Import client context middleware for multi-tenant support\r\nconst { clientContext, clientContextCleanup } = require('./middleware/clientContext');\r\n\r\n// --- API ROUTES -----------------------------------------------------\r\nconst authRoutes = require('./routes/auth');\r\nconst adminRoutes = require('./routes/admin');\r\nconst debugRoutes = require('./routes/debug');\r\nconst menuManagementRoutes = require('./routes/menuManagement');\r\nconst menuPermissionsRoutes = require('./routes/menuPermissions');\r\nconst notesRoutes = require('./routes/notes');\r\nconst baptismRouter = require('./routes/baptism');\r\nconst marriageRouter = require('./routes/marriage');\r\nconst funeralRouter = require('./routes/funeral');\r\nconst uniqueValuesRouter = require('./routes/unique-values');\r\nconst dropdownOptionsRouter = require('./routes/dropdownOptions');\r\nconst baptismCertificatesRouter = require('./routes/baptismCertificates');\r\nconst marriageCertificatesRouter = require('./routes/marriageCertificates');\r\nconst ocrRouter = require('./routes/ocr');\r\nconst calendarRouter = require('./routes/calendar');\r\nconst dashboardRouter = require('./routes/dashboard');\r\nconst invoicesRouter = require('./routes/invoices');\r\nconst invoicesMultilingualRouter = require('./routes/invoicesMultilingual');\r\nconst enhancedInvoicesRouter = require('./routes/enhancedInvoices');\r\nconst billingRouter = require('./routes/billing');\r\nconst churchesRouter = require('./routes/churches');\r\nconst provisionRouter = require('./routes/provision');\r\nconst certificatesRouter = require('./routes/certificates');\r\nconst ocrSessionsRouter = require('./routes/ocrSessions');\r\nconst ocrVisionRouter = require('./routes/ocrVision');\r\nconst ecommerceRouter = require('./routes/ecommerce');\r\nconst { router: notificationRouter } = require('./routes/notifications');\r\nconst kanbanRouter = require('./routes/kanban');\r\nconst { router: logsRouter } = require('./routes/logs');\r\nconst globalOmaiRouter = require('./routes/globalOmai');\r\n// Add missing router imports\r\nconst churchRecordsRouter = require('./routes/records'); // Church records functionality\r\nconst uploadTokenRouter = require('./routes/uploadToken');\r\nconst templatesRouter = require('./routes/templates');\r\nconst globalTemplatesRouter = require('./routes/globalTemplates');\r\nconst metricsRouter = require('./routes/metrics');\r\nconst recordsRouter = require('./routes/records');\r\nconst importRecordsRouter = require('./routes/importRecords'); // Records import functionality\r\nconst preprocessOcrRouter = require('./routes/preprocessOcr'); // Image preprocessing routes\r\nconst scriptRunnerRouter = require('./routes/runScript'); // Secure script runner for admin users\r\n// Admin test routes for OCR system testing\r\nconst adminTestRouter = require('./routes/admin-test');\r\n// Orthodox Church Directory scraper routes\r\nconst churchScraperRouter = require('./routes/church-scraper');\r\n// Import client API router for multi-tenant client endpoints\r\nconst clientApiRouter = require('./routes/clientApi');\r\n// Import main clients management router\r\nconst clientsRouter = require('./routes/clients');\r\n// Import admin system management router\r\nconst adminSystemRouter = require('./routes/adminSystem');\r\n// Import church admin management router for multi-database support\r\nconst churchAdminRouter = require('./routes/admin/church');\r\n// Import churches management router for church provisioning\r\nconst churchesManagementRouter = require('./routes/admin/churches');\r\nconst sessionsRouter = require('./routes/admin/sessions');\r\nconst usersRouter = require('./routes/admin/users');\r\nconst activityLogsRouter = require('./routes/admin/activity-logs');\r\n// Import new modular admin route files (extracted from monolithic admin.js)\r\nconst churchUsersRouter = require('./routes/admin/church-users');\r\nconst churchDatabaseRouter = require('./routes/admin/church-database');\r\nconst userRouter = require('./routes/user'); // User routes\r\n// Import church OCR management router for multi-tenant OCR pipeline\r\nconst churchOcrRouter = require('./routes/church/ocr');\r\n// Import public OCR routes (no authentication required)\r\nconst publicOcrRouter = require('./routes/public/ocr');\r\nconst funeralCertificatesRouter = require('./routes/funeralCertificates');\r\n// Import pages and uploads management routes\r\nconst pagesRouter = require('./routes/pages');\r\nconst uploadsRouter = require('./routes/uploads');\r\nconst orthodoxCalendarRouter = require('./routes/orthodoxCalendar');\r\n// Import auto-learning OCR routes for AI-powered OCR improvement\r\nconst autoLearningRoutes = require('./routes/autoLearningRoutes');\r\n// Import global images management router for super admin content management\r\nconst globalImagesRouter = require('./routes/admin/globalImages');\r\n// Import service management router for system monitoring and control\r\nconst servicesRouter = require('./routes/admin/services');\r\n// Import social module routers\r\nconst socialBlogRouter = require('./routes/social/blog');\r\nconst socialFriendsRouter = require('./routes/social/friends');\r\nconst socialChatRouter = require('./routes/social/chat');\r\nconst socialNotificationsRouter = require('./routes/social/notifications');\r\n// Import backup management routers\r\nconst backupRouter = require('./routes/admin/backups');\r\n// Import original backup system router\r\nconst originalBackupRouter = require('./routes/backup');\r\n// Import NFS backup configuration router\r\nconst nfsBackupRouter = require('./routes/admin/nfs-backup');\r\n// Import Big Book system router\r\nconst bigBookRouter = require('./routes/bigbook');\r\n// Import OM-AI system router\r\nconst omaiRouter = require('./routes/omai');\r\n// const omaiRouter = require('./routes/omai-test'); // TEMPORARY TEST\r\nconst ombRouter = require('./routes/omb');\r\n// Import mock APIs to prevent 404 errors\r\nconst mockApisRouter = require('./routes/mock-apis');\r\n// Import JIT Terminal router for secure server access\r\nconst jitTerminalRouter = require('./routes/jit-terminal');\r\n// Import Build System router for build orchestration\r\nconst buildRouter = require('./routes/build');\r\n// Import AI Administration Panel router\r\nconst aiRouter = require('./routes/ai');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\n\r\n// 🔧 FIXED: Trust proxy configuration\r\napp.set('trust proxy', 1);\r\n\r\n// 🔧 FIXED: Bulletproof CORS configuration\r\nconst allowedOrigins = [\r\n  'http://localhost:3000',\r\n  'https://localhost:3000',\r\n  'https://orthodoxmetrics.com',\r\n  'http://localhost:3001',\r\n  'https://localhost:3001',\r\n  'http://localhost:5173',\r\n  'https://localhost:5173',\r\n  'http://localhost:5174',\r\n  'https://localhost:5174',\r\n  'http://127.0.0.1:3000',\r\n  'https://127.0.0.1:3000',\r\n  'http://127.0.0.1:3001',\r\n  'https://127.0.0.1:3001',\r\n  'http://127.0.0.1:5173',\r\n  'https://127.0.0.1:5173',\r\n  'http://127.0.0.1:5174',\r\n  'https://127.0.0.1:5174',\r\n  'http://192.168.1.239',\r\n  'https://192.168.1.239',\r\n  'http://192.168.1.239:3000',\r\n  'https://192.168.1.239:3000',\r\n  'http://192.168.1.239:3001',\r\n  'https://192.168.1.239:3001',\r\n  'http://192.168.1.239:5173',\r\n  'https://192.168.1.239:5173',\r\n  'http://192.168.1.239:5174',\r\n  'https://192.168.1.239:5174',\r\n  'http://192.168.1.221',\r\n  'https://192.168.1.221',\r\n  'http://192.168.1.221:3000',\r\n  'https://192.168.1.221:3000',\r\n  'http://192.168.1.221:3001',\r\n  'https://192.168.1.221:3001',\r\n  'http://192.168.1.221:5173',\r\n  'https://192.168.1.221:5173',\r\n  'http://192.168.1.221:5174',\r\n  'https://192.168.1.221:5174',\r\n  'https://orthodmetrics.com',\r\n  'https://orthodoxmetrics.com',\r\n  'http://orthodoxmetrics.com',\r\n  'https://orthodoxmetrics.com:8080',\r\n  'http://orthodoxmetrics.com:8080',\r\n  'https://www.orthodoxmetrics.com',\r\n  'http://www.orthodoxmetrics.com'\r\n];\r\n\r\n// --- CORS SETUP -----------------------------------------------------\r\napp.use(cors({\r\n  origin: function (origin, callback) {\r\n    // Allow requests with no origin (like mobile apps or curl requests)\r\n    if (!origin) return callback(null, true);\r\n    if (allowedOrigins.includes(origin)) return callback(null, true);\r\n    console.warn('❌ CORS blocked origin:', origin);\r\n    callback(new Error('CORS policy does not allow access from origin: ' + origin));\r\n  },\r\n  credentials: true, // 🔧 CRITICAL: Allow credentials (cookies)\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\r\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin'],\r\n  exposedHeaders: ['Set-Cookie']\r\n}));\r\n\r\nconst PORT = process.env.[REDACTED] || 3001;\r\nconst HOST = process.env.[REDACTED] || '0.0.0.0';\r\n\r\n// 🔧 FIXED: Middleware order is CRITICAL for session authentication\r\nconsole.log('🔧 Setting up middleware in correct order...');\r\n\r\n// 1. Logging middleware (first)\r\napp.use(morgan('dev'));\r\n\r\n// 2. Body parsing middleware (before session)\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// 3. Session middleware (CRITICAL: before any auth-protected routes)\r\nconsole.log('🍪 Applying session middleware...');\r\napp.use(sessionMiddleware);\r\n\r\n// 4. Database routing middleware\r\nconst { databaseRouter } = require('./middleware/databaseRouter');\r\napp.use(databaseRouter);\r\n\r\n// 4a. Global API logger (captures all routes + status code + duration)\r\napp.use((req, res, next) => {\r\n  const start = Date.now();\r\n  res.on('finish', () => {\r\n    const duration = Date.now() - start;\r\n    const status = res.statusCode;\r\n    console.log(`[API] ${req.method} ${req.originalUrl} → ${status} (${duration}ms)`);\r\n  });\r\n  next();\r\n});\r\n\r\n// 5. Request debugging (after session, before routes)\r\napp.use((req, res, next) => {\r\n  console.log(`🌍 Request: ${req.method} ${req.path}`);\r\n  console.log(`🍪 Session ID: ${req.sessionID}`);\r\n  console.log(`👤 Session User: ${req.session?.user?.email || 'Not authenticated'}`);\r\n  next();\r\n});\r\n\r\n// --- ROUTES ---------------------------------------------------------\r\nconsole.log('🛤️  Setting up routes in correct order...');\r\n\r\n// Health check route (no auth required)\r\napp.get('/', (req, res) => {\r\n    res.json({ \r\n        status: 'OK', \r\n        message: 'OrthodoxMetrics Backend is running successfully!',\r\n        session: req.sessionID,\r\n        authenticated: !!req.session?.user\r\n    });\r\n});\r\n\r\n// Public routes first (no authentication required)\r\napp.use('/api/churches', churchesRouter);\r\napp.use('/api/public/ocr', publicOcrRouter);\r\n\r\n// Authentication routes (no auth required for login itself)\r\napp.use('/api/auth', authRoutes);\r\n\r\n// 🔧 FIXED: Specific admin routes BEFORE general admin routes\r\napp.use('/api/admin/church', churchAdminRouter);\r\napp.use('/api/admin/test', adminTestRouter);\r\napp.use('/api/admin/system', adminSystemRouter);\r\napp.use('/api/admin/churches', churchesManagementRouter);\r\napp.use('/api/admin/sessions', sessionsRouter);\r\napp.use('/api/admin/users', usersRouter); // 🎯 CRITICAL: This route was being intercepted\r\napp.use('/api/users', usersRouter); // 🔧 FIXED: Mount usersRouter for /api/users endpoint\r\napp.use('/api/admin/activity-logs', activityLogsRouter);\r\napp.use('/api/admin/global-images', globalImagesRouter);\r\napp.use('/api/backups', backupRouter);\r\napp.use('/api/backup', originalBackupRouter);\r\napp.use('/api/admin/nfs-backup', nfsBackupRouter);\r\nconst socialPermissionsRouter = require('./routes/admin/social-permissions');\r\nconst menuPermissionsRouter = require('./routes/admin/menu-permissions');\r\nconst headlinesRouter = require('./routes/headlines');\r\nconst headlinesConfigRouter = require('./routes/headlines-config');\r\napp.use('/api/admin/social-permissions', socialPermissionsRouter);\r\napp.use('/api/admin/menu-permissions', menuPermissionsRouter);\r\napp.use('/api/headlines', headlinesRouter);\r\napp.use('/api/headlines', headlinesConfigRouter);\r\napp.use('/api/admin/services', servicesRouter);\r\napp.use('/api/build', buildRouter);\r\napp.use('/api/ai', aiRouter);\r\n\r\n// Big Book system routes\r\napp.use('/api/bigbook', bigBookRouter);\r\n// OM-AI system routes\r\napp.use('/api/omai', omaiRouter);\r\n// Global OMAI system routes for site-wide AI assistance\r\napp.use('/api/omai', globalOmaiRouter);\r\napp.use('/api/omb', ombRouter);\r\n// JIT Terminal routes for secure server access\r\napp.use('/api/jit', jitTerminalRouter);\r\n// 🔧 NEW: Modular admin routes (extracted from monolithic admin.js)\r\napp.use('/api/admin/church-users', churchUsersRouter);\r\napp.use('/api/admin/church-database', churchDatabaseRouter);\r\n\r\n// General admin routes (AFTER specific routes to prevent conflicts)\r\napp.use('/api/admin', adminRoutes);\r\n\r\n// Other authenticated routes\r\napp.use('/api/user', userRouter);\r\napp.use('/api/church-records', churchRecordsRouter);\r\napp.use('/api/kanban', kanbanRouter);\r\n\r\n// User profile routes (authenticated)\r\nconst userProfileRouter = require('./routes/user-profile');\r\napp.use('/api/user', userProfileRouter);\r\n\r\n// Notification routes (authenticated)\r\napp.use('/api', notificationRouter);\r\n\r\n// Social module routes\r\napp.use('/api/social/blog', socialBlogRouter);\r\napp.use('/api/social/friends', socialFriendsRouter);\r\napp.use('/api/social/chat', socialChatRouter);\r\napp.use('/api/social/notifications', socialNotificationsRouter);\r\n\r\n// Record management routes\r\napp.use('/api/baptism-records', baptismRouter);\r\napp.use('/api/marriage-records', marriageRouter);\r\napp.use('/api/funeral-records', funeralRouter);\r\napp.use('/api/unique-values', uniqueValuesRouter);\r\n\r\n// Certificate routes\r\napp.use('/api/baptismCertificates', baptismCertificatesRouter);\r\napp.use('/api/certificate/baptism', baptismCertificatesRouter);\r\napp.use('/api/marriageCertificates', marriageCertificatesRouter);\r\napp.use('/api/certificate/marriage', marriageCertificatesRouter);\r\napp.use('/api/funeralCertificates', funeralCertificatesRouter);\r\napp.use('/api/certificate/funeral', funeralCertificatesRouter);\r\n\r\n// OCR and Vision routes\r\napp.use('/api', ocrVisionRouter); // New Google Vision OCR routes\r\napp.use('/api', uploadTokenRouter); // Upload token management routes\r\napp.use('/api', ocrRouter);\r\napp.use('/api/ocr', ocrSessionsRouter);\r\n\r\n// Business routes\r\napp.use('/api/calendar', calendarRouter);\r\napp.use('/api/calendar', orthodoxCalendarRouter); // Add liturgical calendar routes\r\napp.use('/api/dashboard', dashboardRouter);\r\napp.use('/api/invoices', invoicesRouter);\r\napp.use('/api/invoices-enhanced', enhancedInvoicesRouter);\r\napp.use('/api/invoices-ml', invoicesMultilingualRouter);\r\napp.use('/api/enhanced-invoices', enhancedInvoicesRouter);\r\napp.use('/api/billing', billingRouter);\r\napp.use('/api/clients', clientsRouter); // Client management API\r\napp.use('/api/provision', provisionRouter);\r\napp.use('/api/certificates', certificatesRouter);\r\napp.use('/api/eCommerce', ecommerceRouter);\r\napp.use('/api/admin/logs', logsRouter); // 🔧 FIXED: Mount logsRouter under /api/admin/logs\r\n\r\n// CMS Routes\r\napp.use('/api/pages', pagesRouter);\r\napp.use('/api/blogs', require('./routes/blogs')); // Blog functionality for Task 132\r\napp.use('/api/uploads', uploadsRouter);\r\n\r\n// Survey Routes (Task 131)\r\napp.use('/api/survey', require('./routes/survey')); // OMSiteSurvey functionality\r\n\r\n// Menu and admin routes\r\napp.use('/api/menu-management', menuManagementRoutes);\r\napp.use('/api/menu-permissions', menuPermissionsRoutes);\r\napp.use('/api/notes', notesRoutes);\r\napp.use('/api/kanban', kanbanRouter);\r\napp.use('/api/survey', require('./routes/survey')); // Site survey routes for super_admin\r\n\r\n// Multi-tenant client routes\r\napp.use('/client/:clientSlug/api', clientContext, clientApiRouter, clientContextCleanup);\r\n\r\n// ?? Mount dropdownOptions routes here to prevent override\r\napp.use('/api', dropdownOptionsRouter);\r\n\r\n// Records import routes\r\napp.use('/api/records', importRecordsRouter);\r\n\r\n// Additional utility routes expected by frontend\r\napp.get('/api/dropdown-options', (req, res) => {\r\n  // Return dropdown options for forms\r\n  res.json({\r\n    countries: ['United States', 'Canada', 'Greece', 'Romania', 'Russia'],\r\n    states: ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA'],\r\n    languages: ['en', 'gr', 'ru', 'ro'],\r\n    roles: ['admin', 'priest', 'supervisor', 'volunteer', 'viewer', 'church'],\r\n    recordTypes: ['baptism', 'marriage', 'funeral']\r\n  });\r\n});\r\n\r\napp.get('/api/config', (req, res) => {\r\n  // Return app configuration\r\n  res.json({\r\n    appName: 'OrthodoxMetrics',\r\n    version: '1.0.0',\r\n    supportedLanguages: ['en', 'gr', 'ru', 'ro'],\r\n    features: {\r\n      ocr: true,\r\n      certificates: true,\r\n      invoices: true,\r\n      calendar: true\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/api/search', (req, res) => {\r\n  // Basic search functionality placeholder\r\n  const { q, type } = req.query;\r\n  res.json({\r\n    query: q,\r\n    type: type || 'all',\r\n    results: [],\r\n    message: 'Search functionality not yet implemented'\r\n  });\r\n});\r\n\r\n// --- HEALTHCHECK ----------------------------------------------------\r\napp.get('/api/health', async (req, res) => {\r\n  try {\r\n    const dbStatus = await db.testConnection();\r\n    res.json({\r\n      status: dbStatus.success ? 'ok' : 'error',\r\n      user: req.session.user || null,\r\n      database: dbStatus\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ status: 'error', message: err.message });\r\n  }\r\n});\r\n\r\n// --- OMAI FRONTEND COMPATIBILITY ENDPOINTS --------------------------\r\n// These endpoints are for frontend compatibility with the OMAI system\r\n\r\n// GET /api/status - OMAI status check for frontend\r\napp.get('/api/status', async (req, res) => {\r\n  try {\r\n    // Import OMAI health check function\r\n    const { getOMAIHealth } = require('../services/om-ai');\r\n    const health = await getOMAIHealth();\r\n    \r\n    res.json({\r\n      success: true,\r\n      status: health.status,\r\n      version: '1.0.0',\r\n      activeAgents: health.components?.agents || [],\r\n      timestamp: health.timestamp,\r\n      uptime: process.uptime(),\r\n      memory: process.memoryUsage()\r\n    });\r\n  } catch (error) {\r\n    console.error('OMAI status check failed:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      status: 'unhealthy',\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/fix - OMAI fix endpoint for frontend\r\napp.post('/api/fix', async (req, res) => {\r\n  try {\r\n    const { route, component, issues, props, currentCode, errorDetails } = req.body;\r\n    \r\n    // Log the fix request\r\n    console.log(`[OMAI] Fix request from user ${req.user?.id || 'unknown'} for component ${component}`);\r\n\r\n    // For now, return a stub response\r\n    // This would be implemented with actual AI fix logic\r\n    res.json({\r\n      success: true,\r\n      suggestion: `Fix for ${component} component`,\r\n      codeDiff: '',\r\n      explanation: 'This is a placeholder fix response. AI fix functionality will be implemented.',\r\n      confidence: 0.8,\r\n      estimatedTime: '5 minutes',\r\n      requiresManualReview: true\r\n    });\r\n  } catch (error) {\r\n    console.error('OMAI fix failed:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// --- 404 HANDLER ----------------------------------------------------\r\napp.use('/api/*', (req, res) => {\r\n  res.status(404).json({ error: 'Not found' });\r\n});\r\n\r\n// --- STATIC FRONTEND ------------------------------------------------\r\napp.use('/uploads', express.static(path.resolve(__dirname, '../public/uploads')));\r\napp.use('/assets', express.static(path.resolve(__dirname, '../src/assets')));\r\n\r\n// Serve dynamic addon components (development & production paths)\r\nconst addonsPath = process.env.[REDACTED] === 'production' \r\n  ? '/var/www/orthodoxmetrics/addons' \r\n  : path.resolve(__dirname, '../public/addons');\r\napp.use('/addons', express.static(addonsPath));\r\n\r\n// Explicit route for manifest.json to fix 403 errors\r\napp.get('/manifest.json', (req, res) => {\r\n  const manifestPath = path.resolve(__dirname, '../front-end/dist/manifest.json');\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.sendFile(manifestPath);\r\n});\r\n\r\n// Serve static files from the React app build directory\r\napp.use(express.static(path.resolve(__dirname, '../front-end/dist')));\r\n\r\n// Catch-all handler: send back React's index.html file for any non-API routes\r\napp.get('*', (req, res) => {\r\n  // Don't serve index.html for API routes\r\n  if (req.path.startsWith('/api/')) {\r\n    return res.status(404).json({ error: 'API endpoint not found' });\r\n  }\r\n  \r\n  const indexPath = path.resolve(__dirname, '../front-end/dist/index.html');\r\n  res.sendFile(indexPath);\r\n});\r\n\r\n// --- EMAIL QUEUE PROCESSING ------------------------------------------\r\nconst { notificationService } = require('./routes/notifications');\r\nconst cron = require('node-cron');\r\n\r\n// Process email queue every 5 minutes\r\ncron.schedule('*/5 * * * *', async () => {\r\n  try {\r\n    const processedCount = await notificationService.processEmailQueue();\r\n    if (processedCount > 0) {\r\n      console.log(`Processed ${processedCount} emails from notification queue`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error processing email queue:', error);\r\n  }\r\n});\r\n\r\nconsole.log('Email queue processor started (runs every 5 minutes)');\r\n\r\n// --- START OCR PROCESSING SERVICE ---------------------------------\r\nconst ocrProcessingService = require('./services/ocrProcessingService');\r\nocrProcessingService.start();\r\n\r\n// --- WEBSOCKET INTEGRATION -----------------------------------------\r\nconst websocketService = require('./services/websocketService');\r\n\r\n// Initialize JIT WebSocket\r\nif (jitTerminalRouter.setupJITWebSocket) {\r\n  const jitWebSocket = jitTerminalRouter.setupJITWebSocket(server);\r\n  console.log('🔌 JIT Terminal WebSocket initialized');\r\n}\r\n\r\n// --- START SERVER ---------------------------------------------------\r\nserver.listen(PORT, HOST, () => {\r\n  const nodeEnv = process.env.[REDACTED] || 'development';\r\n  console.log(`🚀 Server running in ${nodeEnv.toUpperCase()} mode at http://${HOST}:${PORT}`);\r\n  if (nodeEnv === 'development') {\r\n    console.log('📋 Development mode: Enhanced logging and verbose output enabled');\r\n  } else if (nodeEnv === 'production') {\r\n    console.log('🔧 Production mode: Optimized for performance and reduced logging');\r\n  }\r\n  \r\n  // Initialize WebSocket service after server starts\r\n  websocketService.initialize(server, sessionMiddleware);\r\n  console.log('🔌 WebSocket service initialized');\r\n});\r\n"
    },
    "complexity": {
      "totalLines": 558,
      "codeLines": 403,
      "commentLines": 93,
      "commentRatio": 0.1875,
      "averageLineLength": 44.63306451612903
    },
    "lastAnalyzed": "2025-07-28T07:20:00.260Z"
  },
  "contentHash": "87a175d6b8cfa963374117914007ee0e14f73fda79b98a389c0b85aed9f5c61f",
  "discoveredAt": "2025-07-28T07:20:00.260Z"
}