{
  "id": "a67b09cee9df",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/config/session.js",
  "relativePath": "server/config/session.js",
  "name": "session.js",
  "extension": ".js",
  "size": 4276,
  "modified": "2025-07-24T14:50:26.304Z",
  "created": "2025-07-24T14:50:26.304Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 119,
      "characters": 4242,
      "words": 455
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:secret|token)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 57,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 10,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 11,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 48,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 48,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 51,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 54,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/config/session.js - FIXED VERSION FOR HTTPS PRODUCTION\nconst session = require('express-session');\nconst MySQLStore = require('express-mysql-session')(session);\n\n// Load environment variables\nrequire('dotenv').config();\n\n// Database connection options for session store\nconst sessionStoreOptions = {\n  host: process.env.[REDACTED] || 'localhost',\n  port: process.env.[REDACTED] || 3306,\n  user: process.env.[REDACTED] || 'orthodoxapps',\n  password: process.env.[REDACTED] || 'Summerof1982@!',\n  database: process.env.[REDACTED] || 'orthodoxmetrics_db',\n  charset: 'utf8mb4',\n  expiration: 86400000, // 24 hours\n  checkExpirationInterval: 900000, // Check every 15 minutes\n  createDatabaseTable: true,\n  endConnectionOnClose: true,\n  clearExpired: true,\n  schema: {\n    tableName: 'sessions',\n    columnNames: {\n      session_id: 'session_id',\n      expires: 'expires',\n      data: 'data'\n    }\n  }\n};\n\nconst store = new MySQLStore(sessionStoreOptions);\n\n// Enhanced error handling for session store\nstore.on('error', (error) => {\n  console.error('‚ùå Session store error:', error);\n  console.error('‚ùå This may cause phantom user issues!');\n});\n\nstore.on('connect', () => {\n  console.log('‚úÖ Session store connected successfully');\n});\n\nstore.on('disconnect', () => {\n  console.log('‚ö†Ô∏è Session store disconnected');\n});\n\n// Enhanced environment detection for HTTPS\nconst isProduction = process.env.[REDACTED] === 'production' || process.env.[REDACTED] === 'development';\n// üîß FORCE HTTPS for orthodoxmetrics.com - always use secure cookies\nconst isHTTPS = true; // Force secure cookies for production HTTPS site\nconst sessionSecret = process.env.[REDACTED] || 'orthodox-metrics-production-secret-2025';\n\nconsole.log('üç™ Session configuration:');\nconsole.log('   Environment:', process.env.[REDACTED] || 'development');\nconsole.log('   HTTPS mode:', isHTTPS, '(FORCED TRUE for production)');\nconsole.log('   Secure cookies:', isHTTPS);\nconsole.log('   Session secret:'[REDACTED]'SET' : 'NOT SET');\nconsole.log('   Cookie name: orthodoxmetrics.sid');\nconsole.log('   Cookie domain: .orthodoxmetrics.com');\n\nconst sessionConfig = {\n  name: 'orthodoxmetrics.sid',\n  secret: sessionSecret,\n  store: store,\n  resave: false,\n  saveUninitialized: false,\n  rolling: true,\n  proxy: true, // Trust proxy headers (important for nginx setup)\n  cookie: {\n    secure: true, // üîß FIXED: Enable secure cookies for HTTPS\n    httpOnly: true,\n    maxAge: 86400000, // 24 hours\n    sameSite: 'lax', // Allow same-site requests\n    domain: '.orthodoxmetrics.com' // üîß FIXED: Always set domain for orthodoxmetrics.com\n  }\n};\n\n// Create session middleware with enhanced debugging\nconst sessionMiddleware = session(sessionConfig);\n\n// Wrap session middleware to add debugging for phantom user issues\nconst debugSessionMiddleware = (req, res, next) => {\n  const originalSessionId = req.sessionID;\n  \n  // Log session state before middleware\n  console.log(`üç™ SESSION DEBUG - ${req.method} ${req.path}`);\n  console.log(`   Session ID before: ${originalSessionId || 'NONE'}`);\n  console.log(`   Cookie header: ${req.headers.cookie ? 'PRESENT' : 'MISSING'}`);\n  \n  sessionMiddleware(req, res, (err) => {\n    if (err) {\n      console.error('‚ùå Session middleware error:', err);\n      return next(err);\n    }\n    \n    const newSessionId = req.sessionID;\n    console.log(`   Session ID after: ${newSessionId || 'NONE'}`);\n    console.log(`   Session user: ${req.session?.user?.email || 'NONE'}`);\n    console.log(`   Session keys: ${req.session ? Object.keys(req.session).join(', ') : 'NONE'}`);\n    \n    // Check for phantom user issue\n    if (newSessionId && !req.session?.user) {\n      console.log('‚ö†Ô∏è  PHANTOM USER DETECTED: Session ID exists but no user data');\n      console.log('‚ö†Ô∏è  This indicates session store or cookie transmission issues');\n    }\n    \n    // Check for session ID changes (indicates session not persisting)\n    if (originalSessionId && newSessionId && originalSessionId !== newSessionId) {\n      console.log('‚ö†Ô∏è  SESSION ID CHANGED: Session not persisting properly');\n      console.log(`   Original: ${originalSessionId}`);\n      console.log(`   New: ${newSessionId}`);\n    }\n    \n    next();\n  });\n};\n\nmodule.exports = debugSessionMiddleware;\n"
    },
    "complexity": {
      "totalLines": 119,
      "codeLines": 89,
      "commentLines": 11,
      "commentRatio": 0.11,
      "averageLineLength": 41.04
    },
    "lastAnalyzed": "2025-07-28T07:19:59.542Z"
  },
  "contentHash": "4d641440df8d2fe4f871da56b0f42b5eaa9a0456938134ec5a1e04abbe95e737",
  "discoveredAt": "2025-07-28T07:19:59.542Z"
}