{
  "id": "edc167c12e70",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/scripts/7-26-25/rebuild-omlearn.js",
  "relativePath": "scripts/7-26-25/rebuild-omlearn.js",
  "name": "rebuild-omlearn.js",
  "extension": ".js",
  "size": 5336,
  "modified": "2025-07-26T01:10:53.254Z",
  "created": "2025-07-26T01:10:49.951Z",
  "classification": {
    "type": "Build Scripts",
    "category": "DevOps > Build",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 170,
      "characters": 5326,
      "words": 505
    },
    "classification": {
      "type": "Build Scripts",
      "category": "DevOps > Build",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 5
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 99,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\nconst { execSync } = require('child_process');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n// Colors for console output\r\nconst colors = {\r\n  reset: '\\x1b[0m',\r\n  bright: '\\x1b[1m',\r\n  red: '\\x1b[31m',\r\n  green: '\\x1b[32m',\r\n  yellow: '\\x1b[33m',\r\n  blue: '\\x1b[34m',\r\n  magenta: '\\x1b[35m',\r\n  cyan: '\\x1b[36m'\r\n};\r\n\r\nfunction log(message, color = 'reset') {\r\n  console.log(`${colors[color]}${message}${colors.reset}`);\r\n}\r\n\r\nfunction logStep(step, message) {\r\n  log(`\\n${colors.bright}${colors.blue}[${step}]${colors.reset} ${message}`);\r\n}\r\n\r\nfunction logSuccess(message) {\r\n  log(`âœ“ ${message}`, 'green');\r\n}\r\n\r\nfunction logError(message) {\r\n  log(`âœ— ${message}`, 'red');\r\n}\r\n\r\nfunction logWarning(message) {\r\n  log(`âš  ${message}`, 'yellow');\r\n}\r\n\r\nfunction logInfo(message) {\r\n  log(`â„¹ ${message}`, 'cyan');\r\n}\r\n\r\n// Main rebuild function\r\nasync function rebuildOMLearn() {\r\n  try {\r\n    logStep('1', 'Starting OMLearn frontend rebuild...');\r\n    \r\n    // Check if we're in the right directory\r\n    const currentDir = process.cwd();\r\n    logInfo(`Current directory: ${currentDir}`);\r\n    \r\n    // Navigate to front-end directory\r\n    const frontEndPath = path.join(currentDir, 'front-end');\r\n    if (!fs.existsSync(frontEndPath)) {\r\n      throw new Error('front-end directory not found. Please run this script from the project root.');\r\n    }\r\n    \r\n    logStep('2', 'Navigating to front-end directory...');\r\n    process.chdir(frontEndPath);\r\n    logSuccess(`Changed to directory: ${process.cwd()}`);\r\n    \r\n    // Check if package.json exists\r\n    if (!fs.existsSync('package.json')) {\r\n      throw new Error('package.json not found in front-end directory');\r\n    }\r\n    \r\n    logStep('3', 'Cleaning previous build artifacts...');\r\n    \r\n    // Remove node_modules if it exists\r\n    if (fs.existsSync('node_modules')) {\r\n      logInfo('Removing node_modules...');\r\n      execSync('rm -rf node_modules', { stdio: 'inherit' });\r\n      logSuccess('node_modules removed');\r\n    }\r\n    \r\n    // Remove package-lock.json if it exists\r\n    if (fs.existsSync('package-lock.json')) {\r\n      logInfo('Removing package-lock.json...');\r\n      execSync('rm -f package-lock.json', { stdio: 'inherit' });\r\n      logSuccess('package-lock.json removed');\r\n    }\r\n    \r\n    // Remove dist directory if it exists\r\n    if (fs.existsSync('dist')) {\r\n      logInfo('Removing dist directory...');\r\n      execSync('rm -rf dist', { stdio: 'inherit' });\r\n      logSuccess('dist directory removed');\r\n    }\r\n    \r\n    logStep('4', 'Installing dependencies...');\r\n    logInfo('Running npm install with legacy peer deps...');\r\n    execSync('npm install --legacy-peer-deps', { stdio: 'inherit' });\r\n    logSuccess('Dependencies installed successfully');\r\n    \r\n    logStep('5', 'Building OMLearn module...');\r\n    logInfo('Setting NODE_OPTIONS for increased memory...');\r\n    \r\n    // Set environment variable for increased memory\r\n    process.env.[REDACTED] = '--max-old-space-size=4096';\r\n    \r\n    logInfo('Running npm run build...');\r\n    execSync('npm run build', { \r\n      stdio: 'inherit',\r\n      env: { ...process.env, NODE_OPTIONS: '--max-old-space-size=4096' }\r\n    });\r\n    \r\n    logSuccess('Build completed successfully!');\r\n    \r\n    logStep('6', 'Build Summary');\r\n    logInfo('OMLearn module has been rebuilt and is ready for deployment');\r\n    logInfo('The module is now available at: /bigbook/omlearn');\r\n    logInfo('All components have been compiled and optimized');\r\n    \r\n    // Check if dist directory was created\r\n    if (fs.existsSync('dist')) {\r\n      const distStats = fs.statSync('dist');\r\n      logInfo(`Build output size: ${(distStats.size / 1024 / 1024).toFixed(2)} MB`);\r\n    }\r\n    \r\n    log('\\n' + '='.repeat(50), 'green');\r\n    log('ðŸŽ‰ OMLearn rebuild completed successfully!', 'green');\r\n    log('='.repeat(50), 'green');\r\n    \r\n  } catch (error) {\r\n    logError('Rebuild failed!');\r\n    logError(`Error: ${error.message}`);\r\n    \r\n    if (error.stdout) {\r\n      logInfo('Command output:');\r\n      console.log(error.stdout.toString());\r\n    }\r\n    \r\n    if (error.stderr) {\r\n      logWarning('Error output:');\r\n      console.log(error.stderr.toString());\r\n    }\r\n    \r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Handle command line arguments\r\nconst args = process.argv.slice(2);\r\n\r\nif (args.includes('--help') || args.includes('-h')) {\r\n  log('OMLearn Frontend Rebuild Script', 'bright');\r\n  log('================================', 'blue');\r\n  log('');\r\n  log('Usage: node rebuild-omlearn.js [options]', 'bright');\r\n  log('');\r\n  log('Options:', 'bright');\r\n  log('  --help, -h     Show this help message', 'cyan');\r\n  log('  --verbose, -v  Enable verbose output', 'cyan');\r\n  log('');\r\n  log('Description:', 'bright');\r\n  log('  This script rebuilds the OMLearn frontend module by:', 'cyan');\r\n  log('  1. Cleaning previous build artifacts', 'cyan');\r\n  log('  2. Installing dependencies with legacy peer deps', 'cyan');\r\n  log('  3. Building the project with increased memory allocation', 'cyan');\r\n  log('');\r\n  log('Requirements:', 'bright');\r\n  log('  - Node.js and npm installed', 'cyan');\r\n  log('  - Run from project root directory', 'cyan');\r\n  log('  - front-end/ directory must exist', 'cyan');\r\n  log('');\r\n  process.exit(0);\r\n}\r\n\r\n// Run the rebuild\r\nrebuildOMLearn(); "
    },
    "complexity": {
      "totalLines": 170,
      "codeLines": 125,
      "commentLines": 13,
      "commentRatio": 0.09420289855072464,
      "averageLineLength": 36.55797101449275
    },
    "lastAnalyzed": "2025-07-28T07:19:59.011Z"
  },
  "contentHash": "4dc176f4967680494ef256f39a74ad2a843c2662448068bd4d5297bd2edd3cc8",
  "discoveredAt": "2025-07-28T07:19:59.011Z"
}