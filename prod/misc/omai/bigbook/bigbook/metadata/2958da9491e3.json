{
  "id": "2958da9491e3",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/run-calendar-schema-simple.sh",
  "relativePath": "run-calendar-schema-simple.sh",
  "name": "run-calendar-schema-simple.sh",
  "extension": ".sh",
  "size": 7228,
  "modified": "2025-07-23T21:08:04.982Z",
  "created": "2025-07-23T21:08:01.694Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 239,
      "characters": 7226,
      "words": 834
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 4
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 41,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/bin/bash\n\n# OrthodoxMetrics Calendar System Database Schema - Simple Version\necho \"ðŸ”§ Running OrthodoxMetrics Calendar Database Schema (Simple Version)...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\n# Check if schema file exists\nif [ ! -f \"server/calendar-schema.sql\" ]; then\n    print_error \"Calendar schema file not found: server/calendar-schema.sql\"\n    exit 1\nfi\n\nprint_status \"Calendar schema file found. Creating database schema...\"\n\n# Get database credentials\nread -p \"Enter MySQL username (default: orthodoxapps): \" DB_USER\nDB_USER=${DB_USER:-orthodoxapps}\n\nread -s -p \"Enter MySQL password: \"[REDACTED]\"\"\n\nread -p \"Enter MySQL host (default: localhost): \" DB_HOST\nDB_HOST=${DB_HOST:-localhost}\n\nread -p \"Enter database name (default: orthodoxmetrics_db): \" DB_NAME\nDB_NAME=${DB_NAME:-orthodoxmetrics_db}\n\nprint_status \"Creating calendar database schema (tables and data only)...\"\n\n# Create a temporary file with just the tables and data (no procedures/triggers)\nTEMP_SCHEMA=\"/tmp/calendar_schema_temp.sql\"\n\n# Extract everything up to the stored procedures section\nsed '/^-- =============================================================================$/,/^-- CREATE STORED PROCEDURES$/!d;/^-- CREATE STORED PROCEDURES$/d' server/calendar-schema.sql > \"$TEMP_SCHEMA\"\n\n# Add the USE statement at the beginning\necho \"USE $DB_NAME;\" | cat - \"$TEMP_SCHEMA\" > temp && mv temp \"$TEMP_SCHEMA\"\n\n# Run the simplified schema\nmysql -u \"$DB_USER\" -p\"$DB_PASS\" -h \"$DB_HOST\" < \"$TEMP_SCHEMA\"\n\nif [ $? -eq 0 ]; then\n    print_success \"Database tables and data created successfully!\"\n    \n    # Now try to add the stored procedures and triggers\n    print_status \"Adding stored procedures and triggers...\"\n    \n    # Create procedures and triggers separately\n    mysql -u \"$DB_USER\" -p\"$DB_PASS\" -h \"$DB_HOST\" \"$DB_NAME\" << 'EOF'\n-- Drop existing procedures if they exist\nDROP PROCEDURE IF EXISTS CreateAITask;\nDROP PROCEDURE IF EXISTS UpdateTaskStatus;\nDROP PROCEDURE IF EXISTS SyncTaskWithKanban;\n\nDELIMITER //\n\n-- Procedure to create a new AI task\nCREATE PROCEDURE CreateAITask(\n    IN p_title VARCHAR(255),\n    IN p_description TEXT,\n    IN p_assigned_to VARCHAR(100),\n    IN p_status ENUM('pending', 'in_progress', 'completed', 'blocked'),\n    IN p_due_date DATE,\n    IN p_agent ENUM('Ninja', 'Claude', 'Cursor', 'OM-AI', 'Junie', 'GitHub Copilot'),\n    IN p_priority ENUM('low', 'medium', 'high', 'critical'),\n    IN p_estimated_hours DECIMAL(5,2)\n)\nBEGIN\n    DECLARE task_id VARCHAR(100);\n    SET task_id = CONCAT('OM-AI-TASK-', UNIX_TIMESTAMP(), '-', FLOOR(RAND() * 1000000));\n    \n    INSERT INTO ai_tasks (\n        id, title, description, assigned_to, status, due_date, \n        agent, priority, estimated_hours, created_at, updated_at\n    ) VALUES (\n        task_id, p_title, p_description, p_assigned_to, p_status, p_due_date,\n        p_agent, p_priority, p_estimated_hours, NOW(), NOW()\n    );\n    \n    SELECT task_id as new_task_id;\nEND //\n\n-- Procedure to update task status\nCREATE PROCEDURE UpdateTaskStatus(\n    IN p_task_id VARCHAR(100),\n    IN p_status ENUM('pending', 'in_progress', 'completed', 'blocked')\n)\nBEGIN\n    UPDATE ai_tasks \n    SET status = p_status, updated_at = NOW()\n    WHERE id = p_task_id;\n    \n    -- Log the activity\n    INSERT INTO task_activity_log (id, task_id, user_id, action, details)\n    VALUES (\n        CONCAT('log-', UNIX_TIMESTAMP(), '-', FLOOR(RAND() * 1000000)),\n        p_task_id,\n        'system',\n        'status_update',\n        JSON_OBJECT('old_status', (SELECT status FROM ai_tasks WHERE id = p_task_id), 'new_status', p_status)\n    );\nEND //\n\n-- Procedure to sync task with Kanban\nCREATE PROCEDURE SyncTaskWithKanban(\n    IN p_task_id VARCHAR(100),\n    IN p_kanban_id VARCHAR(100)\n)\nBEGIN\n    UPDATE ai_tasks \n    SET linked_kanban_id = p_kanban_id, updated_at = NOW()\n    WHERE id = p_task_id;\n    \n    -- Log the sync activity\n    INSERT INTO task_activity_log (id, task_id, user_id, action, details)\n    VALUES (\n        CONCAT('log-', UNIX_TIMESTAMP(), '-', FLOOR(RAND() * 1000000)),\n        p_task_id,\n        'system',\n        'kanban_sync',\n        JSON_OBJECT('kanban_id', p_kanban_id)\n    );\nEND //\n\nDELIMITER ;\nEOF\n\n    if [ $? -eq 0 ]; then\n        print_success \"Stored procedures created successfully!\"\n    else\n        print_warning \"Failed to create stored procedures, but tables are ready\"\n    fi\n    \n    # Now try to add triggers\n    print_status \"Adding triggers...\"\n    \n    mysql -u \"$DB_USER\" -p\"$DB_PASS\" -h \"$DB_HOST\" \"$DB_NAME\" << 'EOF'\n-- Drop existing triggers if they exist\nDROP TRIGGER IF EXISTS after_task_status_update;\nDROP TRIGGER IF EXISTS after_task_insert;\n\nDELIMITER //\n\n-- Trigger to update agent queue length when task is assigned\nCREATE TRIGGER after_task_status_update\nAFTER UPDATE ON ai_tasks\nFOR EACH ROW\nBEGIN\n    IF NEW.status != OLD.status THEN\n        -- Update agent queue length\n        UPDATE ai_agents \n        SET queue_length = (\n            SELECT COUNT(*) \n            FROM ai_tasks \n            WHERE agent = NEW.agent AND status = 'pending'\n        )\n        WHERE name = NEW.agent;\n        \n        -- Create notification for status change\n        INSERT INTO task_notifications (id, task_id, type, message, priority)\n        VALUES (\n            CONCAT('notif-', UNIX_TIMESTAMP(), '-', FLOOR(RAND() * 1000000)),\n            NEW.id,\n            'status_change',\n            CONCAT('Task \"', NEW.title, '\" status changed from ', OLD.status, ' to ', NEW.status),\n            NEW.priority\n        );\n    END IF;\nEND //\n\n-- Trigger to create activity log when task is created\nCREATE TRIGGER after_task_insert\nAFTER INSERT ON ai_tasks\nFOR EACH ROW\nBEGIN\n    INSERT INTO task_activity_log (id, task_id, user_id, action, details)\n    VALUES (\n        CONCAT('log-', UNIX_TIMESTAMP(), '-', FLOOR(RAND() * 1000000)),\n        NEW.id,\n        COALESCE(NEW.assigned_to, 'system'),\n        'task_created',\n        JSON_OBJECT('title', NEW.title, 'agent', NEW.agent, 'priority', NEW.priority)\n    );\nEND //\n\nDELIMITER ;\nEOF\n\n    if [ $? -eq 0 ]; then\n        print_success \"Triggers created successfully!\"\n    else\n        print_warning \"Failed to create triggers, but tables are ready\"\n    fi\n    \n    # Verify the tables were created\n    print_status \"Verifying tables...\"\n    mysql -u \"$DB_USER\" -p\"$DB_PASS\" -h \"$DB_HOST\" \"$DB_NAME\" -e \"\n    SHOW TABLES LIKE 'ai_%';\n    SHOW TABLES LIKE 'task_%';\n    SHOW TABLES LIKE 'kanban_%';\n    SHOW TABLES LIKE 'calendar_%';\n    SHOW TABLES LIKE 'chatgpt_%';\n    \" 2>/dev/null\n    \n    # Clean up temp file\n    rm -f \"$TEMP_SCHEMA\"\n    \n    print_success \"Calendar database schema setup completed!\"\n    echo \"\"\n    echo \"Next steps:\"\n    echo \"1. Run the full setup: ./setup-calendar-system.sh\"\n    echo \"2. Or start the system: ./start-calendar-system.sh (if it exists)\"\nelse\n    print_error \"Failed to create database schema\"\n    rm -f \"$TEMP_SCHEMA\"\n    exit 1\nfi "
    },
    "complexity": {
      "totalLines": 239,
      "codeLines": 184,
      "commentLines": 14,
      "commentRatio": 0.0707070707070707,
      "averageLineLength": 35.03030303030303
    },
    "lastAnalyzed": "2025-07-26T04:17:10.291Z"
  },
  "contentHash": "95ee5ab9e36bbf238f045c75527f2dc22ef1c2033c84a40edbb1e07638dadcd6",
  "discoveredAt": "2025-07-26T04:17:10.291Z"
}