{
  "id": "36c8fa7b1cb9",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/auth.js",
  "relativePath": "server/routes/auth.js",
  "name": "auth.js",
  "extension": ".js",
  "size": 10601,
  "modified": "2025-07-23T17:44:49.587Z",
  "created": "2025-07-09T02:54:27.838Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 376,
      "characters": 10551,
      "words": 1066
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 3
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 124,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/routes/auth.js - Unified and Secure Auth Route Implementation\nconst express = require('express');\nconst bcrypt = require('bcrypt');\nconst { promisePool } = require('../../config/db');\nconst router = express.Router();\n\n// POST /api/auth/login - User login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password, username } = req.body;\n    const loginEmail = email || username;\n\n    console.log('🔑 Login attempt for:', loginEmail);\n    console.log('🔑 Session ID before login:', req.sessionID);\n\n    if (!loginEmail || !password) {\n      return res.status(400).json({\n        error: 'Email and password are required',\n        code: 'MISSING_CREDENTIALS'\n      });\n    }\n\n    if (req.session.user) {\n      console.log('🔄 Clearing existing session for user:', req.session.user.email);\n      // Clear session data but don't destroy the session object\n      req.session.user = null;\n      req.session.loginTime = null;\n      req.session.lastActivity = null;\n    }\n\n    const [users] = await promisePool.query(\n      'SELECT id, email, password_hash, first_name, last_name, role, is_active, last_login FROM users WHERE email = ? AND is_active = 1',\n      [loginEmail]\n    );\n\n    if (users.length === 0) {\n      console.log('❌ User not found or inactive:', loginEmail);\n      return res.status(401).json({\n        error: 'Invalid email or password',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    const user = users[0];\n    console.log('👤 Found user:', { id: user.id, email: user.email, role: user.role });\n\n    const isValidPassword = await bcrypt.compare(password, user.password_hash);\n    if (!isValidPassword) {\n      console.log('❌ Invalid password for user:', loginEmail);\n      return res.status(401).json({\n        error: 'Invalid email or password',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    await promisePool.query(\n      'UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?',\n      [user.id]\n    );\n\n    if (!req.session) {\n      console.error('❌ Session is undefined during login');\n      return res.status(500).json({ \n        success: false, \n        message: 'Session middleware is not active',\n        code: 'SESSION_ERROR' \n      });\n    }\n\n    // Set session data directly (avoid regeneration timing issues)\n    req.session.user = {\n      id: user.id,\n      email: user.email,\n      first_name: user.first_name,\n      last_name: user.last_name,\n      role: user.role,\n      landing_page: '/dashboards/modern'\n    };\n\n    req.session.loginTime = new Date();\n    req.session.lastActivity = new Date();\n\n    // 🔧 FIXED: Explicitly save session to ensure persistence\n    req.session.save((saveErr) => {\n      if (saveErr) {\n        console.error('❌ Error saving session:', saveErr);\n        return res.status(500).json({\n          error: 'Session save failed',\n          code: 'SESSION_SAVE_ERROR'\n        });\n      }\n      \n      console.log('✅ Session saved successfully with ID:', req.sessionID);\n      console.log('✅ Session user:', req.session.user.email);\n\n      console.log('✅ Login successful for user:', req.session.user.email);\n      console.log('✅ Session ID:', req.sessionID);\n\n      res.json({\n        success: true,\n        message: 'Login successful',\n        user: {\n          id: user.id,\n          email: user.email,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          role: user.role\n        },\n        sessionId: req.sessionID,\n        redirectTo: '/dashboards/modern'\n      });\n    });\n  } catch (error) {\n    console.error('❌ Login error:', error);\n    // Don't destroy session on error - just clear user data\n    if (req.session) {\n      req.session.user = null;\n      req.session.loginTime = null;\n      req.session.lastActivity = null;\n    }\n    res.status(500).json({\n      error: 'Login failed',\n      code: 'LOGIN_ERROR',\n      details: process.env.[REDACTED] === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// POST /api/auth/logout - User logout\nrouter.post('/logout', (req, res) => {\n  try {\n    if (req.session && req.session.user) {\n      const userEmail = req.session.user.email;\n      console.log('🔑 Logout attempt for:', userEmail);\n      \n      req.session.destroy((err) => {\n        if (err) {\n          console.error('❌ Logout error:', err);\n          return res.status(500).json({\n            error: 'Logout failed',\n            code: 'LOGOUT_ERROR'\n          });\n        }\n        \n        console.log('✅ Logout successful for user:', userEmail);\n        res.json({\n          success: true,\n          message: 'Logout successful'\n        });\n      });\n    } else {\n      res.json({\n        success: true,\n        message: 'Already logged out'\n      });\n    }\n  } catch (error) {\n    console.error('❌ Logout error:', error);\n    res.status(500).json({\n      error: 'Logout failed',\n      code: 'LOGOUT_ERROR'\n    });\n  }\n});\n\n// GET /api/auth/check - Check authentication status\nrouter.get('/check', (req, res) => {\n  try {\n    if (req.session && req.session.user) {\n      // Update last activity\n      req.session.lastActivity = new Date();\n      \n      res.json({\n        authenticated: true,\n        user: {\n          id: req.session.user.id,\n          email: req.session.user.email,\n          first_name: req.session.user.first_name,\n          last_name: req.session.user.last_name,\n          role: req.session.user.role,\n          preferred_language: req.session.user.preferred_language,\n          timezone: req.session.user.timezone\n        },\n        sessionId: req.sessionID,\n        lastActivity: req.session.lastActivity\n      });\n    } else {\n      res.status(401).json({\n        authenticated: false,\n        message: 'Not authenticated'\n      });\n    }\n  } catch (error) {\n    console.error('❌ Auth check error:', error);\n    res.status(500).json({\n      authenticated: false,\n      message: 'Authentication check failed',\n      code: 'AUTH_CHECK_ERROR'\n    });\n  }\n});\n\n// GET /api/auth/status - Authentication status endpoint\nrouter.get('/status', (req, res) => {\n  res.status(200).json({\n    authenticated: !!req.session?.user,\n    user: req.session?.user || null\n  });\n});\n\n// PUT /api/auth/profile - Update user profile information\nrouter.put('/profile', async (req, res) => {\n  try {\n    if (!req.session || !req.session.user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Not authenticated'\n      });\n    }\n\n    const userId = req.session.user.id;\n    const { first_name, last_name, email, preferred_language, timezone } = req.body;\n\n    console.log('📝 Updating profile for user:', userId, req.body);\n\n    // Validate input\n    if (!first_name || !last_name || !email) {\n      return res.status(400).json({\n        success: false,\n        message: 'First name, last name, and email are required'\n      });\n    }\n\n    // Check if email is already taken by another user\n    if (email !== req.session.user.email) {\n      const [existingUsers] = await promisePool.query(\n        'SELECT id FROM users WHERE email = ? AND id != ?',\n        [email, userId]\n      );\n\n      if (existingUsers.length > 0) {\n        return res.status(400).json({\n          success: false,\n          message: 'Email address is already in use'\n        });\n      }\n    }\n\n    // Update user data\n    await promisePool.query(\n      `UPDATE users SET \n        first_name = ?, \n        last_name = ?, \n        email = ?, \n        preferred_language = ?, \n        timezone = ?,\n        updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?`,\n      [first_name, last_name, email, preferred_language || 'en', timezone || 'UTC', userId]\n    );\n\n    // Update session data\n    req.session.user = {\n      ...req.session.user,\n      first_name,\n      last_name,\n      email,\n      preferred_language: preferred_language || 'en',\n      timezone: timezone || 'UTC'\n    };\n\n    console.log('✅ Profile updated successfully for user:', userId);\n\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: req.session.user\n    });\n\n  } catch (error) {\n    console.error('❌ Profile update error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to update profile',\n      code: 'PROFILE_UPDATE_ERROR'\n    });\n  }\n});\n\n// PUT /api/auth/password - Change user password\nrouter.put('/password', async (req, res) => {\n  try {\n    if (!req.session || !req.session.user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Not authenticated'\n      });\n    }\n\n    const userId = req.session.user.id;\n    const { currentPassword, newPassword, confirmPassword } = req.body;\n\n    console.log('🔐 Password change request for user:', userId);\n\n    // Validate input\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'Current password, new password, and confirmation are required'\n      });\n    }\n\n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'New password and confirmation do not match'\n      });\n    }\n\n    if (newPassword.length < 6) {\n      return res.status(400).json({\n        success: false,\n        message: 'New password must be at least 6 characters long'\n      });\n    }\n\n    // Get current password hash\n    const [users] = await promisePool.query(\n      'SELECT password_hash FROM users WHERE id = ?',\n      [userId]\n    );\n\n    if (users.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found'\n      });\n    }\n\n    // Verify current password\n    const isValidPassword = await bcrypt.compare(currentPassword, users[0].password_hash);\n    if (!isValidPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'Current password is incorrect'\n      });\n    }\n\n    // Hash new password\n    const newPasswordHash = await bcrypt.hash(newPassword, 12);\n\n    // Update password\n    await promisePool.query(\n      'UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\n      [newPasswordHash, userId]\n    );\n\n    console.log('✅ Password updated successfully for user:', userId);\n\n    res.json({\n      success: true,\n      message: 'Password updated successfully'\n    });\n\n  } catch (error) {\n    console.error('❌ Password update error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Failed to update password',\n      code: 'PASSWORD_UPDATE_ERROR'\n    });\n  }\n});\n\nmodule.exports = router;\n"
    },
    "complexity": {
      "totalLines": 376,
      "codeLines": 306,
      "commentLines": 21,
      "commentRatio": 0.06422018348623854,
      "averageLineLength": 31.039755351681958
    },
    "lastAnalyzed": "2025-07-28T07:20:00.391Z"
  },
  "contentHash": "593ee85e81f8bbb2af6b6b3b0660636b1f4b349e9a4e3d6256f90d9375410564",
  "discoveredAt": "2025-07-28T07:20:00.392Z"
}