{
  "id": "3be542c33736",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/61e196f9e4a0.json",
  "relativePath": "bigbook/metadata/61e196f9e4a0.json",
  "name": "61e196f9e4a0.json",
  "extension": ".json",
  "size": 3581,
  "modified": "2025-07-26T04:17:11.798Z",
  "created": "2025-07-26T04:17:11.798Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 66,
      "characters": 3565,
      "words": 298
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 53
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 53
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 53
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 53,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"61e196f9e4a0\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/test-auth.js\",\n  \"relativePath\": \"server/utils/test-auth.js\",\n  \"name\": \"test-auth.js\",\n  \"extension\": \".js\",\n  \"size\": 1848,\n  \"modified\": \"2025-07-04T23:08:01.000Z\",\n  \"created\": \"2025-07-09T00:48:38.534Z\",\n  \"classification\": {\n    \"type\": \"Testing Scripts\",\n    \"category\": \"DevOps > Test\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 53,\n      \"characters\": 1832,\n      \"words\": 178\n    },\n    \"classification\": {\n      \"type\": \"Testing Scripts\",\n      \"category\": \"DevOps > Test\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"path\",\n        \"line\": 2\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"dotenv\",\n        \"line\": 3\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"bcrypt\",\n        \"line\": 6\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 34,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// Test script to check database connection and user authentication\\r\\nconst path = require('path');\\r\\nrequire('dotenv').config({ path: path.resolve(__dirname, '.env.development') });\\r\\n\\r\\nconst db = require('./config/db');\\r\\nconst bcrypt = require('bcrypt');\\r\\n\\r\\nasync function testAuth() {\\r\\n  try {\\r\\n    console.log('üîß Testing database connection and authentication...\\\\n');\\r\\n    \\r\\n    // Test database connection\\r\\n    const pool = db.getConnection();\\r\\n    console.log('‚úÖ Database connection successful');\\r\\n    \\r\\n    // Check if admin user exists\\r\\n    const [users] = await pool.query('SELECT id, email, username, role, is_active, password_hash FROM users WHERE email = ?', ['admin@test.com']);\\r\\n    \\r\\n    if (users.length === 0) {\\r\\n      console.log('‚ùå Admin user not found');\\r\\n      return;\\r\\n    }\\r\\n    \\r\\n    const user = users[0];\\r\\n    console.log('‚úÖ Admin user found:');\\r\\n    console.log(`   ID: ${user.id}`);\\r\\n    console.log(`   Email: ${user.email}`);\\r\\n    console.log(`   Username: ${user.username}`);\\r\\n    console.log(`   Role: ${user.role}`);\\r\\n    console.log(`   Active: ${user.is_active}`);\\r\\n    console.log(`   Password hash exists: ${!!user.password_hash}`);\\r\\n    \\r\\n    // Test password verification\\r\\n    const testPassword = '[REDACTED]';\\r\\n    const match = await bcrypt.compare(testPassword, user.password_hash);\\r\\n    console.log(`   Password test (${testPassword}): ${match ? '‚úÖ MATCH' : '‚ùå NO MATCH'}`);\\r\\n    \\r\\n    // Check session storage table\\r\\n    const [sessions] = await pool.query('SELECT COUNT(*) as count FROM sessions');\\r\\n    console.log(`   Sessions table records: ${sessions[0].count}`);\\r\\n    \\r\\n    console.log('\\\\nüéØ Test complete!');\\r\\n    process.exit(0);\\r\\n    \\r\\n  } catch (error) {\\r\\n    console.error('‚ùå Test failed:', error.message);\\r\\n    console.error(error);\\r\\n    process.exit(1);\\r\\n  }\\r\\n}\\r\\n\\r\\ntestAuth();\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 53,\n      \"codeLines\": 36,\n      \"commentLines\": 5,\n      \"commentRatio\": 0.12195121951219512,\n      \"averageLineLength\": 42.36585365853659\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.800Z\"\n  },\n  \"contentHash\": \"2ec49185648546d7f44739bcfe9c1003f77d05c7f791afa6046d208e05d44f24\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.800Z\"\n}"
    },
    "complexity": {
      "totalLines": 66,
      "codeLines": 66,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 53.03030303030303
    },
    "lastAnalyzed": "2025-07-28T07:19:57.028Z"
  },
  "contentHash": "8d3c5fbd01d934db5000f8dfcade6d94995da4e7a044dc320cb7b716cc33f39f",
  "discoveredAt": "2025-07-28T07:19:57.028Z"
}