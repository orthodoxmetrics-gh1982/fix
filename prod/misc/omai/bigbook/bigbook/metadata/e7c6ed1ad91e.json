{
  "id": "e7c6ed1ad91e",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/browser-session-test.js",
  "relativePath": "server/testing/browser-session-test.js",
  "name": "browser-session-test.js",
  "extension": ".js",
  "size": 12317,
  "modified": "2025-07-12T03:22:51.757Z",
  "created": "2025-07-12T03:21:13.093Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 319,
      "characters": 12241,
      "words": 1206
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "axios",
        "line": 17
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 18
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 22,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Browser Session Permission Test\r\n * \r\n * This script allows you to copy your browser session cookies\r\n * to test permissions with your actual logged-in session.\r\n * \r\n * Usage:\r\n * 1. Login to the app in your browser as superadmin\r\n * 2. Open browser dev tools (F12) \r\n * 3. Go to Application/Storage tab > Cookies\r\n * 4. Copy the session cookie value\r\n * 5. Run: node scripts/browser-session-test.js --cookie \"your-cookie-value\"\r\n */\r\n\r\nconst axios = require('axios');\r\nconst fs = require('fs').promises;\r\n\r\nclass BrowserSessionTest {\r\n  constructor(sessionCookie) {\r\n    this.baseUrl = process.env.[REDACTED] || 'http://localhost:3001';\r\n    this.sessionCookie = sessionCookie;\r\n    this.results = [];\r\n  }\r\n\r\n  async testWithSession(path, description) {\r\n    const url = `${this.baseUrl}${path}`;\r\n    \r\n    try {\r\n      console.log(`🔍 Testing: ${description}`);\r\n      \r\n      const response = await axios.get(url, {\r\n        timeout: 10000,\r\n        headers: {\r\n          'Cookie': this.sessionCookie,\r\n          'User-Agent': 'OrthodoxMetrics-SessionTest/1.0'\r\n        },\r\n        withCredentials: true,\r\n        validateStatus: () => true\r\n      });\r\n\r\n      const result = {\r\n        path,\r\n        description,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        contentType: response.headers['content-type'],\r\n        contentLength: response.headers['content-length'],\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      // Analyze response\r\n      if (response.status >= 200 && response.status < 300) {\r\n        console.log(`✅ ${response.status} - ${description}`);\r\n        result.success = true;\r\n      } else if (response.status === 401) {\r\n        console.log(`🔒 ${response.status} - Authentication failed: ${description}`);\r\n        console.log('   → Your session may have expired or cookies are invalid');\r\n        result.success = false;\r\n        result.issue = 'authentication';\r\n      } else if (response.status === 403) {\r\n        console.log(`🚫 ${response.status} - Permission denied: ${description}`);\r\n        console.log('   → CRITICAL: Superadmin should have access to this!');\r\n        result.success = false;\r\n        result.issue = 'permission';\r\n      } else if (response.status === 404) {\r\n        console.log(`💥 ${response.status} - Not found: ${description}`);\r\n        console.log('   → Route may not exist or be properly configured');\r\n        result.success = false;\r\n        result.issue = 'not_found';\r\n      } else if (response.status >= 500) {\r\n        console.log(`🔥 ${response.status} - Server error: ${description}`);\r\n        console.log('   → Check application logs for details');\r\n        result.success = false;\r\n        result.issue = 'server_error';\r\n      } else {\r\n        console.log(`⚠️  ${response.status} - Unexpected status: ${description}`);\r\n        result.success = false;\r\n        result.issue = 'unexpected';\r\n      }\r\n\r\n      // Log additional details for HTML responses\r\n      if (response.headers['content-type']?.includes('text/html')) {\r\n        if (response.data.includes('login') || response.data.includes('sign-in')) {\r\n          console.log('   → Response contains login form - session likely expired');\r\n          result.containsLogin = true;\r\n        }\r\n        if (response.data.includes('Access Denied') || response.data.includes('Forbidden')) {\r\n          console.log('   → Response contains access denied message');\r\n          result.containsAccessDenied = true;\r\n        }\r\n      }\r\n\r\n      this.results.push(result);\r\n      console.log('');\r\n      return result;\r\n\r\n    } catch (error) {\r\n      const result = {\r\n        path,\r\n        description,\r\n        status: 'ERROR',\r\n        error: error.message,\r\n        success: false,\r\n        issue: 'network_error',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      console.log(`💥 ERROR - ${description}: ${error.message}`);\r\n      this.results.push(result);\r\n      console.log('');\r\n      return result;\r\n    }\r\n  }\r\n\r\n  async runFullTest() {\r\n    console.log('🔐 Browser Session Permission Test');\r\n    console.log('=' .repeat(50));\r\n    console.log('');\r\n\r\n    if (!this.sessionCookie) {\r\n      console.log('❌ No session cookie provided!');\r\n      console.log('');\r\n      console.log('To get your session cookie:');\r\n      console.log('1. Login to the app in your browser');\r\n      console.log('2. Open Developer Tools (F12)');\r\n      console.log('3. Go to Application > Cookies');\r\n      console.log('4. Find the session cookie (usually \"connect.sid\" or similar)');\r\n      console.log('5. Copy the entire value');\r\n      console.log('6. Run: node scripts/browser-session-test.js --cookie \"your-value\"');\r\n      process.exit(1);\r\n    }\r\n\r\n    // Test comprehensive routes\r\n    const routes = [\r\n      // Core pages\r\n      { path: '/', desc: 'Home page' },\r\n      { path: '/dashboard', desc: 'Dashboard' },\r\n      \r\n      // Admin routes (should all work for superadmin)\r\n      { path: '/admin', desc: 'Admin home' },\r\n      { path: '/admin/dashboard', desc: 'Admin dashboard' },\r\n      { path: '/admin/users', desc: 'User management' },\r\n      { path: '/admin/churches', desc: 'Church management' },\r\n      { path: '/admin/template-manager', desc: 'Template manager' },\r\n      { path: '/admin/record-template-manager', desc: 'Record template manager' },\r\n      { path: '/admin/church-admin-panel', desc: 'Church admin panel' },\r\n      { path: '/admin/ocr', desc: 'OCR system' },\r\n      { path: '/admin/logs', desc: 'System logs' },\r\n      { path: '/admin/settings', desc: 'System settings' },\r\n      \r\n      // Records management\r\n      { path: '/records', desc: 'Records home' },\r\n      { path: '/records/baptism', desc: 'Baptism records' },\r\n      { path: '/records/marriage', desc: 'Marriage records' },\r\n      { path: '/records/funeral', desc: 'Funeral records' },\r\n      { path: '/baptism-records', desc: 'Legacy baptism records' },\r\n      { path: '/marriage-records', desc: 'Legacy marriage records' },\r\n      { path: '/funeral-records', desc: 'Legacy funeral records' },\r\n      \r\n      // API endpoints\r\n      { path: '/api/auth/status', desc: 'Auth status API' },\r\n      { path: '/api/templates', desc: 'Templates API' },\r\n      { path: '/api/templates/global/available', desc: 'Global templates API' },\r\n      { path: '/api/churches', desc: 'Churches API' },\r\n      { path: '/api/admin/churches', desc: 'Admin churches API' },\r\n      { path: '/api/users', desc: 'Users API' },\r\n      { path: '/api/baptism-records', desc: 'Baptism records API' },\r\n      { path: '/api/marriage-records', desc: 'Marriage records API' },\r\n      { path: '/api/funeral-records', desc: 'Funeral records API' },\r\n      { path: '/api/admin/logs', desc: 'Admin logs API' },\r\n    ];\r\n\r\n    for (const route of routes) {\r\n      await this.testWithSession(route.path, route.desc);\r\n      await new Promise(resolve => setTimeout(resolve, 300)); // Slow down requests\r\n    }\r\n\r\n    this.generateReport();\r\n  }\r\n\r\n  generateReport() {\r\n    console.log('📊 DETAILED REPORT');\r\n    console.log('=' .repeat(50));\r\n    \r\n    const total = this.results.length;\r\n    const successful = this.results.filter(r => r.success).length;\r\n    const failed = this.results.filter(r => !r.success).length;\r\n    \r\n    // Categorize issues\r\n    const authIssues = this.results.filter(r => r.issue === 'authentication').length;\r\n    const permissionIssues = this.results.filter(r => r.issue === 'permission').length;\r\n    const notFoundIssues = this.results.filter(r => r.issue === 'not_found').length;\r\n    const serverErrorIssues = this.results.filter(r => r.issue === 'server_error').length;\r\n    const networkIssues = this.results.filter(r => r.issue === 'network_error').length;\r\n\r\n    console.log(`Total routes tested: ${total}`);\r\n    console.log(`Successful: ${successful} (${((successful / total) * 100).toFixed(1)}%)`);\r\n    console.log(`Failed: ${failed}`);\r\n    console.log('');\r\n    \r\n    console.log('Issue Breakdown:');\r\n    console.log(`• Authentication failures: ${authIssues}`);\r\n    console.log(`• Permission denied: ${permissionIssues}`);\r\n    console.log(`• Routes not found: ${notFoundIssues}`);\r\n    console.log(`• Server errors: ${serverErrorIssues}`);\r\n    console.log(`• Network errors: ${networkIssues}`);\r\n    console.log('');\r\n\r\n    // Critical issues that need immediate attention\r\n    if (permissionIssues > 0) {\r\n      console.log('🚨 CRITICAL PERMISSION ISSUES:');\r\n      this.results.filter(r => r.issue === 'permission').forEach(r => {\r\n        console.log(`   ❌ ${r.status} - ${r.path} (${r.description})`);\r\n      });\r\n      console.log('   → These routes should be accessible to superadmin!');\r\n      console.log('');\r\n    }\r\n\r\n    if (authIssues > 0) {\r\n      console.log('🔒 AUTHENTICATION ISSUES:');\r\n      this.results.filter(r => r.issue === 'authentication').forEach(r => {\r\n        console.log(`   ❌ ${r.status} - ${r.path} (${r.description})`);\r\n      });\r\n      console.log('   → Check if session is valid and not expired');\r\n      console.log('');\r\n    }\r\n\r\n    if (serverErrorIssues > 0) {\r\n      console.log('🔥 SERVER ERRORS:');\r\n      this.results.filter(r => r.issue === 'server_error').forEach(r => {\r\n        console.log(`   ❌ ${r.status} - ${r.path} (${r.description})`);\r\n      });\r\n      console.log('   → Check application logs for stack traces');\r\n      console.log('');\r\n    }\r\n\r\n    // Recommendations\r\n    console.log('💡 NEXT STEPS:');\r\n    console.log('-'.repeat(30));\r\n    \r\n    if (permissionIssues > 0) {\r\n      console.log('1. Check user role in database:');\r\n      console.log('   SELECT id, email, role, is_active FROM users WHERE email = \"superadmin@orthodoxmetrics.com\"');\r\n      console.log('2. Verify user has superadmin role and is_active = 1');\r\n      console.log('3. Check route middleware and permission checks');\r\n    }\r\n    \r\n    if (authIssues > 0) {\r\n      console.log('1. Login again in your browser to refresh session');\r\n      console.log('2. Get a fresh session cookie and re-run this test');\r\n      console.log('3. Check session configuration in the application');\r\n    }\r\n    \r\n    if (notFoundIssues > 0) {\r\n      console.log('1. Check if routes are properly defined in app routing');\r\n      console.log('2. Verify frontend build is up to date');\r\n      console.log('3. Check if any routes have been moved or renamed');\r\n    }\r\n\r\n    console.log('');\r\n    console.log('✅ Test complete!');\r\n    \r\n    // Save detailed results\r\n    this.saveResults();\r\n  }\r\n\r\n  async saveResults() {\r\n    try {\r\n      const reportPath = `./logs/session-test-${Date.now()}.json`;\r\n      await fs.mkdir('./logs', { recursive: true });\r\n      await fs.writeFile(reportPath, JSON.stringify({\r\n        timestamp: new Date().toISOString(),\r\n        baseUrl: this.baseUrl,\r\n        results: this.results,\r\n        summary: {\r\n          total: this.results.length,\r\n          successful: this.results.filter(r => r.success).length,\r\n          failed: this.results.filter(r => !r.success).length,\r\n          issues: {\r\n            authentication: this.results.filter(r => r.issue === 'authentication').length,\r\n            permission: this.results.filter(r => r.issue === 'permission').length,\r\n            not_found: this.results.filter(r => r.issue === 'not_found').length,\r\n            server_error: this.results.filter(r => r.issue === 'server_error').length,\r\n            network_error: this.results.filter(r => r.issue === 'network_error').length,\r\n          }\r\n        }\r\n      }, null, 2));\r\n      \r\n      console.log(`📄 Detailed results saved to: ${reportPath}`);\r\n    } catch (error) {\r\n      console.log('⚠️  Could not save detailed results:', error.message);\r\n    }\r\n  }\r\n}\r\n\r\n// Parse command line arguments\r\nconst args = process.argv.slice(2);\r\nlet sessionCookie = null;\r\n\r\nfor (let i = 0; i < args.length; i++) {\r\n  if (args[i] === '--cookie' && args[i + 1]) {\r\n    sessionCookie = args[i + 1];\r\n    break;\r\n  }\r\n}\r\n\r\n// Run the test\r\nif (require.main === module) {\r\n  const tester = new BrowserSessionTest(sessionCookie);\r\n  tester.runFullTest().catch(error => {\r\n    console.error('❌ Test failed:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = BrowserSessionTest;\r\n"
    },
    "complexity": {
      "totalLines": 319,
      "codeLines": 251,
      "commentLines": 27,
      "commentRatio": 0.09712230215827339,
      "averageLineLength": 42.52158273381295
    },
    "lastAnalyzed": "2025-07-28T07:20:01.178Z"
  },
  "contentHash": "13a0993d3c480004375f1526b2d9979e5571f7d31287a27f0b51797b0991afa9",
  "discoveredAt": "2025-07-28T07:20:01.178Z"
}