{
  "id": "f5ad261dd891",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/36c446139938.json",
  "relativePath": "bigbook/metadata/36c446139938.json",
  "name": "36c446139938.json",
  "extension": ".json",
  "size": 14763,
  "modified": "2025-07-26T04:17:11.034Z",
  "created": "2025-07-26T04:17:11.034Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 61,
      "characters": 14737,
      "words": 1262
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 48
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 48
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 48,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"36c446139938\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/admin/church-users.js\",\n  \"relativePath\": \"server/routes/admin/church-users.js\",\n  \"name\": \"church-users.js\",\n  \"extension\": \".js\",\n  \"size\": 12525,\n  \"modified\": \"2025-07-22T09:09:40.723Z\",\n  \"created\": \"2025-07-22T09:09:38.828Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 7\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 357,\n      \"characters\": 12499,\n      \"words\": 1168\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 7\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"express\",\n        \"line\": 2\n      },\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"bcrypt\",\n        \"line\": 4\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 286,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// server/routes/admin/church-users.js - Church-Specific User Management Routes\\r\\nconst express = require('express');\\r\\nconst router = express.Router();\\r\\nconst bcrypt = require('bcrypt');\\r\\nconst { promisePool } = require('../../config/db');\\r\\nconst { requireAuth, requireRole } = require('../../middleware/auth');\\r\\n\\r\\n// Middleware for admin access\\r\\nconst requireAdmin = requireRole(['admin', 'super_admin']);\\r\\n\\r\\n/**\\r\\n * Standardized API response helper\\r\\n */\\r\\nfunction apiResponse(success, data = null, error = null, meta = null) {\\r\\n    const response = { success };\\r\\n    if (data) response.data = data;\\r\\n    if (error) response.error = error;\\r\\n    if (meta) response.meta = meta;\\r\\n    return response;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Validates church access and existence\\r\\n */\\r\\nasync function validateChurchAccess(churchId) {\\r\\n    const [churches] = await promisePool.query(\\r\\n        'SELECT id, name FROM churches WHERE id = ? AND is_active = 1',\\r\\n        [churchId]\\r\\n    );\\r\\n    \\r\\n    if (churches.length === 0) {\\r\\n        throw new Error('Church not found or inactive');\\r\\n    }\\r\\n    \\r\\n    return churches[0];\\r\\n}\\r\\n\\r\\n/**\\r\\n * Validates user assignment to church\\r\\n */\\r\\nasync function validateUserChurchAssignment(userId, churchId) {\\r\\n    const [assignments] = await promisePool.query(\\r\\n        'SELECT u.id, u.email FROM users u JOIN church_users cu ON u.id = cu.user_id WHERE u.id = ? AND cu.church_id = ?',\\r\\n        [userId, churchId]\\r\\n    );\\r\\n    \\r\\n    if (assignments.length === 0) {\\r\\n        throw new Error('User not found or not assigned to this church');\\r\\n    }\\r\\n    \\r\\n    return assignments[0];\\r\\n}\\r\\n\\r\\n// GET /api/admin/church-users/:churchId - Get users for a specific church\\r\\nrouter.get('/:churchId', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        console.log('👥 Getting users for church ID:', churchId);\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Get users assigned to this church via junction table\\r\\n        const [users] = await promisePool.query(`\\r\\n            SELECT \\r\\n                u.id, \\r\\n                u.email, \\r\\n                u.first_name, \\r\\n                u.last_name, \\r\\n                u.role as system_role, \\r\\n                u.is_active, \\r\\n                u.last_login, \\r\\n                u.created_at, \\r\\n                u.updated_at,\\r\\n                cu.role as church_role\\r\\n            FROM church_users cu\\r\\n            JOIN users u ON cu.user_id = u.id\\r\\n            WHERE cu.church_id = ?\\r\\n            ORDER BY u.created_at DESC\\r\\n        `, [churchId]);\\r\\n\\r\\n        res.json(apiResponse(true, { \\r\\n            users,\\r\\n            church_id: churchId,\\r\\n            total_users: users.length \\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error getting church users:', error);\\r\\n        res.status(error.message.includes('not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\n// POST /api/admin/church-users/:churchId - Add new user to church\\r\\nrouter.post('/:churchId', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        const { email, first_name, last_name, role, is_active = true, phone, landing_page, password } = req.body;\\r\\n        \\r\\n        console.log('👤 Adding new user to church ID:', churchId);\\r\\n\\r\\n        // Validate required fields\\r\\n        if (!email || !first_name || !last_name || !role || !password) {\\r\\n            return res.status(400).json(\\r\\n                apiResponse(false, null, 'Missing required fields: email, first_name, last_name, role, password')\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Check if user already exists\\r\\n        const [existingUsers] = await promisePool.query(\\r\\n            'SELECT id FROM users WHERE email = ?',\\r\\n            [email]\\r\\n        );\\r\\n\\r\\n        if (existingUsers.length > 0) {\\r\\n            return res.status(400).json(\\r\\n                apiResponse(false, null, 'User with this email already exists in the system')\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Hash password\\r\\n        const hashedPassword = await bcrypt.hash(password, 10);\\r\\n\\r\\n        // Insert user into orthodoxmetrics_db.users\\r\\n        const [result] = await promisePool.query(`\\r\\n            INSERT INTO users \\r\\n            (email, first_name, last_name, phone, role, is_active, landing_page, password_hash, church_id, created_at, updated_at)\\r\\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\\r\\n        `, [email, first_name, last_name, phone, role, is_active, landing_page, hashedPassword, churchId]);\\r\\n\\r\\n        const newUserId = result.insertId;\\r\\n\\r\\n        // Assign user to church via church_users junction table\\r\\n        await promisePool.query(\\r\\n            'INSERT INTO church_users (church_id, user_id, role) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE role = VALUES(role)',\\r\\n            [churchId, newUserId, role]\\r\\n        );\\r\\n\\r\\n        console.log(`✅ User created and assigned to church ${churchId}`);\\r\\n\\r\\n        res.status(201).json(apiResponse(true, {\\r\\n            user_id: newUserId,\\r\\n            message: 'User created and assigned to church successfully'\\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error adding user to church:', error);\\r\\n        res.status(error.message.includes('not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\n// PUT /api/admin/church-users/:churchId/:userId - Update church user\\r\\nrouter.put('/:churchId/:userId', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        const userId = parseInt(req.params.userId);\\r\\n        const { email, first_name, last_name, role, is_active, phone, landing_page, password } = req.body;\\r\\n        \\r\\n        console.log('👤 Updating user ID:', userId, 'in church ID:', churchId);\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Validate user exists in system\\r\\n        const [existingUsers] = await promisePool.query(\\r\\n            'SELECT id FROM users WHERE id = ?',\\r\\n            [userId]\\r\\n        );\\r\\n\\r\\n        if (existingUsers.length === 0) {\\r\\n            return res.status(404).json(\\r\\n                apiResponse(false, null, 'User not found')\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Prepare update query for orthodoxmetrics_db.users\\r\\n        let updateFields = [];\\r\\n        let updateValues = [];\\r\\n\\r\\n        if (email) {\\r\\n            updateFields.push('email = ?');\\r\\n            updateValues.push(email);\\r\\n        }\\r\\n        if (first_name) {\\r\\n            updateFields.push('first_name = ?');\\r\\n            updateValues.push(first_name);\\r\\n        }\\r\\n        if (last_name) {\\r\\n            updateFields.push('last_name = ?');\\r\\n            updateValues.push(last_name);\\r\\n        }\\r\\n        if (role) {\\r\\n            updateFields.push('role = ?');\\r\\n            updateValues.push(role);\\r\\n        }\\r\\n        if (typeof is_active === 'boolean') {\\r\\n            updateFields.push('is_active = ?');\\r\\n            updateValues.push(is_active);\\r\\n        }\\r\\n        if (phone) {\\r\\n            updateFields.push('phone = ?');\\r\\n            updateValues.push(phone);\\r\\n        }\\r\\n        if (landing_page) {\\r\\n            updateFields.push('landing_page = ?');\\r\\n            updateValues.push(landing_page);\\r\\n        }\\r\\n        if (password) {\\r\\n            const hashedPassword = await bcrypt.hash(password, 10);\\r\\n            updateFields.push('password_hash = ?');\\r\\n            updateValues.push(hashedPassword);\\r\\n        }\\r\\n\\r\\n        if (updateFields.length === 0) {\\r\\n            return res.status(400).json(\\r\\n                apiResponse(false, null, 'No valid fields provided for update')\\r\\n            );\\r\\n        }\\r\\n\\r\\n        updateFields.push('updated_at = NOW()');\\r\\n        updateValues.push(userId);\\r\\n\\r\\n        // Update user in orthodoxmetrics_db.users\\r\\n        await promisePool.query(`\\r\\n            UPDATE users SET ${updateFields.join(', ')} WHERE id = ?\\r\\n        `, updateValues);\\r\\n\\r\\n        // Update church role if provided\\r\\n        if (role) {\\r\\n            await promisePool.query(\\r\\n                'UPDATE church_users SET role = ? WHERE church_id = ? AND user_id = ?',\\r\\n                [role, churchId, userId]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        res.json(apiResponse(true, {\\r\\n            message: 'User updated successfully',\\r\\n            user_id: userId\\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error updating church user:', error);\\r\\n        res.status(error.message.includes('not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\n// POST /api/admin/church-users/:churchId/:userId/reset-password - Reset user password\\r\\nrouter.post('/:churchId/:userId/reset-password', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        const userId = parseInt(req.params.userId);\\r\\n        \\r\\n        console.log('🔑 Resetting password for user ID:', userId, 'in church ID:', churchId);\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Validate user assignment to church\\r\\n        await validateUserChurchAssignment(userId, churchId);\\r\\n\\r\\n        // Generate new password\\r\\n        const newPassword = Math.random().toString(36).slice(-8);\\r\\n        const hashedPassword = await bcrypt.hash(newPassword, 10);\\r\\n\\r\\n        // Update user password in orthodoxmetrics_db.users\\r\\n        await promisePool.query(\\r\\n            'UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\\r\\n            [hashedPassword, userId]\\r\\n        );\\r\\n\\r\\n        res.json(apiResponse(true, {\\r\\n            message: 'Password reset successfully',\\r\\n            new_password: newPassword\\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error resetting password:'[REDACTED]'not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\n// POST /api/admin/church-users/:churchId/:userId/lock - Lock user account\\r\\nrouter.post('/:churchId/:userId/lock', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        const userId = parseInt(req.params.userId);\\r\\n\\r\\n        console.log('🔒 Locking user ID:', userId, 'in church ID:', churchId);\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Validate user assignment to church\\r\\n        await validateUserChurchAssignment(userId, churchId);\\r\\n\\r\\n        // Lock user account in orthodoxmetrics_db.users\\r\\n        await promisePool.query(\\r\\n            'UPDATE users SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\\r\\n            [userId]\\r\\n        );\\r\\n\\r\\n        res.json(apiResponse(true, {\\r\\n            message: 'User account locked successfully'\\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error locking user:', error);\\r\\n        res.status(error.message.includes('not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\n// POST /api/admin/church-users/:churchId/:userId/unlock - Unlock user account\\r\\nrouter.post('/:churchId/:userId/unlock', requireAuth, requireAdmin, async (req, res) => {\\r\\n    try {\\r\\n        const churchId = parseInt(req.params.churchId);\\r\\n        const userId = parseInt(req.params.userId);\\r\\n\\r\\n        console.log('🔓 Unlocking user ID:', userId, 'in church ID:', churchId);\\r\\n\\r\\n        // Validate church exists\\r\\n        await validateChurchAccess(churchId);\\r\\n\\r\\n        // Validate user assignment to church\\r\\n        await validateUserChurchAssignment(userId, churchId);\\r\\n\\r\\n        // Unlock user account in orthodoxmetrics_db.users\\r\\n        await promisePool.query(\\r\\n            'UPDATE users SET is_active = 1, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\\r\\n            [userId]\\r\\n        );\\r\\n\\r\\n        res.json(apiResponse(true, {\\r\\n            message: 'User account unlocked successfully'\\r\\n        }));\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Error unlocking user:', error);\\r\\n        res.status(error.message.includes('not found') ? 404 : 500).json(\\r\\n            apiResponse(false, null, error.message)\\r\\n        );\\r\\n    }\\r\\n});\\r\\n\\r\\nmodule.exports = router; \"\n    },\n    \"complexity\": {\n      \"totalLines\": 357,\n      \"codeLines\": 255,\n      \"commentLines\": 40,\n      \"commentRatio\": 0.13559322033898305,\n      \"averageLineLength\": 40.81694915254237\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.034Z\"\n  },\n  \"contentHash\": \"b54260f796f0af0b5977aac4f94ee3dd5891ef2860eb295106a88901e6d67e00\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.034Z\"\n}"
    },
    "complexity": {
      "totalLines": 61,
      "codeLines": 61,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 240.60655737704917
    },
    "lastAnalyzed": "2025-07-28T07:19:56.846Z"
  },
  "contentHash": "e1bfc90014dba8f2379e0dfe6e80508769e9d197f9aa592a2adb50683672aa5e",
  "discoveredAt": "2025-07-28T07:19:56.846Z"
}