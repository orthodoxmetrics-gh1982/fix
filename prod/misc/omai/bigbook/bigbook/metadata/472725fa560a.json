{
  "id": "472725fa560a",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/controllers/churchAdminController.js",
  "relativePath": "server/controllers/churchAdminController.js",
  "name": "churchAdminController.js",
  "extension": ".js",
  "size": 9607,
  "modified": "2025-07-17T18:26:01.279Z",
  "created": "2025-07-10T20:23:27.773Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 271,
      "characters": 9607,
      "words": 1117
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 4
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 131,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// controllers/churchAdminController.js\r\nconst { getChurchDbConnection } = require('../utils/dbSwitcher');\r\nconst { promisePool } = require('../../config/db'); // central DB connection (orthodoxmetrics_db)\r\nconst bcrypt = require('bcrypt');\r\n\r\n/**\r\n * Get comprehensive church overview data\r\n * Fetches church metadata from central DB and church-specific data from church DB\r\n */\r\nexports.getChurchOverview = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    \r\n    // Step 1: Lookup church metadata from central database\r\n    const [rows] = await promisePool.query('SELECT * FROM churches WHERE id = ?', [churchId]);\r\n    if (!rows.length) {\r\n      return res.status(404).json({ error: 'Church not found' });\r\n    }\r\n\r\n    const church = rows[0];\r\n    \r\n    // Step 2: Get connection to church-specific database\r\n    const db = await getChurchDbConnection(church.database_name);\r\n\r\n    // Step 3: Fetch data from church database\r\n    try {\r\n      // Church info\r\n      const [[info]] = await db.query('SELECT * FROM church_info WHERE church_id = ?', [churchId]);\r\n      \r\n      // Admin users\r\n      const [users] = await db.query(\"SELECT id, name, email, role FROM users WHERE role = 'admin' OR role = 'super_admin'\");\r\n      \r\n      // Record counts\r\n      const [[baptismCount]] = await db.query('SELECT COUNT(*) as count FROM baptism_records WHERE church_id = ?', [churchId]);\r\n      const [[marriageCount]] = await db.query('SELECT COUNT(*) as count FROM marriage_records WHERE church_id = ?', [churchId]);\r\n      const [[funeralCount]] = await db.query('SELECT COUNT(*) as count FROM funeral_records WHERE church_id = ?', [churchId]);\r\n      \r\n      // Recent activity logs\r\n      const [logs] = await db.query('SELECT * FROM activity_log WHERE church_id = ? ORDER BY created_at DESC LIMIT 10', [churchId]);\r\n      \r\n      // Recent invoices\r\n      const [invoices] = await db.query('SELECT * FROM invoice_history WHERE church_id = ? ORDER BY date DESC LIMIT 5', [churchId]);\r\n\r\n      res.json({\r\n        metadata: church,\r\n        info: info || {},\r\n        adminUsers: users || [],\r\n        counts: {\r\n          baptisms: baptismCount?.count || 0,\r\n          marriages: marriageCount?.count || 0,\r\n          funerals: funeralCount?.count || 0,\r\n        },\r\n        activityLog: logs || [],\r\n        invoices: invoices || [],\r\n      });\r\n    } catch (dbError) {\r\n      console.error(`Error querying church database ${church.database_name}:`, dbError);\r\n      \r\n      // Return basic church metadata even if church DB queries fail\r\n      res.json({\r\n        metadata: church,\r\n        info: {},\r\n        adminUsers: [],\r\n        counts: {\r\n          baptisms: 0,\r\n          marriages: 0,\r\n          funerals: 0,\r\n        },\r\n        activityLog: [],\r\n        invoices: [],\r\n        warning: 'Some church data could not be retrieved'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in getChurchOverview:', error);\r\n    res.status(500).json({ \r\n      error: 'Failed to fetch church overview',\r\n      details: error.message \r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Reset user password in church-specific database\r\n */\r\nexports.resetUserPassword = async (req, res) => {\r\n  try {\r\n    const { userId, newPassword } = req.body;\r\n    const churchId = req.params.id;\r\n\r\n    if (!userId || !newPassword) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required fields: userId and newPassword' \r\n      });\r\n    }\r\n\r\n    // Step 1: Get church database name from central database\r\n    const [rows] = await promisePool.query('SELECT database_name FROM churches WHERE id = ?', [churchId]);\r\n    if (!rows.length) {\r\n      return res.status(404).json({ error: 'Church not found' });\r\n    }\r\n\r\n    // Step 2: Get connection to church-specific database\r\n    const db = await getChurchDbConnection(rows[0].database_name);\r\n\r\n    // Step 3: Verify user exists in church database\r\n    const [userCheck] = await db.query('SELECT id, name, email FROM users WHERE id = ?', [userId]);\r\n    if (!userCheck.length) {\r\n      return res.status(404).json({ error: 'User not found in church database' });\r\n    }\r\n\r\n    // Step 4: Hash new password and update\r\n    const hash = await bcrypt.hash(newPassword, 10);\r\n    await db.query('UPDATE users SET password = ? WHERE id = ?', [hash, userId]);\r\n\r\n    // Step 5: Log the password reset activity\r\n    try {\r\n      await db.query(\r\n        'INSERT INTO activity_log (church_id, user_id, action, details, created_at) VALUES (?, ?, ?, ?, NOW())',\r\n        [churchId, userId, 'password_reset', `Password reset for user ${userCheck[0].name} (${userCheck[0].email})`]\r\n      );\r\n    } catch (logError) {\r\n      console.warn('Failed to log password reset activity:', logError);\r\n    }\r\n\r\n    res.json({ \r\n      success: true,\r\n      message: `Password successfully reset for user ${userCheck[0].name}`\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in resetUserPassword:'[REDACTED]'Failed to reset password',\r\n      details: error.message \r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Get church records by type (baptism, marriage, funeral)\r\n */\r\nexports.getChurchRecords = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    const recordType = req.params.recordType;\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 50;\r\n    const offset = (page - 1) * limit;\r\n\r\n    // Validate record type\r\n    const validTypes = ['baptism', 'marriage', 'funeral'];\r\n    if (!validTypes.includes(recordType)) {\r\n      return res.status(400).json({ \r\n        error: 'Invalid record type. Must be: baptism, marriage, or funeral' \r\n      });\r\n    }\r\n\r\n    // Get church database name\r\n    const [rows] = await promisePool.query('SELECT database_name FROM churches WHERE id = ?', [churchId]);\r\n    if (!rows.length) {\r\n      return res.status(404).json({ error: 'Church not found' });\r\n    }\r\n\r\n    // Get connection to church-specific database\r\n    const db = await getChurchDbConnection(rows[0].database_name);\r\n\r\n    // Build table name\r\n    const tableName = `${recordType}_records`;\r\n\r\n    // Get records with pagination\r\n    const [records] = await db.query(\r\n      `SELECT * FROM ${tableName} WHERE church_id = ? ORDER BY created_at DESC LIMIT ? OFFSET ?`,\r\n      [churchId, limit, offset]\r\n    );\r\n\r\n    // Get total count for pagination\r\n    const [[countResult]] = await db.query(\r\n      `SELECT COUNT(*) as total FROM ${tableName} WHERE church_id = ?`,\r\n      [churchId]\r\n    );\r\n\r\n    res.json({\r\n      records: records || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: countResult?.total || 0,\r\n        pages: Math.ceil((countResult?.total || 0) / limit)\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in getChurchRecords:', error);\r\n    res.status(500).json({ \r\n      error: 'Failed to fetch church records',\r\n      details: error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Update advanced config for a church\r\nexports.updateChurchConfig = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    const fields = [\r\n      'records_database_name', 'avatar_dir', 'ocr_upload_dir', 'calendar_type',\r\n      'show_fast_days', 'show_local_saints', 'feast_overrides_path', 'theme_color',\r\n      'logo_path', 'banner_path', 'favicon_path', 'enable_ocr', 'enable_certificates',\r\n      'enable_liturgical_calendar', 'enable_invoicing', 'enable_audit_logs', 'slug', 'name'\r\n    ];\r\n    const updates = [];\r\n    const values = [];\r\n    fields.forEach(field => {\r\n      if (field in req.body) {\r\n        updates.push(`${field} = ?`);\r\n        values.push(req.body[field]);\r\n      }\r\n    });\r\n    if (updates.length === 0) return res.status(400).json({ error: 'No valid fields to update' });\r\n    values.push(churchId);\r\n    await promisePool.query(`UPDATE churches SET ${updates.join(', ')} WHERE id = ?`, values);\r\n    res.json({ success: true });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to update church config', details: err.message });\r\n  }\r\n};\r\n\r\n// List assigned users for a church\r\nexports.listAssignedUsers = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    const [users] = await promisePool.query(\r\n      `SELECT u.id, u.name, u.email, cu.role FROM church_users cu JOIN users u ON cu.user_id = u.id WHERE cu.church_id = ?`,\r\n      [churchId]\r\n    );\r\n    res.json({ users });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to list assigned users', details: err.message });\r\n  }\r\n};\r\n\r\n// Assign user to church\r\nexports.assignUserToChurch = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    const { user_id, role } = req.body;\r\n    if (!user_id || !role) return res.status(400).json({ error: 'user_id and role required' });\r\n    await promisePool.query(\r\n      `INSERT INTO church_users (church_id, user_id, role) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE role = VALUES(role)`,\r\n      [churchId, user_id, role]\r\n    );\r\n    res.json({ success: true });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to assign user', details: err.message });\r\n  }\r\n};\r\n\r\n// Remove user from church\r\nexports.removeUserFromChurch = async (req, res) => {\r\n  try {\r\n    const churchId = req.params.id;\r\n    const userId = req.params.userId;\r\n    await promisePool.query(\r\n      `DELETE FROM church_users WHERE church_id = ? AND user_id = ?`,\r\n      [churchId, userId]\r\n    );\r\n    res.json({ success: true });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Failed to remove user', details: err.message });\r\n  }\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 271,
      "codeLines": 204,
      "commentLines": 35,
      "commentRatio": 0.14644351464435146,
      "averageLineLength": 38.77824267782427
    },
    "lastAnalyzed": "2025-07-28T07:19:59.547Z"
  },
  "contentHash": "ff68a0352abc9419de6afb178987f9062df8d3eef51e50812be35d6469256daa",
  "discoveredAt": "2025-07-28T07:19:59.547Z"
}