{
  "id": "eb4aa6b86ca4",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/createReactSite.js",
  "relativePath": "server/utils/createReactSite.js",
  "name": "createReactSite.js",
  "extension": ".js",
  "size": 17909,
  "modified": "2025-07-06T03:11:10.000Z",
  "created": "2025-07-09T00:48:38.526Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 536,
      "characters": 17903,
      "words": 1420
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "fs",
        "line": 4
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "util",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "react",
        "line": 286
      },
      {
        "type": "npm_package",
        "name": "react-bootstrap",
        "line": 287
      },
      {
        "type": "npm_package",
        "name": "react-router-dom",
        "line": 288
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// React Site Creation Utility\r\n// Creates localized React instances for provisioned churches\r\n\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\nconst { exec } = require('child_process');\r\nconst { promisify } = require('util');\r\nconst execAsync = promisify(exec);\r\nconst logger = require('./logger');\r\n\r\nconst TEMPLATE_DIR = path.join(__dirname, '../../templates');\r\nconst CHURCHES_DIR = path.join(__dirname, '../../public/churches');\r\nconst BASE_URL = process.env.[REDACTED] || 'https://orthodoxmetrics.com';\r\n\r\n// Language-specific template configurations\r\nconst LANGUAGE_CONFIGS = {\r\n  en: {\r\n    templateDir: 'react-site-en',\r\n    name: 'English',\r\n    rtl: false,\r\n    dateFormat: 'MM/DD/YYYY',\r\n    currency: 'USD'\r\n  },\r\n  gr: {\r\n    templateDir: 'react-site-gr',\r\n    name: 'Greek',\r\n    rtl: false,\r\n    dateFormat: 'DD/MM/YYYY',\r\n    currency: 'EUR'\r\n  },\r\n  ru: {\r\n    templateDir: 'react-site-ru',\r\n    name: 'Russian',\r\n    rtl: false,\r\n    dateFormat: 'DD.MM.YYYY',\r\n    currency: 'RUB'\r\n  },\r\n  ro: {\r\n    templateDir: 'react-site-ro',\r\n    name: 'Romanian',\r\n    rtl: false,\r\n    dateFormat: 'DD.MM.YYYY',\r\n    currency: 'RON'\r\n  }\r\n};\r\n\r\n// Create React site for a church\r\nasync function createReactSite({ queueId, siteSlug, language, churchData }) {\r\n  try {\r\n    logger.info(`Starting React site creation for ${siteSlug} in ${language}`);\r\n\r\n    const config = LANGUAGE_CONFIGS[language] || LANGUAGE_CONFIGS.en;\r\n    const templatePath = path.join(TEMPLATE_DIR, config.templateDir);\r\n    const sitePath = path.join(CHURCHES_DIR, siteSlug);\r\n    const siteUrl = `${BASE_URL}/churches/${siteSlug}`;\r\n\r\n    // Ensure template exists\r\n    try {\r\n      await fs.access(templatePath);\r\n    } catch (error) {\r\n      // If template doesn't exist, create it from base template\r\n      await createLanguageTemplate(language, config);\r\n    }\r\n\r\n    // Ensure churches directory exists\r\n    await fs.mkdir(CHURCHES_DIR, { recursive: true });\r\n\r\n    // Check if site already exists\r\n    try {\r\n      await fs.access(sitePath);\r\n      logger.warn(`Site directory already exists: ${sitePath}`);\r\n      // Clean up existing directory\r\n      await fs.rm(sitePath, { recursive: true, force: true });\r\n    } catch (error) {\r\n      // Directory doesn't exist, which is good\r\n    }\r\n\r\n    // Copy template to site directory\r\n    await copyDirectory(templatePath, sitePath);\r\n\r\n    // Customize the site\r\n    await customizeSite(sitePath, {\r\n      siteSlug,\r\n      language,\r\n      config,\r\n      churchData,\r\n      siteUrl\r\n    });\r\n\r\n    // Build the site\r\n    await buildSite(sitePath);\r\n\r\n    logger.info(`React site created successfully: ${siteUrl}`);\r\n\r\n    return {\r\n      success: true,\r\n      siteUrl,\r\n      sitePath,\r\n      language,\r\n      buildTime: new Date().toISOString()\r\n    };\r\n\r\n  } catch (error) {\r\n    logger.error(`Failed to create React site for ${siteSlug}:`, error);\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n// Create language template if it doesn't exist\r\nasync function createLanguageTemplate(language, config) {\r\n  const baseTemplatePath = path.join(TEMPLATE_DIR, 'react-site-base');\r\n  const languageTemplatePath = path.join(TEMPLATE_DIR, config.templateDir);\r\n\r\n  try {\r\n    // Copy base template\r\n    await copyDirectory(baseTemplatePath, languageTemplatePath);\r\n\r\n    // Load language-specific customizations\r\n    const i18nPath = path.join(__dirname, `../../data/i18n/site/${language}.json`);\r\n    let translations = {};\r\n\r\n    try {\r\n      const i18nContent = await fs.readFile(i18nPath, 'utf8');\r\n      translations = JSON.parse(i18nContent);\r\n    } catch (error) {\r\n      logger.warn(`No translations found for ${language}, using English defaults`);\r\n      const englishPath = path.join(__dirname, '../../data/i18n/site/en.json');\r\n      const englishContent = await fs.readFile(englishPath, 'utf8');\r\n      translations = JSON.parse(englishContent);\r\n    }\r\n\r\n    // Customize template for language\r\n    await customizeLanguageTemplate(languageTemplatePath, {\r\n      language,\r\n      config,\r\n      translations\r\n    });\r\n\r\n    logger.info(`Created language template for ${language}`);\r\n\r\n  } catch (error) {\r\n    logger.error(`Failed to create language template for ${language}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Customize language template\r\nasync function customizeLanguageTemplate(templatePath, { language, config, translations }) {\r\n  // Update package.json\r\n  const packageJsonPath = path.join(templatePath, 'package.json');\r\n  const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));\r\n  packageJson.name = `orthodox-church-${language}`;\r\n  packageJson.description = `Orthodox Metrics - ${config.name}`;\r\n  await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));\r\n\r\n  // Update language configuration\r\n  const configPath = path.join(templatePath, 'src/config/language.js');\r\n  const configContent = `\r\nexport const LANGUAGE_CONFIG = {\r\n  code: '${language}',\r\n  name: '${config.name}',\r\n  rtl: ${config.rtl},\r\n  dateFormat: '${config.dateFormat}',\r\n  currency: '${config.currency}',\r\n  translations: ${JSON.stringify(translations, null, 2)}\r\n};\r\n\r\nexport default LANGUAGE_CONFIG;\r\n`;\r\n  await fs.writeFile(configPath, configContent);\r\n\r\n  // Update HTML lang attribute\r\n  const indexHtmlPath = path.join(templatePath, 'public/index.html');\r\n  let indexHtml = await fs.readFile(indexHtmlPath, 'utf8');\r\n  indexHtml = indexHtml.replace(/lang=\"en\"/, `lang=\"${language}\"`);\r\n  indexHtml = indexHtml.replace(/<title>.*<\\/title>/, `<title>${translations.siteTitle || 'Orthodox Metrics'}</title>`);\r\n  await fs.writeFile(indexHtmlPath, indexHtml);\r\n}\r\n\r\n// Customize site for specific church\r\nasync function customizeSite(sitePath, { siteSlug, language, config, churchData, siteUrl }) {\r\n  // Update package.json with church-specific info\r\n  const packageJsonPath = path.join(sitePath, 'package.json');\r\n  const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));\r\n  packageJson.name = `${siteSlug}-church-site`;\r\n  packageJson.description = `${churchData.name} - Orthodox Metrics`;\r\n  await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));\r\n\r\n  // Create church-specific configuration\r\n  const churchConfigPath = path.join(sitePath, 'src/config/church.js');\r\n  const churchConfig = `\r\nexport const CHURCH_CONFIG = {\r\n  slug: '${siteSlug}',\r\n  name: '${churchData.name}',\r\n  location: '${churchData.location}',\r\n  email: '${churchData.email}',\r\n  siteUrl: '${siteUrl}',\r\n  language: '${language}',\r\n  createdAt: '${new Date().toISOString()}',\r\n  \r\n  // API Configuration\r\n  apiBaseUrl: '${BASE_URL}/api',\r\n  apiPrefix: '/churches/${siteSlug}',\r\n  \r\n  // Feature Configuration\r\n  features: {\r\n    baptismRecords: true,\r\n    marriageRecords: true,\r\n    funeralRecords: true,\r\n    liturgicalCalendar: true,\r\n    billing: true,\r\n    userManagement: true,\r\n    analytics: true\r\n  },\r\n  \r\n  // UI Configuration\r\n  theme: {\r\n    primaryColor: '#8B4513',\r\n    secondaryColor: '#DAA520',\r\n    backgroundColor: '#F5F5DC',\r\n    textColor: '#333333'\r\n  }\r\n};\r\n\r\nexport default CHURCH_CONFIG;\r\n`;\r\n  await fs.writeFile(churchConfigPath, churchConfig);\r\n\r\n  // Update index.html with church info\r\n  const indexHtmlPath = path.join(sitePath, 'public/index.html');\r\n  let indexHtml = await fs.readFile(indexHtmlPath, 'utf8');\r\n\r\n  // Update title and meta tags\r\n  indexHtml = indexHtml.replace(\r\n    /<title>.*<\\/title>/,\r\n    `<title>${churchData.name} - Orthodox Metrics</title>`\r\n  );\r\n\r\n  // Add church-specific meta tags\r\n  const metaTags = `\r\n    <meta name=\"description\" content=\"${churchData.name} - Orthodox Metrics in ${churchData.location}\">\r\n    <meta name=\"keywords\" content=\"orthodox church, ${churchData.name}, church management, ${churchData.location}\">\r\n    <meta property=\"og:title\" content=\"${churchData.name} - Orthodox Metrics\">\r\n    <meta property=\"og:description\" content=\"Church management system for ${churchData.name} in ${churchData.location}\">\r\n    <meta property=\"og:url\" content=\"${siteUrl}\">\r\n    <meta property=\"og:type\" content=\"website\">\r\n  `;\r\n\r\n  indexHtml = indexHtml.replace('</head>', `${metaTags}\\n</head>`);\r\n  await fs.writeFile(indexHtmlPath, indexHtml);\r\n\r\n  // Update .env file with church-specific variables\r\n  const envPath = path.join(sitePath, '.env');\r\n  const envContent = `\r\nREACT_APP_CHURCH_SLUG=${siteSlug}\r\nREACT_APP_CHURCH_NAME=${churchData.name}\r\nREACT_APP_LANGUAGE=${language}\r\nREACT_APP_API_BASE_URL=${BASE_URL}/api\r\nREACT_APP_SITE_URL=${siteUrl}\r\nREACT_APP_BUILD_TIME=${new Date().toISOString()}\r\n`;\r\n  await fs.writeFile(envPath, envContent.trim());\r\n\r\n  // Create custom landing page\r\n  await createLandingPage(sitePath, { churchData, language, config });\r\n\r\n  // Update manifest.json\r\n  const manifestPath = path.join(sitePath, 'public/manifest.json');\r\n  if (await fileExists(manifestPath)) {\r\n    const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));\r\n    manifest.name = `${churchData.name} - Orthodox Metrics`;\r\n    manifest.short_name = churchData.name;\r\n    manifest.start_url = `/?utm_source=pwa&utm_medium=homescreen&church=${siteSlug}`;\r\n    await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));\r\n  }\r\n}\r\n\r\n// Create custom landing page\r\nasync function createLandingPage(sitePath, { churchData, language, config }) {\r\n  const landingPagePath = path.join(sitePath, 'src/pages/Landing.jsx');\r\n\r\n  const landingPageContent = `\r\nimport React from 'react';\r\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from '../hooks/useTranslation';\r\n\r\nconst Landing = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div className=\"landing-page\">\r\n      {/* Hero Section */}\r\n      <section className=\"hero-section bg-primary text-white py-5\">\r\n        <Container>\r\n          <Row className=\"align-items-center\">\r\n            <Col lg={8}>\r\n              <h1 className=\"display-4 mb-4\">\r\n                ${churchData.name}\r\n              </h1>\r\n              <p className=\"lead mb-4\">\r\n                ${churchData.location}\r\n              </p>\r\n              <p className=\"mb-4\">\r\n                {t('welcome.description', 'Welcome to our Orthodox Metrics')}\r\n              </p>\r\n              <Button as={Link} to=\"/login\" variant=\"light\" size=\"lg\" className=\"me-3\">\r\n                {t('navigation.login', 'Login')}\r\n              </Button>\r\n              <Button as={Link} to=\"/pages/calendar\" variant=\"outline-light\" size=\"lg\">\r\n                {t('navigation.calendar', 'View Calendar')}\r\n              </Button>\r\n            </Col>\r\n            <Col lg={4}>\r\n              <Card className=\"text-dark\">\r\n                <Card.Body>\r\n                  <Card.Title>{t('contact.title', 'Contact Information')}</Card.Title>\r\n                  <Card.Text>\r\n                    <strong>{t('contact.email', 'Email')}:</strong><br />\r\n                    <a href=\"mailto:${churchData.email}\">${churchData.email}</a>\r\n                  </Card.Text>\r\n                  <Card.Text>\r\n                    <strong>{t('contact.location', 'Location')}:</strong><br />\r\n                    ${churchData.location}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n\r\n      {/* Features Section */}\r\n      <section className=\"features-section py-5\">\r\n        <Container>\r\n          <h2 className=\"text-center mb-5\">{t('features.title', 'Church Management Features')}</h2>\r\n          <Row>\r\n            <Col md={4} className=\"mb-4\">\r\n              <Card className=\"h-100\">\r\n                <Card.Body className=\"text-center\">\r\n                  <div className=\"feature-icon mb-3\">\r\n                    👶\r\n                  </div>\r\n                  <Card.Title>{t('features.baptism', 'Baptism Records')}</Card.Title>\r\n                  <Card.Text>\r\n                    {t('features.baptismDesc', 'Manage and track baptism records with digital certificates')}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col md={4} className=\"mb-4\">\r\n              <Card className=\"h-100\">\r\n                <Card.Body className=\"text-center\">\r\n                  <div className=\"feature-icon mb-3\">\r\n                    💒\r\n                  </div>\r\n                  <Card.Title>{t('features.marriage', 'Marriage Records')}</Card.Title>\r\n                  <Card.Text>\r\n                    {t('features.marriageDesc', 'Track marriage ceremonies and generate certificates')}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col md={4} className=\"mb-4\">\r\n              <Card className=\"h-100\">\r\n                <Card.Body className=\"text-center\">\r\n                  <div className=\"feature-icon mb-3\">\r\n                    📅\r\n                  </div>\r\n                  <Card.Title>{t('features.calendar', 'Liturgical Calendar')}</Card.Title>\r\n                  <Card.Text>\r\n                    {t('features.calendarDesc', 'Orthodox liturgical calendar with feast days and saints')}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n\r\n      {/* Quick Links Section */}\r\n      <section className=\"quick-links-section bg-light py-5\">\r\n        <Container>\r\n          <h2 className=\"text-center mb-5\">{t('quickLinks.title', 'Quick Access')}</h2>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={8}>\r\n              <Row>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Button \r\n                    as={Link} \r\n                    to=\"/pages/baptismrecords\" \r\n                    variant=\"outline-primary\" \r\n                    className=\"w-100\"\r\n                  >\r\n                    {t('navigation.baptismRecords', 'Baptism Records')}\r\n                  </Button>\r\n                </Col>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Button \r\n                    as={Link} \r\n                    to=\"/pages/marriagerecords\" \r\n                    variant=\"outline-primary\" \r\n                    className=\"w-100\"\r\n                  >\r\n                    {t('navigation.marriageRecords', 'Marriage Records')}\r\n                  </Button>\r\n                </Col>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Button \r\n                    as={Link} \r\n                    to=\"/pages/funeralrecords\" \r\n                    variant=\"outline-primary\" \r\n                    className=\"w-100\"\r\n                  >\r\n                    {t('navigation.funeralRecords', 'Funeral Records')}\r\n                  </Button>\r\n                </Col>\r\n                <Col sm={6} className=\"mb-3\">\r\n                  <Button \r\n                    as={Link} \r\n                    to=\"/pages/calendar\" \r\n                    variant=\"outline-primary\" \r\n                    className=\"w-100\"\r\n                  >\r\n                    {t('navigation.calendar', 'Liturgical Calendar')}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n`;\r\n\r\n  await fs.writeFile(landingPagePath, landingPageContent);\r\n}\r\n\r\n// Build the React site\r\nasync function buildSite(sitePath) {\r\n  try {\r\n    logger.info(`Building React site at ${sitePath}`);\r\n\r\n    // Install dependencies if needed\r\n    const nodeModulesPath = path.join(sitePath, 'node_modules');\r\n    try {\r\n      await fs.access(nodeModulesPath);\r\n    } catch (error) {\r\n      logger.info('Installing npm dependencies...');\r\n      await execAsync('npm install', { cwd: sitePath });\r\n    }\r\n\r\n    // Build the site\r\n    const { stdout, stderr } = await execAsync('npm run build', {\r\n      cwd: sitePath,\r\n      timeout: 300000 // 5 minutes timeout\r\n    });\r\n\r\n    if (stderr && !stderr.includes('warning')) {\r\n      throw new Error(`Build failed: ${stderr}`);\r\n    }\r\n\r\n    logger.info(`Site built successfully: ${stdout}`);\r\n\r\n  } catch (error) {\r\n    logger.error(`Failed to build site at ${sitePath}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Copy directory recursively\r\nasync function copyDirectory(src, dest) {\r\n  const entries = await fs.readdir(src, { withFileTypes: true });\r\n\r\n  await fs.mkdir(dest, { recursive: true });\r\n\r\n  for (const entry of entries) {\r\n    const srcPath = path.join(src, entry.name);\r\n    const destPath = path.join(dest, entry.name);\r\n\r\n    if (entry.isDirectory()) {\r\n      await copyDirectory(srcPath, destPath);\r\n    } else {\r\n      await fs.copyFile(srcPath, destPath);\r\n    }\r\n  }\r\n}\r\n\r\n// Check if file exists\r\nasync function fileExists(filePath) {\r\n  try {\r\n    await fs.access(filePath);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Create base templates for all languages (run once during setup)\r\nasync function initializeTemplates() {\r\n  try {\r\n    logger.info('Initializing React site templates...');\r\n\r\n    for (const [language, config] of Object.entries(LANGUAGE_CONFIGS)) {\r\n      const templatePath = path.join(TEMPLATE_DIR, config.templateDir);\r\n\r\n      try {\r\n        await fs.access(templatePath);\r\n        logger.info(`Template already exists for ${language}`);\r\n      } catch (error) {\r\n        logger.info(`Creating template for ${language}...`);\r\n        await createLanguageTemplate(language, config);\r\n      }\r\n    }\r\n\r\n    logger.info('Template initialization completed');\r\n\r\n  } catch (error) {\r\n    logger.error('Failed to initialize templates:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  createReactSite,\r\n  initializeTemplates,\r\n  LANGUAGE_CONFIGS\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 536,
      "codeLines": 432,
      "commentLines": 40,
      "commentRatio": 0.0847457627118644,
      "averageLineLength": 36.65042372881356
    },
    "lastAnalyzed": "2025-07-28T07:20:01.238Z"
  },
  "contentHash": "5abd1de10805a14120a1c13338557ad3cb1981e685e171011dbe14baf1b72346",
  "discoveredAt": "2025-07-28T07:20:01.238Z"
}