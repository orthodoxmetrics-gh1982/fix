{
  "id": "f17e573fe495",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/database/verify_ocr_migration.js",
  "relativePath": "server/database/verify_ocr_migration.js",
  "name": "verify_ocr_migration.js",
  "extension": ".js",
  "size": 4263,
  "modified": "2025-07-24T14:51:40.504Z",
  "created": "2025-07-24T14:51:40.504Z",
  "classification": {
    "type": "Database Scripts",
    "category": "Backend > Database",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 102,
      "characters": 4213,
      "words": 409
    },
    "classification": {
      "type": "Database Scripts",
      "category": "Backend > Database",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 6
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 17,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 18,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 19,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 20,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// OCR Database Migration Verification Script\r\n// Tests the new orthodoxmetrics_ocr_db configuration\r\n// Date: July 19, 2025\r\n\r\nconst mysql = require('mysql2/promise');\r\nrequire('dotenv').config();\r\n\r\nasync function verifyOcrMigration() {\r\n    console.log('üîç Verifying OCR Database Migration...');\r\n    console.log('=====================================');\r\n\r\n    let connection = null;\r\n    \r\n    try {\r\n        // Test connection to new OCR database\r\n        connection = await mysql.createConnection({\r\n            host: process.env.[REDACTED] || 'localhost',\r\n            user: process.env.[REDACTED] || 'orthodoxapps',\r\n            password: process.env.[REDACTED] || 'Summerof1982@!',\r\n            database: process.env.[REDACTED] || 'orthodoxmetrics_ocr_db',\r\n            timezone: '+00:00'\r\n        });\r\n\r\n        console.log('‚úÖ Successfully connected to OCR database');\r\n\r\n        // Verify table structure\r\n        const tables = await connection.execute('SHOW TABLES');\r\n        console.log(`üìä Found ${tables[0].length} tables in OCR database:`);\r\n        \r\n        for (const table of tables[0]) {\r\n            const tableName = Object.values(table)[0];\r\n            const [rows] = await connection.execute(`SELECT COUNT(*) as count FROM ${tableName}`);\r\n            console.log(`   üìã ${tableName}: ${rows[0].count} records`);\r\n        }\r\n\r\n        // Test OCR settings table\r\n        console.log('\\nüõ†Ô∏è  Testing OCR Settings Configuration...');\r\n        const [settings] = await connection.execute('SELECT * FROM ocr_settings LIMIT 5');\r\n        \r\n        if (settings.length > 0) {\r\n            console.log('‚úÖ OCR settings found:');\r\n            settings.forEach((setting, index) => {\r\n                console.log(`   ${index + 1}. ID: ${setting.id}, Church: ${setting.church_id || 'Global'}, Type: ${setting.ocr_type}`);\r\n            });\r\n        } else {\r\n            console.log('‚ö†Ô∏è  No OCR settings found - this is normal for a fresh migration');\r\n        }\r\n\r\n        // Test OCR jobs table\r\n        console.log('\\nüìã Testing OCR Jobs Table...');\r\n        const [jobs] = await connection.execute('SELECT * FROM ocr_jobs ORDER BY created_at DESC LIMIT 3');\r\n        \r\n        if (jobs.length > 0) {\r\n            console.log('‚úÖ Recent OCR jobs found:');\r\n            jobs.forEach((job, index) => {\r\n                console.log(`   ${index + 1}. ID: ${job.id}, Status: ${job.status}, Created: ${job.created_at}`);\r\n            });\r\n        } else {\r\n            console.log('‚ö†Ô∏è  No OCR jobs found - this is normal for a fresh migration');\r\n        }\r\n\r\n        // Test OCR queue table\r\n        console.log('\\nüîÑ Testing OCR Queue Table...');\r\n        const [queue] = await connection.execute('SELECT * FROM ocr_queue LIMIT 3');\r\n        \r\n        if (queue.length > 0) {\r\n            console.log('‚úÖ OCR queue items found:');\r\n            queue.forEach((item, index) => {\r\n                console.log(`   ${index + 1}. ID: ${item.id}, Status: ${item.status}, Priority: ${item.priority}`);\r\n            });\r\n        } else {\r\n            console.log('‚úÖ OCR queue is empty - ready for new processing');\r\n        }\r\n\r\n        console.log('\\nüéâ OCR Database Migration Verification SUCCESSFUL!');\r\n        console.log('   ‚úì Database connection working');\r\n        console.log('   ‚úì All required tables present');\r\n        console.log('   ‚úì OCR system ready for operation');\r\n\r\n    } catch (error) {\r\n        console.error('‚ùå OCR Database Migration Verification FAILED:');\r\n        console.error('Error details:', error.message);\r\n        \r\n        if (error.code === 'ER_ACCESS_DENIED_ERROR') {\r\n            console.error('üîê Access denied - check OCR database credentials in .env file');\r\n        } else if (error.code === 'ER_BAD_DB_ERROR') {\r\n            console.error('üóÑÔ∏è  Database not found - run the migration script first');\r\n        } else if (error.code === 'ECONNREFUSED') {\r\n            console.error('üîå Connection refused - check if MySQL server is running');\r\n        }\r\n        \r\n        process.exit(1);\r\n    } finally {\r\n        if (connection) {\r\n            await connection.end();\r\n        }\r\n    }\r\n}\r\n\r\n// Run verification\r\nverifyOcrMigration().catch(console.error);\r\n"
    },
    "complexity": {
      "totalLines": 102,
      "codeLines": 74,
      "commentLines": 9,
      "commentRatio": 0.10843373493975904,
      "averageLineLength": 48.69879518072289
    },
    "lastAnalyzed": "2025-07-28T07:20:00.054Z"
  },
  "contentHash": "3d059c1d90803ddd288e3c5059cd44032cd7888482bc51153215147dd4f0efa2",
  "discoveredAt": "2025-07-28T07:20:00.054Z"
}