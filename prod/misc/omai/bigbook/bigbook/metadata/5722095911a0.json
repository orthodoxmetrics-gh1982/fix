{
  "id": "5722095911a0",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/session-cookie-test.js",
  "relativePath": "server/debug/session-cookie-test.js",
  "name": "session-cookie-test.js",
  "extension": ".js",
  "size": 5434,
  "modified": "2025-07-24T14:50:26.364Z",
  "created": "2025-07-24T14:50:26.364Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 163,
      "characters": 5398,
      "words": 492
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 9
      },
      {
        "type": "npm_package",
        "name": "express-session",
        "line": 11
      },
      {
        "type": "npm_package",
        "name": "express-mysql-session",
        "line": 12
      },
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 92
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:secret|token)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 19,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 6,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 18,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 19,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 20,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 21,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 24,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 38,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 39,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 40,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 41,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 42,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 94,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 95,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 96,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 97,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 98,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/debug/session-cookie-test.js\r\nconst express = require('express');\r\nconst path = require('path');\r\n\r\n// Load environment\r\nconst envFile = process.env.[REDACTED] === 'production' \r\n  ? '../.env.production' \r\n  : '../.env.development';\r\nrequire('dotenv').config({ path: path.resolve(__dirname, envFile) });\r\n\r\nconst session = require('express-session');\r\nconst MySQLStore = require('express-mysql-session')(session);\r\n\r\nconsole.log('üîç Orthodox Metrics Session Cookie Diagnostic');\r\nconsole.log('==============================================');\r\n\r\nconsole.log('\\nüìã Environment:');\r\nconsole.log('NODE_ENV:', process.env.[REDACTED]);\r\nconsole.log('SESSION_SECRET:'[REDACTED]'SET' : 'NOT SET');\r\nconsole.log('DB_HOST:', process.env.[REDACTED]);\r\nconsole.log('DB_NAME:', process.env.[REDACTED]);\r\n\r\nconsole.log('\\nüç™ Cookie Configuration Test:');\r\nconst isProduction = process.env.[REDACTED] === 'production';\r\nconsole.log('Production mode:', isProduction);\r\nconsole.log('Secure cookies:', isProduction);\r\nconsole.log('SameSite:', 'lax');\r\nconsole.log('Domain:', isProduction ? '.orthodoxmetrics.com' : 'undefined');\r\nconsole.log('HttpOnly:', true);\r\nconsole.log('MaxAge:', '24 hours');\r\n\r\n// Test database connection for sessions\r\nasync function testSessionStore() {\r\n  try {\r\n    console.log('\\nüóÑÔ∏è  Session Store Test:');\r\n    \r\n    const dbOptions = {\r\n      host: process.env.[REDACTED] || '0.0.0.0',\r\n      port: process.env.[REDACTED] || 3306,\r\n      user: process.env.[REDACTED] || 'orthodoxapps',\r\n      password: process.env.[REDACTED] || 'Summerof1982@!',\r\n      database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n    };\r\n\r\n    const store = new MySQLStore(dbOptions);\r\n    \r\n    console.log('‚úÖ Session store created successfully');\r\n    \r\n    // Test store operations\r\n    const testSessionId = 'test-session-' + Date.now();\r\n    const testData = { user: { id: 1, email: 'test@example.com' } };\r\n    \r\n    await new Promise((resolve, reject) => {\r\n      store.set(testSessionId, testData, (err) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n    \r\n    console.log('‚úÖ Session write test passed');\r\n    \r\n    const retrievedData = await new Promise((resolve, reject) => {\r\n      store.get(testSessionId, (err, data) => {\r\n        if (err) reject(err);\r\n        else resolve(data);\r\n      });\r\n    });\r\n    \r\n    console.log('‚úÖ Session read test passed');\r\n    console.log('   Retrieved data:', retrievedData);\r\n    \r\n    // Clean up test session\r\n    await new Promise((resolve, reject) => {\r\n      store.destroy(testSessionId, (err) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n    \r\n    console.log('‚úÖ Session cleanup test passed');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Session store test failed:', error.message);\r\n  }\r\n}\r\n\r\n// Test actual session table\r\nasync function testSessionTable() {\r\n  try {\r\n    console.log('\\nüìä Session Table Test:');\r\n    \r\n    const mysql = require('mysql2/promise');\r\n    const connection = await mysql.createConnection({\r\n      host: process.env.[REDACTED] || '0.0.0.0',\r\n      port: process.env.[REDACTED] || 3306,\r\n      user: process.env.[REDACTED] || 'orthodoxapps',\r\n      password: process.env.[REDACTED] || 'Summerof1982@!',\r\n      database: process.env.[REDACTED] || 'orthodoxmetrics_db',\r\n    });\r\n\r\n    // Check if sessions table exists\r\n    const [tables] = await connection.execute(\r\n      \"SHOW TABLES LIKE 'sessions'\"\r\n    );\r\n    \r\n    if (tables.length === 0) {\r\n      console.log('‚ùå Sessions table does not exist');\r\n      return;\r\n    }\r\n    \r\n    console.log('‚úÖ Sessions table exists');\r\n    \r\n    // Check table structure\r\n    const [structure] = await connection.execute('DESCRIBE sessions');\r\n    console.log('üìã Sessions table structure:');\r\n    structure.forEach(col => {\r\n      console.log(`   ${col.Field}: ${col.Type}`);\r\n    });\r\n    \r\n    // Check active sessions\r\n    const [sessions] = await connection.execute(\r\n      'SELECT COUNT(*) as total, COUNT(CASE WHEN FROM_UNIXTIME(expires) > NOW() THEN 1 END) as active FROM sessions'\r\n    );\r\n    \r\n    console.log(`üìà Sessions: ${sessions[0].total} total, ${sessions[0].active} active`);\r\n    \r\n    // Check recent sessions\r\n    const [recentSessions] = await connection.execute(`\r\n      SELECT session_id, FROM_UNIXTIME(expires) as expires_readable, \r\n             CHAR_LENGTH(data) as data_size\r\n      FROM sessions \r\n      ORDER BY expires DESC \r\n      LIMIT 5\r\n    `);\r\n    \r\n    console.log('üïí Recent sessions:');\r\n    recentSessions.forEach(session => {\r\n      console.log(`   ${session.session_id}: expires ${session.expires_readable}, size ${session.data_size} bytes`);\r\n    });\r\n    \r\n    await connection.end();\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Session table test failed:', error.message);\r\n  }\r\n}\r\n\r\n// Run all tests\r\nasync function runDiagnostics() {\r\n  await testSessionStore();\r\n  await testSessionTable();\r\n  \r\n  console.log('\\nüöÄ Recommendations:');\r\n  console.log('1. Ensure NODE_ENV=production is set before starting server');\r\n  console.log('2. Clear browser cookies for orthodoxmetrics.com');\r\n  console.log('3. Use HTTPS in production (required for secure cookies)');\r\n  console.log('4. Check browser Network tab for cookie headers');\r\n  console.log('5. Verify session.config is using correct settings');\r\n  \r\n  process.exit(0);\r\n}\r\n\r\nrunDiagnostics(); "
    },
    "complexity": {
      "totalLines": 163,
      "codeLines": 119,
      "commentLines": 11,
      "commentRatio": 0.08461538461538462,
      "averageLineLength": 39.37692307692308
    },
    "lastAnalyzed": "2025-07-28T07:20:00.204Z"
  },
  "contentHash": "a576711892ddd067d426acd16e6f26f002ea2444d5396866f424266f36a209c0",
  "discoveredAt": "2025-07-28T07:20:00.204Z"
}