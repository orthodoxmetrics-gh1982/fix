{
  "id": "5a4a61b6fc48",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/AUTOMATED_CLIENT_CREATION_SYSTEM.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/AUTOMATED_CLIENT_CREATION_SYSTEM.md",
  "name": "AUTOMATED_CLIENT_CREATION_SYSTEM.md",
  "extension": ".md",
  "size": 26833,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:04.772Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 8
  },
  "metadata": {
    "fileStats": {
      "lines": 823,
      "characters": 26755,
      "words": 2302
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 8
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 254
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 255
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 256
      },
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 257
      },
      {
        "type": "npm_package",
        "name": "util",
        "line": 258
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 436
      },
      {
        "type": "npm_package",
        "name": "crypto",
        "line": 571
      },
      {
        "type": "npm_package",
        "name": "express",
        "line": 665
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 264,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 265,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 266,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 355,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 356,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 357,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 593,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Automated Client Site Creation System - Enterprise Architecture\r\n\r\n## System Overview\r\n\r\nThis is a **full-scale SaaS deployment system** that automatically creates:\r\n- ✅ **Separate databases** per client\r\n- ✅ **Complete church management sites** \r\n- ✅ **Subdomain routing**\r\n- ✅ **Custom branding & configuration**\r\n- ✅ **User accounts & permissions**\r\n- ✅ **Billing integration**\r\n\r\n## Architecture Components\r\n\r\n### 1. **Master Control System (Orthodox Metrics)**\r\n\r\n```\r\nMaster Database (orthodoxmetrics_master)\r\n├── clients                    # Client registry\r\n├── templates                  # Available templates\r\n├── deployments               # Deployment tracking\r\n├── billing_subscriptions     # Billing data\r\n├── support_tickets          # Customer support\r\n└── system_monitoring        # Health monitoring\r\n```\r\n\r\n### 2. **Client Database Creation System**\r\n\r\n```\r\nPer-Client Databases:\r\n├── ssppoc_church_db         # Saints Peter & Paul\r\n├── stmary_church_db         # St. Mary Orthodox\r\n├── holytrinity_church_db    # Holy Trinity Cathedral\r\n├── stnicolas_church_db      # St. Nicolas Orthodox\r\n└── [client_slug]_church_db  # Dynamic client databases\r\n```\r\n\r\n### 3. **Template Deployment Pipeline**\r\n\r\n```\r\nDeployment Process:\r\n1. Client Registration\r\n2. Database Creation\r\n3. Schema Deployment\r\n4. Template Customization\r\n5. User Account Setup\r\n6. Domain Configuration\r\n7. SSL Certificate\r\n8. Health Verification\r\n9. Go-Live Notification\r\n```\r\n\r\n## Technical Implementation\r\n\r\n### 1. **Master Database Schema**\r\n\r\n```sql\r\n-- Master control database\r\nCREATE DATABASE orthodoxmetrics_master;\r\nUSE orthodoxmetrics_master;\r\n\r\n-- Client registry\r\nCREATE TABLE clients (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(255) NOT NULL,\r\n    slug VARCHAR(100) UNIQUE NOT NULL,\r\n    database_name VARCHAR(100) UNIQUE NOT NULL,\r\n    subdomain VARCHAR(100) UNIQUE NOT NULL,\r\n    domain VARCHAR(255) NULL,\r\n    template_id INT NOT NULL,\r\n    status ENUM('pending', 'deploying', 'active', 'suspended', 'deleted') DEFAULT 'pending',\r\n    subscription_tier ENUM('trial', 'basic', 'premium', 'enterprise') DEFAULT 'trial',\r\n    contact_email VARCHAR(255) NOT NULL,\r\n    contact_phone VARCHAR(50),\r\n    contact_address TEXT,\r\n    branding_config JSON,\r\n    feature_flags JSON,\r\n    deployment_config JSON,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    activated_at TIMESTAMP NULL,\r\n    suspended_at TIMESTAMP NULL,\r\n    billing_id VARCHAR(100),\r\n    INDEX idx_slug (slug),\r\n    INDEX idx_subdomain (subdomain),\r\n    INDEX idx_status (status)\r\n);\r\n\r\n-- Template definitions\r\nCREATE TABLE templates (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(100) NOT NULL,\r\n    description TEXT,\r\n    version VARCHAR(20) NOT NULL,\r\n    schema_sql LONGTEXT NOT NULL,\r\n    config_schema JSON,\r\n    features JSON,\r\n    pricing JSON,\r\n    is_active BOOLEAN DEFAULT true,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Deployment tracking\r\nCREATE TABLE deployments (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    client_id INT NOT NULL,\r\n    status ENUM('queued', 'running', 'completed', 'failed') DEFAULT 'queued',\r\n    step_current VARCHAR(100),\r\n    step_total INT,\r\n    step_completed INT,\r\n    logs LONGTEXT,\r\n    error_message TEXT,\r\n    started_at TIMESTAMP NULL,\r\n    completed_at TIMESTAMP NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (client_id) REFERENCES clients(id)\r\n);\r\n\r\n-- Billing subscriptions\r\nCREATE TABLE billing_subscriptions (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    client_id INT NOT NULL,\r\n    stripe_subscription_id VARCHAR(100),\r\n    status VARCHAR(50),\r\n    plan_id VARCHAR(100),\r\n    current_period_start DATETIME,\r\n    current_period_end DATETIME,\r\n    trial_end DATETIME,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (client_id) REFERENCES clients(id)\r\n);\r\n```\r\n\r\n### 2. **Client Database Template Schema**\r\n\r\n```sql\r\n-- Template for each client database\r\n-- This gets executed for every new client\r\nCREATE DATABASE {CLIENT_DATABASE_NAME};\r\nUSE {CLIENT_DATABASE_NAME};\r\n\r\n-- Church information\r\nCREATE TABLE church_info (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    name VARCHAR(255) NOT NULL,\r\n    address TEXT,\r\n    phone VARCHAR(50),\r\n    email VARCHAR(255),\r\n    website VARCHAR(255),\r\n    logo_url VARCHAR(500),\r\n    primary_color VARCHAR(7) DEFAULT '#1976d2',\r\n    secondary_color VARCHAR(7) DEFAULT '#dc004e',\r\n    language VARCHAR(5) DEFAULT 'en',\r\n    timezone VARCHAR(50) DEFAULT 'America/New_York',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Users for this church\r\nCREATE TABLE users (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    email VARCHAR(255) UNIQUE NOT NULL,\r\n    password_hash VARCHAR(255) NOT NULL,\r\n    first_name VARCHAR(100),\r\n    last_name VARCHAR(100),\r\n    role ENUM('admin', 'priest', 'deacon', 'secretary', 'viewer') DEFAULT 'viewer',\r\n    is_active BOOLEAN DEFAULT true,\r\n    last_login TIMESTAMP NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    INDEX idx_email (email),\r\n    INDEX idx_role (role)\r\n);\r\n\r\n-- Baptism records\r\nCREATE TABLE baptism_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(100) NOT NULL,\r\n    last_name VARCHAR(100) NOT NULL,\r\n    birth_date DATE,\r\n    reception_date DATE NOT NULL,\r\n    birthplace VARCHAR(150),\r\n    entry_type VARCHAR(50),\r\n    sponsors TEXT,\r\n    parents TEXT NOT NULL,\r\n    clergy VARCHAR(150) NOT NULL,\r\n    certificate_number VARCHAR(50),\r\n    notes TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    INDEX idx_reception_date (reception_date),\r\n    INDEX idx_names (last_name, first_name)\r\n);\r\n\r\n-- Marriage records\r\nCREATE TABLE marriage_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    groom_first_name VARCHAR(100) NOT NULL,\r\n    groom_last_name VARCHAR(100) NOT NULL,\r\n    groom_birth_date DATE,\r\n    bride_first_name VARCHAR(100) NOT NULL,\r\n    bride_last_name VARCHAR(100) NOT NULL,\r\n    bride_birth_date DATE,\r\n    marriage_date DATE NOT NULL,\r\n    marriage_place VARCHAR(150),\r\n    witnesses TEXT,\r\n    clergy VARCHAR(150) NOT NULL,\r\n    certificate_number VARCHAR(50),\r\n    notes TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    INDEX idx_marriage_date (marriage_date),\r\n    INDEX idx_groom_name (groom_last_name, groom_first_name),\r\n    INDEX idx_bride_name (bride_last_name, bride_first_name)\r\n);\r\n\r\n-- Funeral records\r\nCREATE TABLE funeral_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(100) NOT NULL,\r\n    last_name VARCHAR(100) NOT NULL,\r\n    birth_date DATE,\r\n    death_date DATE NOT NULL,\r\n    funeral_date DATE,\r\n    death_place VARCHAR(150),\r\n    funeral_place VARCHAR(150),\r\n    burial_place VARCHAR(150),\r\n    clergy VARCHAR(150),\r\n    notes TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    INDEX idx_death_date (death_date),\r\n    INDEX idx_funeral_date (funeral_date),\r\n    INDEX idx_names (last_name, first_name)\r\n);\r\n\r\n-- Cemetery records\r\nCREATE TABLE cemetery_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    plot VARCHAR(20) NOT NULL,\r\n    first_name VARCHAR(100) NOT NULL,\r\n    last_name VARCHAR(100) NOT NULL,\r\n    date_of_birth DATE,\r\n    date_of_death DATE,\r\n    burial_date DATE,\r\n    notes TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    INDEX idx_plot (plot),\r\n    INDEX idx_names (last_name, first_name)\r\n);\r\n```\r\n\r\n### 3. **Automated Deployment System**\r\n\r\n```javascript\r\n// services/ClientDeploymentService.js\r\nconst mysql = require('mysql2/promise');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\nconst { exec } = require('child_process');\r\nconst util = require('util');\r\nconst execAsync = util.promisify(exec);\r\n\r\nclass ClientDeploymentService {\r\n    constructor() {\r\n        this.masterDb = mysql.createPool({\r\n            host: process.env.[REDACTED],\r\n            user: process.env.[REDACTED],\r\n            password: process.env.[REDACTED],\r\n            database: 'orthodoxmetrics_master'\r\n        });\r\n    }\r\n\r\n    async createClient(clientData) {\r\n        const deployment = await this.startDeployment(clientData);\r\n        \r\n        try {\r\n            // Step 1: Create database\r\n            await this.createClientDatabase(deployment);\r\n            \r\n            // Step 2: Deploy schema\r\n            await this.deployDatabaseSchema(deployment);\r\n            \r\n            // Step 3: Insert initial data\r\n            await this.insertInitialData(deployment);\r\n            \r\n            // Step 4: Create admin user\r\n            await this.createAdminUser(deployment);\r\n            \r\n            // Step 5: Configure subdomain\r\n            await this.configureSubdomain(deployment);\r\n            \r\n            // Step 6: Deploy frontend\r\n            await this.deployFrontend(deployment);\r\n            \r\n            // Step 7: Configure SSL\r\n            await this.configureSSL(deployment);\r\n            \r\n            // Step 8: Health check\r\n            await this.performHealthCheck(deployment);\r\n            \r\n            // Step 9: Activate client\r\n            await this.activateClient(deployment);\r\n            \r\n            return deployment;\r\n            \r\n        } catch (error) {\r\n            await this.markDeploymentFailed(deployment.id, error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async startDeployment(clientData) {\r\n        const slug = this.generateSlug(clientData.name);\r\n        const databaseName = `${slug}_church_db`;\r\n        const subdomain = slug;\r\n\r\n        // Insert client record\r\n        const [result] = await this.masterDb.execute(`\r\n            INSERT INTO clients (name, slug, database_name, subdomain, template_id, \r\n                               contact_email, contact_phone, contact_address, \r\n                               branding_config, status)\r\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending')\r\n        `, [\r\n            clientData.name,\r\n            slug,\r\n            databaseName,\r\n            subdomain,\r\n            clientData.templateId || 1,\r\n            clientData.contactEmail,\r\n            clientData.contactPhone || null,\r\n            clientData.contactAddress || null,\r\n            JSON.stringify(clientData.branding || {})\r\n        ]);\r\n\r\n        const clientId = result.insertId;\r\n\r\n        // Create deployment record\r\n        const [deployResult] = await this.masterDb.execute(`\r\n            INSERT INTO deployments (client_id, status, step_total)\r\n            VALUES (?, 'queued', 9)\r\n        `, [clientId]);\r\n\r\n        return {\r\n            id: deployResult.insertId,\r\n            clientId,\r\n            slug,\r\n            databaseName,\r\n            subdomain,\r\n            ...clientData\r\n        };\r\n    }\r\n\r\n    async createClientDatabase(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'creating_database', 1);\r\n        \r\n        const rootDb = mysql.createPool({\r\n            host: process.env.[REDACTED],\r\n            user: process.env.[REDACTED],\r\n            password: process.env.[REDACTED]\r\n        });\r\n\r\n        // Create database\r\n        await rootDb.execute(`CREATE DATABASE ${deployment.databaseName}`);\r\n        \r\n        // Create database user\r\n        const dbUser = `${deployment.slug}_user`;\r\n        const dbPassword = this.generateSecurePassword();\r\n        \r\n        await rootDb.execute(`\r\n            CREATE USER '${dbUser}'@'%' IDENTIFIED BY '${dbPassword}'\r\n        `);\r\n        \r\n        await rootDb.execute(`\r\n            GRANT ALL PRIVILEGES ON ${deployment.databaseName}.* TO '${dbUser}'@'%'\r\n        `);\r\n        \r\n        await rootDb.execute('FLUSH PRIVILEGES');\r\n        \r\n        // Store database credentials\r\n        await this.masterDb.execute(`\r\n            UPDATE clients SET deployment_config = JSON_SET(\r\n                COALESCE(deployment_config, '{}'),\r\n                '$.database.user', ?,\r\n                '$.database.password', ?\r\n            ) WHERE id = ?\r\n        `, [dbUser, dbPassword, deployment.clientId]);\r\n        \r\n        await rootDb.end();\r\n    }\r\n\r\n    async deployDatabaseSchema(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'deploying_schema', 2);\r\n        \r\n        // Get template schema\r\n        const [templates] = await this.masterDb.execute(\r\n            'SELECT schema_sql FROM templates WHERE id = ?',\r\n            [deployment.templateId || 1]\r\n        );\r\n        \r\n        const schemaSql = templates[0].schema_sql\r\n            .replace(/{CLIENT_DATABASE_NAME}/g, deployment.databaseName);\r\n        \r\n        // Execute schema\r\n        const clientDb = await this.getClientDbConnection(deployment);\r\n        const statements = schemaSql.split(';').filter(stmt => stmt.trim());\r\n        \r\n        for (const statement of statements) {\r\n            if (statement.trim()) {\r\n                await clientDb.execute(statement);\r\n            }\r\n        }\r\n        \r\n        await clientDb.end();\r\n    }\r\n\r\n    async insertInitialData(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'inserting_initial_data', 3);\r\n        \r\n        const clientDb = await this.getClientDbConnection(deployment);\r\n        \r\n        // Insert church information\r\n        await clientDb.execute(`\r\n            INSERT INTO church_info (name, email, primary_color, secondary_color)\r\n            VALUES (?, ?, ?, ?)\r\n        `, [\r\n            deployment.name,\r\n            deployment.contactEmail,\r\n            deployment.branding?.primaryColor || '#1976d2',\r\n            deployment.branding?.secondaryColor || '#dc004e'\r\n        ]);\r\n        \r\n        await clientDb.end();\r\n    }\r\n\r\n    async createAdminUser(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'creating_admin_user', 4);\r\n        \r\n        const bcrypt = require('bcrypt');\r\n        const temporaryPassword = this.generateTemporaryPassword();\r\n        const passwordHash = await bcrypt.hash(temporaryPassword, 12);\r\n        \r\n        const clientDb = await this.getClientDbConnection(deployment);\r\n        \r\n        await clientDb.execute(`\r\n            INSERT INTO users (email, password_hash, first_name, last_name, role)\r\n            VALUES (?, ?, ?, ?, 'admin')\r\n        `, [\r\n            deployment.contactEmail,\r\n            passwordHash,\r\n            'System',\r\n            'Administrator'\r\n        ]);\r\n        \r\n        // Store temporary password for email\r\n        await this.masterDb.execute(`\r\n            UPDATE clients SET deployment_config = JSON_SET(\r\n                COALESCE(deployment_config, '{}'),\r\n                '$.admin.email', ?,\r\n                '$.admin.tempPassword', ?\r\n            ) WHERE id = ?\r\n        `, [deployment.contactEmail, temporaryPassword, deployment.clientId]);\r\n        \r\n        await clientDb.end();\r\n    }\r\n\r\n    async configureSubdomain(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'configuring_subdomain', 5);\r\n        \r\n        // Create nginx configuration\r\n        const nginxConfig = this.generateNginxConfig(deployment);\r\n        const configPath = `/etc/nginx/sites-available/${deployment.subdomain}.orthodoxmetrics.com`;\r\n        \r\n        await fs.writeFile(configPath, nginxConfig);\r\n        \r\n        // Enable site\r\n        const enabledPath = `/etc/nginx/sites-enabled/${deployment.subdomain}.orthodoxmetrics.com`;\r\n        await execAsync(`ln -sf ${configPath} ${enabledPath}`);\r\n        \r\n        // Test and reload nginx\r\n        await execAsync('nginx -t');\r\n        await execAsync('nginx -s reload');\r\n    }\r\n\r\n    async deployFrontend(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'deploying_frontend', 6);\r\n        \r\n        const clientDir = `/var/www/clients/${deployment.slug}`;\r\n        \r\n        // Create client directory\r\n        await execAsync(`mkdir -p ${clientDir}`);\r\n        \r\n        // Copy template files\r\n        await execAsync(`cp -r /var/www/templates/ssppoc/* ${clientDir}/`);\r\n        \r\n        // Generate client configuration\r\n        const clientConfig = {\r\n            church: {\r\n                name: deployment.name,\r\n                subdomain: deployment.subdomain,\r\n                database: deployment.databaseName,\r\n                branding: deployment.branding || {}\r\n            }\r\n        };\r\n        \r\n        await fs.writeFile(\r\n            `${clientDir}/config/client.json`,\r\n            JSON.stringify(clientConfig, null, 2)\r\n        );\r\n        \r\n        // Build frontend\r\n        await execAsync(`cd ${clientDir} && npm install && npm run build`);\r\n        \r\n        // Set permissions\r\n        await execAsync(`chown -R www-data:www-data ${clientDir}`);\r\n    }\r\n\r\n    async configureSSL(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'configuring_ssl', 7);\r\n        \r\n        const domain = `${deployment.subdomain}.orthodoxmetrics.com`;\r\n        \r\n        // Generate SSL certificate with Let's Encrypt\r\n        await execAsync(`certbot --nginx -d ${domain} --non-interactive --agree-tos --email admin@orthodoxmetrics.com`);\r\n    }\r\n\r\n    async performHealthCheck(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'health_check', 8);\r\n        \r\n        const url = `https://${deployment.subdomain}.orthodoxmetrics.com/api/health`;\r\n        const maxRetries = 10;\r\n        \r\n        for (let i = 0; i < maxRetries; i++) {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (response.ok) {\r\n                    return; // Health check passed\r\n                }\r\n            } catch (error) {\r\n                // Wait before retry\r\n                await new Promise(resolve => setTimeout(resolve, 5000));\r\n            }\r\n        }\r\n        \r\n        throw new Error('Health check failed after maximum retries');\r\n    }\r\n\r\n    async activateClient(deployment) {\r\n        await this.updateDeploymentStep(deployment.id, 'activating', 9);\r\n        \r\n        // Update client status\r\n        await this.masterDb.execute(`\r\n            UPDATE clients SET status = 'active', activated_at = NOW() WHERE id = ?\r\n        `, [deployment.clientId]);\r\n        \r\n        // Mark deployment complete\r\n        await this.masterDb.execute(`\r\n            UPDATE deployments SET status = 'completed', completed_at = NOW() WHERE id = ?\r\n        `, [deployment.id]);\r\n        \r\n        // Send welcome email\r\n        await this.sendWelcomeEmail(deployment);\r\n    }\r\n\r\n    // Helper methods\r\n    generateSlug(name) {\r\n        return name.toLowerCase()\r\n            .replace(/[^a-z0-9]+/g, '-')\r\n            .replace(/^-+|-+$/g, '')\r\n            .substring(0, 50);\r\n    }\r\n\r\n    generateSecurePassword() {\r\n        const crypto = require('crypto');\r\n        return crypto.randomBytes(16).toString('hex');\r\n    }\r\n\r\n    generateTemporaryPassword() {\r\n        const chars = 'ABCDEFGHJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';\r\n        let result = '';\r\n        for (let i = 0; i < 12; i++) {\r\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    async getClientDbConnection(deployment) {\r\n        const [clients] = await this.masterDb.execute(\r\n            'SELECT deployment_config FROM clients WHERE id = ?',\r\n            [deployment.clientId]\r\n        );\r\n        \r\n        const config = JSON.parse(clients[0].deployment_config || '{}');\r\n        \r\n        return mysql.createConnection({\r\n            host: process.env.[REDACTED],\r\n            user: config.database.user,\r\n            password: config.database.password,\r\n            database: deployment.databaseName\r\n        });\r\n    }\r\n\r\n    generateNginxConfig(deployment) {\r\n        return `\r\nserver {\r\n    listen 80;\r\n    server_name ${deployment.subdomain}.orthodoxmetrics.com;\r\n    return 301 https://$server_name$request_uri;\r\n}\r\n\r\nserver {\r\n    listen 443 ssl http2;\r\n    server_name ${deployment.subdomain}.orthodoxmetrics.com;\r\n    \r\n    root /var/www/clients/${deployment.slug}/dist;\r\n    index index.html;\r\n    \r\n    # SSL configuration will be added by certbot\r\n    \r\n    location /api/ {\r\n        proxy_pass http://localhost:3001;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        proxy_set_header X-Client-Subdomain ${deployment.subdomain};\r\n    }\r\n    \r\n    location / {\r\n        try_files $uri $uri/ /index.html;\r\n    }\r\n}`;\r\n    }\r\n\r\n    async updateDeploymentStep(deploymentId, step, stepNumber) {\r\n        await this.masterDb.execute(`\r\n            UPDATE deployments SET \r\n                step_current = ?, \r\n                step_completed = ?,\r\n                logs = CONCAT(COALESCE(logs, ''), '[', NOW(), '] ', ?, '\\n')\r\n            WHERE id = ?\r\n        `, [step, stepNumber, `Started: ${step}`, deploymentId]);\r\n    }\r\n\r\n    async markDeploymentFailed(deploymentId, errorMessage) {\r\n        await this.masterDb.execute(`\r\n            UPDATE deployments SET \r\n                status = 'failed',\r\n                error_message = ?,\r\n                completed_at = NOW()\r\n            WHERE id = ?\r\n        `, [errorMessage, deploymentId]);\r\n    }\r\n\r\n    async sendWelcomeEmail(deployment) {\r\n        // Implementation for sending welcome email with login credentials\r\n        console.log(`Welcome email would be sent to ${deployment.contactEmail}`);\r\n    }\r\n}\r\n\r\nmodule.exports = ClientDeploymentService;\r\n```\r\n\r\n### 4. **Client Management API**\r\n\r\n```javascript\r\n// routes/clientManagement.js\r\nconst express = require('express');\r\nconst ClientDeploymentService = require('../services/ClientDeploymentService');\r\n\r\nconst router = express.Router();\r\nconst deploymentService = new ClientDeploymentService();\r\n\r\n// Create new client site\r\nrouter.post('/clients', async (req, res) => {\r\n    try {\r\n        const deployment = await deploymentService.createClient(req.body);\r\n        res.json({\r\n            success: true,\r\n            deploymentId: deployment.id,\r\n            clientId: deployment.clientId,\r\n            subdomain: `${deployment.subdomain}.orthodoxmetrics.com`,\r\n            message: 'Client site deployment started'\r\n        });\r\n    } catch (error) {\r\n        res.status(500).json({\r\n            success: false,\r\n            error: error.message\r\n        });\r\n    }\r\n});\r\n\r\n// Get deployment status\r\nrouter.get('/deployments/:id', async (req, res) => {\r\n    try {\r\n        const [deployments] = await deploymentService.masterDb.execute(`\r\n            SELECT d.*, c.name, c.subdomain \r\n            FROM deployments d \r\n            JOIN clients c ON d.client_id = c.id \r\n            WHERE d.id = ?\r\n        `, [req.params.id]);\r\n        \r\n        if (deployments.length === 0) {\r\n            return res.status(404).json({ error: 'Deployment not found' });\r\n        }\r\n        \r\n        res.json(deployments[0]);\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\n// List all clients\r\nrouter.get('/clients', async (req, res) => {\r\n    try {\r\n        const [clients] = await deploymentService.masterDb.execute(`\r\n            SELECT id, name, slug, subdomain, status, subscription_tier, \r\n                   activated_at, created_at\r\n            FROM clients \r\n            ORDER BY created_at DESC\r\n        `);\r\n        \r\n        res.json(clients);\r\n    } catch (error) {\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n### 5. **Frontend Client Creation Interface**\r\n\r\n```javascript\r\n// Client creation form component\r\nconst ClientCreationForm = () => {\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        contactEmail: '',\r\n        contactPhone: '',\r\n        contactAddress: '',\r\n        templateId: 1,\r\n        branding: {\r\n            primaryColor: '#1976d2',\r\n            secondaryColor: '#dc004e'\r\n        }\r\n    });\r\n    \r\n    const [deploymentId, setDeploymentId] = useState(null);\r\n    const [deploymentStatus, setDeploymentStatus] = useState(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        try {\r\n            const response = await fetch('/api/admin/clients', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(formData)\r\n            });\r\n            \r\n            const result = await response.json();\r\n            \r\n            if (result.success) {\r\n                setDeploymentId(result.deploymentId);\r\n                // Start polling for deployment status\r\n                pollDeploymentStatus(result.deploymentId);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating client:', error);\r\n        }\r\n    };\r\n\r\n    const pollDeploymentStatus = (id) => {\r\n        const interval = setInterval(async () => {\r\n            try {\r\n                const response = await fetch(`/api/admin/deployments/${id}`);\r\n                const status = await response.json();\r\n                \r\n                setDeploymentStatus(status);\r\n                \r\n                if (status.status === 'completed' || status.status === 'failed') {\r\n                    clearInterval(interval);\r\n                }\r\n            } catch (error) {\r\n                clearInterval(interval);\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {/* Form fields for church information */}\r\n            {deploymentStatus && (\r\n                <DeploymentProgress status={deploymentStatus} />\r\n            )}\r\n        </form>\r\n    );\r\n};\r\n```\r\n\r\n## Implementation Roadmap\r\n\r\n### **Phase 1: Foundation (Week 1)**\r\n- [ ] Create master database schema\r\n- [ ] Build basic deployment service\r\n- [ ] Test single client creation\r\n\r\n### **Phase 2: Automation (Week 2)**\r\n- [ ] Implement full deployment pipeline\r\n- [ ] Add subdomain configuration\r\n- [ ] Test database creation\r\n\r\n### **Phase 3: Management UI (Week 3)**\r\n- [ ] Build client management dashboard\r\n- [ ] Add deployment monitoring\r\n- [ ] Create client onboarding flow\r\n\r\n### **Phase 4: Production (Week 4)**\r\n- [ ] SSL automation\r\n- [ ] Billing integration\r\n- [ ] Support system\r\n- [ ] Monitoring & alerts\r\n\r\nThis system represents enterprise-level SaaS infrastructure capable of automatically deploying fully functional church management sites with separate databases, custom branding, and complete isolation between clients.\r\n"
    },
    "complexity": {
      "totalLines": 823,
      "codeLines": 628,
      "commentLines": 58,
      "commentRatio": 0.08454810495626822,
      "averageLineLength": 36.78279883381924
    },
    "lastAnalyzed": "2025-07-28T07:19:58.143Z"
  },
  "contentHash": "d227044d17f8ba7a06cec85a73a73fad6e524bd701ee4265b4977be70552d0d3",
  "discoveredAt": "2025-07-28T07:19:58.143Z"
}