{
  "id": "13edeb663c05",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/middleware/auditLogger.js",
  "relativePath": "server/middleware/auditLogger.js",
  "name": "auditLogger.js",
  "extension": ".js",
  "size": 8189,
  "modified": "2025-07-13T02:52:06.096Z",
  "created": "2025-07-13T02:48:46.640Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 6
  },
  "metadata": {
    "fileStats": {
      "lines": 293,
      "characters": 8189,
      "words": 891
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 6
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "uuid",
        "line": 7
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 12,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 15,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * Orthodox Metrics - Audit Logger Middleware\r\n * Middleware for logging user actions and record changes\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\n// Database connection helper\r\nconst getDbConnection = async () => {\r\n  return mysql.createConnection({\r\n    host: process.env.[REDACTED] || 'localhost',\r\n    user: process.env.[REDACTED] || 'root',\r\n    password: process.env.[REDACTED] || '',\r\n    database: process.env.[REDACTED] || 'orthodoxmetrics_db'\r\n  });\r\n};\r\n\r\n/**\r\n * Audit logger middleware factory\r\n * @param {string} action - The action being performed\r\n * @returns {Function} Express middleware function\r\n */\r\nconst auditLogger = (action) => {\r\n  return async (req, res, next) => {\r\n    // Store original res.json to intercept the response\r\n    const originalJson = res.json;\r\n    \r\n    res.json = function(data) {\r\n      // Call original json method\r\n      originalJson.call(this, data);\r\n      \r\n      // Log the audit trail asynchronously (don't block the response)\r\n      setImmediate(async () => {\r\n        await logAuditAction(req, res, action, data);\r\n      });\r\n    };\r\n    \r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Log audit action to database\r\n */\r\nconst logAuditAction = async (req, res, action, responseData) => {\r\n  let connection;\r\n  \r\n  try {\r\n    connection = await getDbConnection();\r\n    \r\n    const auditId = uuidv4();\r\n    const userId = req.user?.id || null;\r\n    const userRole = req.user?.role || 'anonymous';\r\n    const recordType = req.recordType || req.params.recordType || null;\r\n    const recordId = req.params.id || responseData?.data?.id || null;\r\n    const ipAddress = req.ip || req.connection.remoteAddress || null;\r\n    const userAgent = req.get('User-Agent') || null;\r\n    \r\n    // Extract relevant request data\r\n    const requestData = {\r\n      method: req.method,\r\n      url: req.originalUrl,\r\n      body: req.body ? JSON.stringify(req.body) : null,\r\n      query: req.query ? JSON.stringify(req.query) : null,\r\n      headers: {\r\n        'user-agent': userAgent,\r\n        'referer': req.get('Referer')\r\n      }\r\n    };\r\n    \r\n    // Extract response status and relevant data\r\n    const responseInfo = {\r\n      statusCode: res.statusCode,\r\n      success: responseData?.success || false,\r\n      data: responseData?.data || null\r\n    };\r\n    \r\n    const sql = `\r\n      INSERT INTO audit_log (\r\n        id, user_id, user_role, action, record_type, record_id,\r\n        request_data, response_data, ip_address, user_agent,\r\n        created_at, status_code\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?)\r\n    `;\r\n    \r\n    await connection.execute(sql, [\r\n      auditId,\r\n      userId,\r\n      userRole,\r\n      action,\r\n      recordType,\r\n      recordId,\r\n      JSON.stringify(requestData),\r\n      JSON.stringify(responseInfo),\r\n      ipAddress,\r\n      userAgent,\r\n      res.statusCode\r\n    ]);\r\n    \r\n    console.log(`[AUDIT] ${action} by user ${userId} (${userRole}) - Status: ${res.statusCode}`);\r\n    \r\n  } catch (error) {\r\n    console.error('Audit logging error:', error);\r\n    // Don't throw error - audit logging should not break the main flow\r\n  } finally {\r\n    if (connection) {\r\n      try {\r\n        await connection.end();\r\n      } catch (closeError) {\r\n        console.error('Error closing audit log connection:', closeError);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Middleware to log general user actions\r\n */\r\nconst logUserAction = (action, details = null) => {\r\n  return async (req, res, next) => {\r\n    const userId = req.user?.id;\r\n    const userRole = req.user?.role;\r\n    \r\n    if (userId) {\r\n      console.log(`[USER ACTION] ${action} - User: ${userId} (${userRole})`, details);\r\n      \r\n      // Could also log to database here if needed\r\n      // await logActionToDb(userId, action, details);\r\n    }\r\n    \r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Create audit tables if they don't exist\r\n */\r\nconst initializeAuditTables = async () => {\r\n  let connection;\r\n  \r\n  try {\r\n    connection = await getDbConnection();\r\n    \r\n    // Create general audit log table\r\n    const auditLogSql = `\r\n      CREATE TABLE IF NOT EXISTS audit_log (\r\n        id VARCHAR(36) PRIMARY KEY,\r\n        user_id INT NULL,\r\n        user_role VARCHAR(50) NULL,\r\n        action VARCHAR(100) NOT NULL,\r\n        record_type VARCHAR(50) NULL,\r\n        record_id VARCHAR(36) NULL,\r\n        request_data JSON NULL,\r\n        response_data JSON NULL,\r\n        ip_address VARCHAR(45) NULL,\r\n        user_agent TEXT NULL,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        status_code INT NULL,\r\n        INDEX idx_user_id (user_id),\r\n        INDEX idx_action (action),\r\n        INDEX idx_record_type (record_type),\r\n        INDEX idx_created_at (created_at)\r\n      )\r\n    `;\r\n    \r\n    // Create specific record audit log table\r\n    const recordAuditSql = `\r\n      CREATE TABLE IF NOT EXISTS record_audit_log (\r\n        id VARCHAR(36) PRIMARY KEY,\r\n        record_type VARCHAR(50) NOT NULL,\r\n        record_id VARCHAR(36) NOT NULL,\r\n        user_id INT NOT NULL,\r\n        action VARCHAR(50) NOT NULL,\r\n        changes JSON NULL,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        ip_address VARCHAR(45) NULL,\r\n        INDEX idx_record (record_type, record_id),\r\n        INDEX idx_user_id (user_id),\r\n        INDEX idx_created_at (created_at)\r\n      )\r\n    `;\r\n    \r\n    await connection.execute(auditLogSql);\r\n    await connection.execute(recordAuditSql);\r\n    \r\n    console.log('Audit tables initialized successfully');\r\n    \r\n  } catch (error) {\r\n    console.error('Error initializing audit tables:', error);\r\n  } finally {\r\n    if (connection) await connection.end();\r\n  }\r\n};\r\n\r\n/**\r\n * Get audit logs with filtering\r\n */\r\nconst getAuditLogs = async (req, res) => {\r\n  let connection;\r\n  \r\n  try {\r\n    connection = await getDbConnection();\r\n    \r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 50;\r\n    const offset = (page - 1) * limit;\r\n    const action = req.query.action || '';\r\n    const userId = req.query.userId || '';\r\n    const recordType = req.query.recordType || '';\r\n    const startDate = req.query.startDate || '';\r\n    const endDate = req.query.endDate || '';\r\n    \r\n    let whereClause = 'WHERE 1=1';\r\n    const queryParams = [];\r\n    \r\n    if (action) {\r\n      whereClause += ' AND action = ?';\r\n      queryParams.push(action);\r\n    }\r\n    \r\n    if (userId) {\r\n      whereClause += ' AND user_id = ?';\r\n      queryParams.push(userId);\r\n    }\r\n    \r\n    if (recordType) {\r\n      whereClause += ' AND record_type = ?';\r\n      queryParams.push(recordType);\r\n    }\r\n    \r\n    if (startDate) {\r\n      whereClause += ' AND created_at >= ?';\r\n      queryParams.push(startDate);\r\n    }\r\n    \r\n    if (endDate) {\r\n      whereClause += ' AND created_at <= ?';\r\n      queryParams.push(endDate);\r\n    }\r\n    \r\n    const countSql = `SELECT COUNT(*) as total FROM audit_log ${whereClause}`;\r\n    const [countRows] = await connection.execute(countSql, queryParams);\r\n    const total = countRows[0].total;\r\n    \r\n    const sql = `\r\n      SELECT al.*, u.username, u.role\r\n      FROM audit_log al\r\n      LEFT JOIN users u ON al.user_id = u.id\r\n      ${whereClause}\r\n      ORDER BY al.created_at DESC\r\n      LIMIT ? OFFSET ?\r\n    `;\r\n    \r\n    const [rows] = await connection.execute(sql, [...queryParams, limit, offset]);\r\n    \r\n    const logs = rows.map(row => ({\r\n      ...row,\r\n      request_data: row.request_data ? JSON.parse(row.request_data) : null,\r\n      response_data: row.response_data ? JSON.parse(row.response_data) : null\r\n    }));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        logs,\r\n        pagination: {\r\n          page,\r\n          limit,\r\n          total,\r\n          totalPages: Math.ceil(total / limit)\r\n        }\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching audit logs:', error);\r\n    res.status(500).json({\r\n      error: 'Database error',\r\n      message: 'Failed to retrieve audit logs'\r\n    });\r\n  } finally {\r\n    if (connection) await connection.end();\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  auditLogger,\r\n  logUserAction,\r\n  initializeAuditTables,\r\n  getAuditLogs\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 293,
      "codeLines": 218,
      "commentLines": 32,
      "commentRatio": 0.128,
      "averageLineLength": 30.884
    },
    "lastAnalyzed": "2025-07-28T07:20:00.306Z"
  },
  "contentHash": "9605e5f93b6568d6f13762a9ebbcaee5f0e7e5697a53f6d38920dc4d83e844fc",
  "discoveredAt": "2025-07-28T07:20:00.306Z"
}