{
  "id": "2660bdffe252",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/middleware/clientContext.js",
  "relativePath": "server/middleware/clientContext.js",
  "name": "clientContext.js",
  "extension": ".js",
  "size": 1844,
  "modified": "2025-07-08T01:02:01.000Z",
  "created": "2025-07-09T00:48:35.202Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 57,
      "characters": 1844,
      "words": 178
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 27
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 29,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 30,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 31,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// middleware/clientContext.js\r\nconst { promisePool } = require('../../config/db');\r\n\r\nconst clientContext = async (req, res, next) => {\r\n    const clientSlug = req.params.clientSlug || req.headers['x-client-slug'];\r\n\r\n    if (!clientSlug) {\r\n        return res.status(400).json({ error: 'Client not specified' });\r\n    }\r\n\r\n    try {\r\n        // Get client information from main database\r\n        const [clients] = await promisePool.execute(\r\n            'SELECT * FROM clients WHERE slug = ? AND status = \"active\"',\r\n            [clientSlug]\r\n        );\r\n\r\n        if (clients.length === 0) {\r\n            return res.status(404).json({ error: 'Client not found or inactive' });\r\n        }\r\n\r\n        req.client = clients[0];\r\n        req.clientDatabase = clients[0].database_name;\r\n        req.clientSlug = clientSlug;\r\n\r\n        // Create client-specific database connection\r\n        const mysql = require('mysql2/promise');\r\n        req.clientDb = await mysql.createConnection({\r\n            host: process.env.[REDACTED] || 'localhost',\r\n            user: process.env.[REDACTED],\r\n            password: process.env.[REDACTED],\r\n            database: req.clientDatabase\r\n        });\r\n\r\n        next();\r\n    } catch (error) {\r\n        console.error('Client context error:', error);\r\n        res.status(500).json({ error: 'Client context initialization failed' });\r\n    }\r\n};\r\n\r\n// Cleanup middleware to close client database connection\r\nconst clientContextCleanup = async (req, res, next) => {\r\n    res.on('finish', async () => {\r\n        if (req.clientDb) {\r\n            try {\r\n                await req.clientDb.end();\r\n            } catch (error) {\r\n                console.error('Error closing client database connection:', error);\r\n            }\r\n        }\r\n    });\r\n    next();\r\n};\r\n\r\nmodule.exports = { clientContext, clientContextCleanup };\r\n"
    },
    "complexity": {
      "totalLines": 57,
      "codeLines": 43,
      "commentLines": 4,
      "commentRatio": 0.0851063829787234,
      "averageLineLength": 37.851063829787236
    },
    "lastAnalyzed": "2025-07-28T07:20:00.309Z"
  },
  "contentHash": "97e0c6ac94447a27372381b5be7f7486a6e49167d2686fbe00eba48378418eb2",
  "discoveredAt": "2025-07-28T07:20:00.309Z"
}