{
  "id": "f7c975ac2436",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/permissions.js",
  "relativePath": "server/routes/permissions.js",
  "name": "permissions.js",
  "extension": ".js",
  "size": 5228,
  "modified": "2025-07-22T12:19:30.832Z",
  "created": "2025-07-09T00:48:38.482Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 131,
      "characters": 4664,
      "words": 454
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 3
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 4
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/routes/permissions.js\r\nconst express = require('express');\r\nconst fs      = require('fs');\r\nconst path    = require('path');\r\nconst router  = express.Router();\r\nconst { promisePool } = require('../../config/db');\r\n\r\n// Path to your permissionConfig.json\r\nconst CONFIG_FILE = path.join(__dirname, 'permissionConfig.json');\r\n\r\nrouter.get('/', async (req, res) => {\r\n      try {\r\n          const [rows] = await promisePool.query(\r\n              `SELECT\r\n        id,\r\n        username,\r\n        email,\r\n        is_admin,\r\n        can_edit_baptism,\r\n        can_edit_marriage,\r\n        can_edit_funeral,\r\n        landing_page,\r\n        visible_menu_items\r\n        FROM users`\r\n          );\r\n               res.json({ users: rows });\r\n          } catch (err) {\r\n                console.error('GET /users error:', err);\r\n                res.status(500).json({ error: 'Database error fetching users' });\r\n              }\r\n    });\r\n\r\n// ─── FIELDS METADATA ─────────────────────────────────────────────────────────\r\nrouter.get('/fields-metadata', async (req, res) => {\r\n      try {\r\n            const tables = ['baptism_records', 'marriage_records', 'funeral_records'];\r\n            const out = {};\r\n            for (const table of tables) {\r\n        const [rows] = await promisePool.query(\r\n        `SELECT COLUMN_NAME\r\n           FROM information_schema.COLUMNS\r\n          WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?`,\r\n        [process.env.[REDACTED], table]\r\n      );\r\n      out[table.replace('_records','')] = rows\r\n        .map(r => r.COLUMN_NAME)\r\n        .filter(c => c !== 'id');\r\n    }\r\n    res.json(out);\r\n  } catch (err) {\r\n    console.error('fields-metadata error:', err);\r\n    res.status(500).json({ error: 'Failed to fetch fields metadata' });\r\n  }\r\n});\r\n\r\n// ─── PERMISSION CONFIG ──────────────────────────────────────────────────────\r\nrouter.get('/config', (req, res) => {\r\n  try {\r\n    let config = { mandatory: {}, dropdowns: {} };\r\n    if (fs.existsSync(CONFIG_FILE)) {\r\n      config = JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));\r\n    }\r\n    res.json(config);\r\n  } catch (err) {\r\n    console.error('Failed to read permissionConfig:', err);\r\n    res.status(500).json({ error: 'Unable to load permission config' });\r\n  }\r\n});\r\n\r\n// ─── TOGGLE MANDATORY FIELD ─────────────────────────────────────────────────\r\nrouter.post('/toggle-mandatory', (req, res) => {\r\n  const { table, column, mandatory: isMandatory } = req.body;\r\n  try {\r\n    let config = fs.existsSync(CONFIG_FILE)\r\n      ? JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'))\r\n      : { mandatory: {}, dropdowns: {} };\r\n    config.mandatory = config.mandatory || {};\r\n    config.mandatory[table] = config.mandatory[table] || [];\r\n    const set = new Set(config.mandatory[table]);\r\n    if (isMandatory) set.add(column);\r\n    else set.delete(column);\r\n    config.mandatory[table] = Array.from(set);\r\n    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2), 'utf8');\r\n    res.json({ success: true, mandatory: config.mandatory });\r\n  } catch (err) {\r\n    console.error('Toggle mandatory error:', err);\r\n    res.status(500).json({ error: 'Failed to toggle mandatory field' });\r\n  }\r\n});\r\n\r\n// ─── UPDATE USER PERMISSION ─────────────────────────────────────────────────\r\nrouter.post('/update-permission', (req, res) => {\r\n  const { username, permission, value } = req.body;\r\n  const allowed = ['can_edit_baptism','can_edit_marriage','can_edit_funeral'];\r\n  if (!allowed.includes(permission)) {\r\n    return res.status(400).json({ error: 'Invalid permission field' });\r\n  }\r\n  const sql = `UPDATE users SET \\`${permission}\\` = ? WHERE username = ?`;\r\n    promisePool.query(sql, [value, username])\r\n    .then(([result]) => {\r\n      if (result.affectedRows === 0) {\r\n        return res.status(404).json({ error: 'User not found' });\r\n      }\r\n      res.json({ success: true });\r\n    })\r\n    .catch(err => {\r\n      console.error('update-permission error:', err);\r\n      res.status(500).json({ error: 'Failed to update permission' });\r\n    });\r\n});\r\n\r\n// ─── UNIQUE VALUES ──────────────────────────────────────────────────────────\r\nrouter.get('/unique-values', async (req, res) => {\r\n  const { table, column } = req.query;\r\n  try {\r\n      const [rows] = await promisePool.query(\r\n      `SELECT DISTINCT \\`${column}\\` AS value\r\n         FROM \\`${table}\\`\r\n        WHERE \\`${column}\\` <> '' AND \\`${column}\\` IS NOT NULL\r\n        ORDER BY \\`${column}\\``\r\n    );\r\n    const values = rows.map(r => r.value);\r\n    res.json({ values });\r\n  } catch (err) {\r\n    console.error('unique-values error:', err);\r\n    res.status(500).json({ error: 'DB error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 131,
      "codeLines": 115,
      "commentLines": 7,
      "commentRatio": 0.05737704918032787,
      "averageLineLength": 37.09836065573771
    },
    "lastAnalyzed": "2025-07-28T07:20:00.540Z"
  },
  "contentHash": "20f475876734e50d9632283cca68446e87dba6bc92bbd7048a56a20b776da272",
  "discoveredAt": "2025-07-28T07:20:00.540Z"
}