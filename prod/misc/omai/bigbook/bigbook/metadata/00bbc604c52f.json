{
  "id": "00bbc604c52f",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase0-retry-failed-jobs.js",
  "relativePath": "server/legacy/phase0-retry-failed-jobs.js",
  "name": "phase0-retry-failed-jobs.js",
  "extension": ".js",
  "size": 5008,
  "modified": "2025-07-24T14:51:40.472Z",
  "created": "2025-07-24T14:51:40.472Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 129,
      "characters": 4970,
      "words": 463
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 8
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * Phase 0: Retry Failed OCR Jobs After Schema Fix\r\n * \r\n * This script resets error jobs to 'pending' status so they can be\r\n * reprocessed with the correct schema in place.\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\n\r\nconst DB_CONFIG = {\r\n    host: 'localhost',\r\n    user: 'orthodoxapps',\r\n    password: '[REDACTED]',\r\n    database: 'saints_peter_and_paul_orthodox_church_db'\r\n};\r\n\r\nasync function retryFailedJobs() {\r\n    console.log('🔄 Phase 0: Retrying failed OCR jobs after schema fix...');\r\n    \r\n    let connection;\r\n    try {\r\n        connection = await mysql.createConnection(DB_CONFIG);\r\n        console.log('✅ Connected to OCR database');\r\n\r\n        // Check current error jobs\r\n        console.log('\\n📋 Checking current error jobs...');\r\n        const [errorJobs] = await connection.execute(`\r\n            SELECT id, original_filename, error_message, created_at\r\n            FROM ocr_jobs \r\n            WHERE status = 'error'\r\n            ORDER BY created_at DESC\r\n        `);\r\n        \r\n        console.log(`Found ${errorJobs.length} error jobs:`);\r\n        errorJobs.forEach(job => {\r\n            const isSchemaError = job.error_message && \r\n                (job.error_message.includes('ocr_result_translation') || \r\n                 job.error_message.includes('extracted_entities') ||\r\n                 job.error_message.includes('unknown column'));\r\n            const errorType = isSchemaError ? '🔧 SCHEMA' : '❓ OTHER';\r\n            console.log(`   Job ${job.id}: ${job.original_filename} (${errorType})`);\r\n        });\r\n\r\n        // Reset schema-related error jobs to pending\r\n        console.log('\\n🔄 Resetting schema-related error jobs to pending...');\r\n        const [resetResult] = await connection.execute(`\r\n            UPDATE ocr_jobs \r\n            SET status = 'pending', \r\n                error_message = NULL,\r\n                processing_started_at = NULL,\r\n                processing_completed_at = NULL,\r\n                updated_at = NOW()\r\n            WHERE status = 'error' \r\n            AND (error_message LIKE '%ocr_result_translation%' \r\n                 OR error_message LIKE '%extracted_entities%'\r\n                 OR error_message LIKE '%unknown column%'\r\n                 OR error_message LIKE '%Unknown column%')\r\n        `);\r\n        \r\n        console.log(`✅ Reset ${resetResult.affectedRows} schema-related error jobs to pending`);\r\n\r\n        // Also reset the 6 recent jobs we uploaded (Jobs 20-25) regardless of error type\r\n        console.log('\\n🎯 Resetting recent test upload jobs (20-25) to pending...');\r\n        const [recentResetResult] = await connection.execute(`\r\n            UPDATE ocr_jobs \r\n            SET status = 'pending', \r\n                error_message = NULL,\r\n                processing_started_at = NULL,\r\n                processing_completed_at = NULL,\r\n                updated_at = NOW()\r\n            WHERE id BETWEEN 20 AND 25\r\n            AND status = 'error'\r\n        `);\r\n        \r\n        console.log(`✅ Reset ${recentResetResult.affectedRows} recent test jobs to pending`);\r\n\r\n        // Check final status\r\n        console.log('\\n📊 Updated job status distribution:');\r\n        const [finalStatus] = await connection.execute(`\r\n            SELECT status, COUNT(*) as count \r\n            FROM ocr_jobs \r\n            GROUP BY status \r\n            ORDER BY count DESC\r\n        `);\r\n        \r\n        finalStatus.forEach(row => {\r\n            console.log(`   ${row.status.toUpperCase()}: ${row.count} jobs`);\r\n        });\r\n\r\n        // Check if there are jobs ready for processing\r\n        const [pendingJobs] = await connection.execute(`\r\n            SELECT COUNT(*) as count \r\n            FROM ocr_jobs \r\n            WHERE status = 'pending'\r\n        `);\r\n        \r\n        console.log(`\\n🚀 Jobs ready for reprocessing: ${pendingJobs[0].count}`);\r\n\r\n        if (pendingJobs[0].count > 0) {\r\n            console.log('\\n💡 NEXT STEPS:');\r\n            console.log('   1. The OCR processing service should automatically pick up pending jobs');\r\n            console.log('   2. Monitor the job status to see them move from pending → processing → complete');\r\n            console.log('   3. Check for extracted entities in completed jobs');\r\n            console.log('   4. Run final verification once processing completes');\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('❌ Error retrying failed jobs:', error.message);\r\n        throw error;\r\n    } finally {\r\n        if (connection) {\r\n            await connection.end();\r\n            console.log('🔌 Database connection closed');\r\n        }\r\n    }\r\n}\r\n\r\n// Run the retry\r\nretryFailedJobs()\r\n    .then(() => {\r\n        console.log('\\n🎯 Phase 0 Job Retry Complete!');\r\n        console.log('📝 Monitor OCR processing service to watch jobs complete');\r\n        process.exit(0);\r\n    })\r\n    .catch((error) => {\r\n        console.error('\\n💥 Phase 0 Job Retry Failed:', error.message);\r\n        process.exit(1);\r\n    });\r\n"
    },
    "complexity": {
      "totalLines": 129,
      "codeLines": 99,
      "commentLines": 12,
      "commentRatio": 0.10810810810810811,
      "averageLineLength": 43.072072072072075
    },
    "lastAnalyzed": "2025-07-28T07:20:00.271Z"
  },
  "contentHash": "137912136dc48cb57c75e79d6b2058bf9a5cbf1eb0d4aee62543577f65becf07",
  "discoveredAt": "2025-07-28T07:20:00.271Z"
}