{
  "id": "de8ea50e6032",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/phase0-check-ocr-status.js",
  "relativePath": "server/legacy/phase0-check-ocr-status.js",
  "name": "phase0-check-ocr-status.js",
  "extension": ".js",
  "size": 4127,
  "modified": "2025-07-24T14:51:40.480Z",
  "created": "2025-07-24T14:51:40.480Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 113,
      "characters": 4097,
      "words": 397
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 8
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "/**\r\n * Phase 0: Check OCR Job Status After Schema Fix\r\n * \r\n * This script verifies that OCR jobs can now complete successfully\r\n * after adding the missing translation columns.\r\n */\r\n\r\nconst mysql = require('mysql2/promise');\r\n\r\nconst DB_CONFIG = {\r\n    host: 'localhost',\r\n    user: 'orthodoxapps',\r\n    password: '[REDACTED]',\r\n    database: 'saints_peter_and_paul_orthodox_church_db'\r\n};\r\n\r\nasync function checkOcrJobStatus() {\r\n    console.log('🔍 Phase 0: Checking OCR job status after schema fix...');\r\n    \r\n    let connection;\r\n    try {\r\n        connection = await mysql.createConnection(DB_CONFIG);\r\n        console.log('✅ Connected to OCR database');\r\n\r\n        // Check current job status\r\n        console.log('\\n📊 Current OCR job status distribution:');\r\n        const [statusCounts] = await connection.execute(`\r\n            SELECT status, COUNT(*) as count \r\n            FROM ocr_jobs \r\n            GROUP BY status \r\n            ORDER BY count DESC\r\n        `);\r\n        \r\n        statusCounts.forEach(row => {\r\n            console.log(`   ${row.status}: ${row.count} jobs`);\r\n        });\r\n\r\n        // Check the most recent jobs (should be the ones we just uploaded)\r\n        console.log('\\n📋 Most recent 10 OCR jobs:');\r\n        const [recentJobs] = await connection.execute(`\r\n            SELECT id, original_filename, status, record_type, \r\n                   confidence_score, error_message, \r\n                   created_at, processing_completed_at\r\n            FROM ocr_jobs \r\n            ORDER BY created_at DESC \r\n            LIMIT 10\r\n        `);\r\n        \r\n        recentJobs.forEach(job => {\r\n            const errorMsg = job.error_message ? ` (${job.error_message.substring(0, 50)}...)` : '';\r\n            console.log(`   Job ${job.id}: ${job.original_filename} - ${job.status}${errorMsg}`);\r\n        });\r\n\r\n        // Check if there are any jobs still in 'processing' status\r\n        const [processingJobs] = await connection.execute(`\r\n            SELECT COUNT(*) as count \r\n            FROM ocr_jobs \r\n            WHERE status = 'processing'\r\n        `);\r\n        \r\n        console.log(`\\n⚡ Currently processing: ${processingJobs[0].count} jobs`);\r\n\r\n        // Check if there are any jobs in 'error' status with the translation error\r\n        const [translationErrors] = await connection.execute(`\r\n            SELECT COUNT(*) as count \r\n            FROM ocr_jobs \r\n            WHERE status = 'error' \r\n            AND error_message LIKE '%ocr_result_translation%'\r\n        `);\r\n        \r\n        console.log(`🔧 Translation schema errors: ${translationErrors[0].count} jobs`);\r\n\r\n        if (translationErrors[0].count > 0) {\r\n            console.log('\\n🎯 There are still jobs with translation schema errors.');\r\n            console.log('💡 The OCR processing service may need to be restarted to pick up the schema changes.');\r\n        } else {\r\n            console.log('\\n🎉 No translation schema errors found!');\r\n        }\r\n\r\n        // Check for completed jobs with extracted entities\r\n        const [completedWithEntities] = await connection.execute(`\r\n            SELECT COUNT(*) as count \r\n            FROM ocr_jobs \r\n            WHERE status = 'complete' \r\n            AND extracted_entities IS NOT NULL\r\n            AND JSON_LENGTH(extracted_entities) > 0\r\n        `);\r\n        \r\n        console.log(`📊 Completed jobs with extracted entities: ${completedWithEntities[0].count}`);\r\n\r\n    } catch (error) {\r\n        console.error('❌ Error checking OCR job status:', error.message);\r\n        throw error;\r\n    } finally {\r\n        if (connection) {\r\n            await connection.end();\r\n            console.log('🔌 Database connection closed');\r\n        }\r\n    }\r\n}\r\n\r\n// Run the check\r\ncheckOcrJobStatus()\r\n    .then(() => {\r\n        console.log('\\n🎯 OCR Job Status Check Complete!');\r\n        console.log('📝 Phase 0 is ready to transition to Phase 1: Field Mapping Layer');\r\n        process.exit(0);\r\n    })\r\n    .catch((error) => {\r\n        console.error('\\n💥 OCR Job Status Check Failed:', error.message);\r\n        process.exit(1);\r\n    });\r\n"
    },
    "complexity": {
      "totalLines": 113,
      "codeLines": 83,
      "commentLines": 12,
      "commentRatio": 0.12631578947368421,
      "averageLineLength": 41.305263157894736
    },
    "lastAnalyzed": "2025-07-28T07:20:00.263Z"
  },
  "contentHash": "b59234c0c0fd29d9821203057c73ca5ac213275533ba12990c361116580e2664",
  "discoveredAt": "2025-07-28T07:20:00.263Z"
}