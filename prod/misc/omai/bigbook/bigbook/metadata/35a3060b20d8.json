{
  "id": "35a3060b20d8",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/diagnose-churches-api.js",
  "relativePath": "server/testing/diagnose-churches-api.js",
  "name": "diagnose-churches-api.js",
  "extension": ".js",
  "size": 6468,
  "modified": "2025-07-12T03:31:40.611Z",
  "created": "2025-07-12T03:31:06.325Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 5
  },
  "metadata": {
    "fileStats": {
      "lines": 178,
      "characters": 6392,
      "words": 598
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 5
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "axios",
        "line": 10
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 14,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Diagnostic Script for Churches API 500 Error\r\n * \r\n * This script specifically investigates the 500 error on /api/churches\r\n * and provides detailed debugging information.\r\n */\r\n\r\nconst axios = require('axios');\r\n\r\nclass ChurchesApiDiagnostic {\r\n  constructor() {\r\n    this.baseUrl = process.env.[REDACTED] || 'http://localhost:3001';\r\n  }\r\n\r\n  async diagnoseChurchesApi() {\r\n    console.log('üîç Diagnosing Churches API 500 Error');\r\n    console.log('=' .repeat(50));\r\n    console.log('');\r\n\r\n    const url = `${this.baseUrl}/api/churches`;\r\n    \r\n    try {\r\n      console.log(`Testing: ${url}`);\r\n      \r\n      const response = await axios.get(url, {\r\n        timeout: 10000,\r\n        validateStatus: () => true // Don't throw on error status\r\n      });\r\n\r\n      console.log(`Status: ${response.status}`);\r\n      console.log(`Status Text: ${response.statusText}`);\r\n      console.log(`Content-Type: ${response.headers['content-type']}`);\r\n      console.log('');\r\n\r\n      if (response.status === 500) {\r\n        console.log('üî• SERVER ERROR DETAILS:');\r\n        console.log('-'.repeat(30));\r\n        \r\n        // Log the full response data for 500 errors\r\n        if (response.data) {\r\n          console.log('Response Data:', JSON.stringify(response.data, null, 2));\r\n        }\r\n        \r\n        // Check if it's a database connection error\r\n        if (typeof response.data === 'string') {\r\n          if (response.data.includes('ECONNREFUSED')) {\r\n            console.log('‚ùå Database connection refused');\r\n            console.log('üí° Check if MySQL/MariaDB is running');\r\n            console.log('üí° Verify database connection settings in .env');\r\n          } else if (response.data.includes('ER_ACCESS_DENIED')) {\r\n            console.log('‚ùå Database access denied');\r\n            console.log('üí° Check database credentials in .env');\r\n          } else if (response.data.includes('Unknown database')) {\r\n            console.log('‚ùå Database does not exist');\r\n            console.log('üí° Create the database or check database name in .env');\r\n          } else if (response.data.includes('Table') && response.data.includes(\"doesn't exist\")) {\r\n            console.log('‚ùå Churches table does not exist');\r\n            console.log('üí° Run database migrations to create the churches table');\r\n          } else {\r\n            console.log('‚ùå Unknown server error');\r\n            console.log('Raw response:', response.data.substring(0, 500) + '...');\r\n          }\r\n        }\r\n        \r\n      } else if (response.status === 200) {\r\n        console.log('‚úÖ Churches API is working correctly');\r\n        if (response.data && response.data.length) {\r\n          console.log(`Found ${response.data.length} churches`);\r\n        }\r\n      } else {\r\n        console.log(`‚ö†Ô∏è  Unexpected status: ${response.status}`);\r\n        console.log('Response data:', JSON.stringify(response.data, null, 2));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('üí• REQUEST ERROR:');\r\n      console.log('-'.repeat(30));\r\n      \r\n      if (error.code === 'ECONNREFUSED') {\r\n        console.log('‚ùå Connection refused');\r\n        console.log('üí° Is the server running on port 3001?');\r\n        console.log('üí° Check if the application is started');\r\n      } else if (error.code === 'ETIMEDOUT') {\r\n        console.log('‚ùå Request timeout');\r\n        console.log('üí° Server may be overloaded or stuck');\r\n      } else {\r\n        console.log('‚ùå Network error:', error.message);\r\n      }\r\n    }\r\n\r\n    console.log('');\r\n    console.log('üîß TROUBLESHOOTING STEPS:');\r\n    console.log('-'.repeat(30));\r\n    console.log('1. Check server logs for detailed error messages');\r\n    console.log('2. Verify database connection and credentials');\r\n    console.log('3. Ensure churches table exists in the database');\r\n    console.log('4. Test database connection manually');\r\n    console.log('5. Check if authentication middleware is causing issues');\r\n  }\r\n\r\n  async testDatabaseConnection() {\r\n    console.log('\\nüóÑÔ∏è  Testing Database Connection Separately');\r\n    console.log('=' .repeat(50));\r\n    \r\n    try {\r\n      // Try to require the database connection directly\r\n      const { promisePool } = require('../../config/db');\r\n      \r\n      console.log('‚úÖ Database module loaded successfully');\r\n      \r\n      // Test basic query\r\n      const [result] = await promisePool.query('SELECT 1 as test');\r\n      console.log('‚úÖ Database connection successful');\r\n      console.log('Test query result:', result);\r\n      \r\n      // Check if churches table exists\r\n      const [tables] = await promisePool.query(\r\n        \"SHOW TABLES LIKE 'churches'\"\r\n      );\r\n      \r\n      if (tables.length > 0) {\r\n        console.log('‚úÖ Churches table exists');\r\n        \r\n        // Get table structure\r\n        const [structure] = await promisePool.query(\r\n          'DESCRIBE churches'\r\n        );\r\n        console.log('‚úÖ Churches table structure:');\r\n        structure.forEach(col => {\r\n          console.log(`   ${col.Field}: ${col.Type}`);\r\n        });\r\n        \r\n        // Count records\r\n        const [count] = await promisePool.query(\r\n          'SELECT COUNT(*) as total FROM churches'\r\n        );\r\n        console.log(`‚úÖ Churches table has ${count[0].total} records`);\r\n        \r\n      } else {\r\n        console.log('‚ùå Churches table does not exist');\r\n        console.log('üí° You need to run database migrations');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log('‚ùå Database test failed:', error.message);\r\n      \r\n      if (error.code === 'ECONNREFUSED') {\r\n        console.log('üí° MySQL/MariaDB is not running');\r\n      } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {\r\n        console.log('üí° Check database credentials in .env file');\r\n      } else if (error.code === 'ER_BAD_DB_ERROR') {\r\n        console.log('üí° Database does not exist - create it first');\r\n      }\r\n    }\r\n  }\r\n\r\n  async run() {\r\n    await this.diagnoseChurchesApi();\r\n    await this.testDatabaseConnection();\r\n    \r\n    console.log('\\n‚úÖ Diagnostic complete!');\r\n    console.log('Check the output above for specific issues and solutions.');\r\n  }\r\n}\r\n\r\n// Run if called directly\r\nif (require.main === module) {\r\n  const diagnostic = new ChurchesApiDiagnostic();\r\n  diagnostic.run().catch(error => {\r\n    console.error('‚ùå Diagnostic failed:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = ChurchesApiDiagnostic;\r\n"
    },
    "complexity": {
      "totalLines": 178,
      "codeLines": 132,
      "commentLines": 15,
      "commentRatio": 0.10204081632653061,
      "averageLineLength": 41.34013605442177
    },
    "lastAnalyzed": "2025-07-28T07:20:01.192Z"
  },
  "contentHash": "ce616f4d258e3f70b6fd03b2bf76ce8d4dd2d8bd3c196ad284a46a7215d8e057",
  "discoveredAt": "2025-07-28T07:20:01.192Z"
}