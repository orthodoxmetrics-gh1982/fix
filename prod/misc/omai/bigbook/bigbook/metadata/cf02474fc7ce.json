{
  "id": "cf02474fc7ce",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/routes/runScript.js",
  "relativePath": "server/routes/runScript.js",
  "name": "runScript.js",
  "extension": ".js",
  "size": 8614,
  "modified": "2025-07-13T19:47:33.005Z",
  "created": "2025-07-13T19:44:31.500Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 268,
      "characters": 8592,
      "words": 872
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "express",
        "line": 5
      },
      {
        "type": "npm_package",
        "name": "child_process",
        "line": 6
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 8
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 75,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/routes/runScript.js\r\n// Secure Script Runner API for Orthodox Metrics\r\n// Allows super_admin and admin users to execute pre-approved scripts\r\n\r\nconst express = require('express');\r\nconst { exec } = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs').promises;\r\nconst { requireRole } = require('../middleware/auth');\r\n\r\nconst router = express.Router();\r\n\r\n// Whitelisted scripts - only these can be executed for security\r\nconst SCRIPTS = {\r\n  'convertOCR': {\r\n    name: 'Convert OCR Data',\r\n    description: 'Convert and process OCR text files',\r\n    path: path.join(__dirname, '../scripts/convert-ocr-data.js'),\r\n    timeout: 30000 // 30 seconds\r\n  },\r\n  'maintenance': {\r\n    name: 'Database Maintenance',\r\n    description: 'Run database cleanup and optimization',\r\n    path: path.join(__dirname, '../scripts/database-maintenance.js'),\r\n    timeout: 60000 // 60 seconds\r\n  },\r\n  'checkPermissions': {\r\n    name: 'Check Link Permissions',\r\n    description: 'Verify link permissions and access controls',\r\n    path: path.join(__dirname, '../scripts/check-links-permissions.js'),\r\n    timeout: 45000 // 45 seconds\r\n  },\r\n  'debugChurches': {\r\n    name: 'Debug Churches API',\r\n    description: 'Debug and test churches API endpoints',\r\n    path: path.join(__dirname, '../scripts/debug-churches-api.js'),\r\n    timeout: 30000 // 30 seconds\r\n  },\r\n  'testApiRoutes': {\r\n    name: 'Test API Routes',\r\n    description: 'Test all API routes and endpoints',\r\n    path: path.join(__dirname, '../scripts/test-api-routes.js'),\r\n    timeout: 45000 // 45 seconds\r\n  },\r\n  'fixDatabaseTables': {\r\n    name: 'Fix Database Tables',\r\n    description: 'Fix and repair database table structures',\r\n    path: path.join(__dirname, '../scripts/fix-database-tables.js'),\r\n    timeout: 90000 // 90 seconds\r\n  }\r\n};\r\n\r\n// Ensure logs directory exists\r\nconst ensureLogsDirectory = async () => {\r\n  const logsDir = path.join(__dirname, '../logs');\r\n  try {\r\n    await fs.access(logsDir);\r\n  } catch (error) {\r\n    await fs.mkdir(logsDir, { recursive: true });\r\n  }\r\n};\r\n\r\n// Log script execution\r\nconst logExecution = async (userEmail, scriptName, success, output, error = null) => {\r\n  try {\r\n    await ensureLogsDirectory();\r\n    const logFile = path.join(__dirname, '../logs/script-executions.log');\r\n    const timestamp = new Date().toISOString();\r\n    const status = success ? 'SUCCESS' : 'ERROR';\r\n    const logEntry = `[${timestamp}] ${userEmail} ran ${scriptName} - ${status}\\n`;\r\n    \r\n    await fs.appendFile(logFile, logEntry);\r\n    \r\n    // Also log detailed output if needed (optional)\r\n    if (process.env.[REDACTED] === 'development') {\r\n      console.log(`📝 Script execution logged: ${logEntry.trim()}`);\r\n      if (output) console.log(`📄 Output: ${output.substring(0, 200)}...`);\r\n      if (error) console.log(`❌ Error: ${error.substring(0, 200)}...`);\r\n    }\r\n  } catch (logError) {\r\n    console.error('Failed to log script execution:', logError.message);\r\n  }\r\n};\r\n\r\n// GET /api/scripts - List available scripts\r\nrouter.get('/scripts', requireRole(['super_admin', 'admin']), (req, res) => {\r\n  try {\r\n    const availableScripts = Object.keys(SCRIPTS).map(key => ({\r\n      id: key,\r\n      name: SCRIPTS[key].name,\r\n      description: SCRIPTS[key].description,\r\n      timeout: SCRIPTS[key].timeout\r\n    }));\r\n\r\n    res.json({\r\n      success: true,\r\n      scripts: availableScripts,\r\n      count: availableScripts.length\r\n    });\r\n  } catch (error) {\r\n    console.error('Error listing scripts:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to list available scripts',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// POST /api/run-script - Execute a whitelisted script\r\nrouter.post('/run-script', requireRole(['super_admin', 'admin']), async (req, res) => {\r\n  const { scriptName, args = [] } = req.body;\r\n  const userEmail = req.session?.user?.email || 'unknown';\r\n  \r\n  console.log(`🚀 Script execution request: ${scriptName} by ${userEmail}`);\r\n\r\n  // Validate script name\r\n  if (!scriptName || typeof scriptName !== 'string') {\r\n    return res.status(400).json({\r\n      success: false,\r\n      error: 'Script name is required and must be a string',\r\n      code: 'INVALID_SCRIPT_NAME'\r\n    });\r\n  }\r\n\r\n  // Check if script is whitelisted\r\n  if (!SCRIPTS[scriptName]) {\r\n    console.log(`❌ Unauthorized script requested: ${scriptName}`);\r\n    await logExecution(userEmail, scriptName, false, null, 'Script not in whitelist');\r\n    \r\n    return res.status(403).json({\r\n      success: false,\r\n      error: 'Script not authorized for execution',\r\n      code: 'SCRIPT_NOT_WHITELISTED',\r\n      availableScripts: Object.keys(SCRIPTS)\r\n    });\r\n  }\r\n\r\n  const script = SCRIPTS[scriptName];\r\n  \r\n  // Verify script file exists\r\n  try {\r\n    await fs.access(script.path);\r\n  } catch (error) {\r\n    console.log(`❌ Script file not found: ${script.path}`);\r\n    await logExecution(userEmail, scriptName, false, null, 'Script file not found');\r\n    \r\n    return res.status(404).json({\r\n      success: false,\r\n      error: 'Script file not found on server',\r\n      code: 'SCRIPT_FILE_NOT_FOUND',\r\n      path: script.path\r\n    });\r\n  }\r\n\r\n  // Sanitize arguments (basic validation)\r\n  const sanitizedArgs = Array.isArray(args) ? args.filter(arg => \r\n    typeof arg === 'string' && arg.length < 100 && !/[;&|`$]/.test(arg)\r\n  ) : [];\r\n\r\n  // Build command\r\n  const command = `node \"${script.path}\"${sanitizedArgs.length > 0 ? ' ' + sanitizedArgs.map(arg => `\"${arg}\"`).join(' ') : ''}`;\r\n  \r\n  console.log(`📋 Executing command: ${command}`);\r\n  console.log(`⏱️  Timeout: ${script.timeout}ms`);\r\n\r\n  // Execute script with timeout\r\n  const execOptions = {\r\n    timeout: script.timeout,\r\n    maxBuffer: 1024 * 1024 * 10, // 10MB buffer\r\n    cwd: path.dirname(script.path)\r\n  };\r\n\r\n  exec(command, execOptions, async (error, stdout, stderr) => {\r\n    const executionTime = Date.now();\r\n    \r\n    if (error) {\r\n      console.error(`❌ Script execution failed: ${error.message}`);\r\n      await logExecution(userEmail, scriptName, false, stdout, error.message);\r\n      \r\n      // Handle timeout specifically\r\n      if (error.killed && error.signal === 'SIGTERM') {\r\n        return res.status(408).json({\r\n          success: false,\r\n          error: 'Script execution timed out',\r\n          code: 'EXECUTION_TIMEOUT',\r\n          timeout: script.timeout,\r\n          stdout: stdout || '',\r\n          stderr: stderr || ''\r\n        });\r\n      }\r\n      \r\n      return res.status(500).json({\r\n        success: false,\r\n        error: 'Script execution failed',\r\n        code: 'EXECUTION_ERROR',\r\n        message: error.message,\r\n        stdout: stdout || '',\r\n        stderr: stderr || ''\r\n      });\r\n    }\r\n\r\n    // Success\r\n    console.log(`✅ Script executed successfully: ${scriptName}`);\r\n    await logExecution(userEmail, scriptName, true, stdout);\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Script executed successfully',\r\n      scriptName: script.name,\r\n      executionTime: new Date().toISOString(),\r\n      stdout: stdout || '',\r\n      stderr: stderr || '',\r\n      hasOutput: !!(stdout || stderr)\r\n    });\r\n  });\r\n});\r\n\r\n// GET /api/script-logs - Get recent script execution logs (optional)\r\nrouter.get('/script-logs', requireRole(['super_admin']), async (req, res) => {\r\n  try {\r\n    const logFile = path.join(__dirname, '../logs/script-executions.log');\r\n    const limit = parseInt(req.query.limit) || 50;\r\n    \r\n    try {\r\n      const logContent = await fs.readFile(logFile, 'utf8');\r\n      const lines = logContent.trim().split('\\n').slice(-limit);\r\n      \r\n      const logs = lines.map(line => {\r\n        const match = line.match(/\\[(.+?)\\] (.+?) ran (.+?) - (.+?)$/);\r\n        if (match) {\r\n          return {\r\n            timestamp: match[1],\r\n            userEmail: match[2],\r\n            scriptName: match[3],\r\n            status: match[4],\r\n            rawLine: line\r\n          };\r\n        }\r\n        return { rawLine: line };\r\n      }).reverse(); // Most recent first\r\n\r\n      res.json({\r\n        success: true,\r\n        logs,\r\n        count: logs.length,\r\n        logFile: logFile\r\n      });\r\n    } catch (fileError) {\r\n      res.json({\r\n        success: true,\r\n        logs: [],\r\n        count: 0,\r\n        message: 'No execution logs found yet'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error reading script logs:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to read script logs',\r\n      message: error.message\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
    },
    "complexity": {
      "totalLines": 268,
      "codeLines": 217,
      "commentLines": 18,
      "commentRatio": 0.07659574468085106,
      "averageLineLength": 35.08510638297872
    },
    "lastAnalyzed": "2025-07-28T07:20:00.554Z"
  },
  "contentHash": "b750650d722bcd4c7122640fccd6fc29665879aae3dc48f4716651ffeab879f2",
  "discoveredAt": "2025-07-28T07:20:00.554Z"
}