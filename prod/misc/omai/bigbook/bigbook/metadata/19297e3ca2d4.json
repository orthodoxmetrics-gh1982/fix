{
  "id": "19297e3ca2d4",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/2ad7f0aae805.json",
  "relativePath": "bigbook/metadata/2ad7f0aae805.json",
  "name": "2ad7f0aae805.json",
  "extension": ".json",
  "size": 14209,
  "modified": "2025-07-26T04:17:10.978Z",
  "created": "2025-07-26T04:17:10.978Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 62,
      "characters": 13749,
      "words": 1036
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 49
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 49,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 49,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"2ad7f0aae805\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/legacy/step6-demo.js\",\n  \"relativePath\": \"server/legacy/step6-demo.js\",\n  \"name\": \"step6-demo.js\",\n  \"extension\": \".js\",\n  \"size\": 12045,\n  \"modified\": \"2025-07-24T14:51:40.480Z\",\n  \"created\": \"2025-07-24T14:51:40.480Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 260,\n      \"characters\": 11585,\n      \"words\": 921\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"path\",\n        \"line\": 5\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 25,\n          \"redacted\": true\n        },\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 38,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// 📁 step6-demo.js\\r\\n// Step 6: Logging and Monitoring - Comprehensive Demonstration\\r\\n\\r\\nconst MonitoringIntegration = require('./server/scrapers/monitoring/monitoring-integration');\\r\\nconst path = require('path');\\r\\n\\r\\nasync function demonstrateStep6() {\\r\\n    console.log('\\\\n🎯 ==========================================');\\r\\n    console.log('📊 STEP 6: LOGGING AND MONITORING DEMO');\\r\\n    console.log('🎯 ==========================================\\\\n');\\r\\n\\r\\n    console.log('🔧 System Configuration:');\\r\\n    console.log('├─ 🤖 AI-powered anomaly detection');\\r\\n    console.log('├─ 📊 Real-time performance monitoring');\\r\\n    console.log('├─ 🚨 Intelligent alert system');\\r\\n    console.log('├─ 📈 Comprehensive logging');\\r\\n    console.log('├─ 📱 Monitoring dashboard API');\\r\\n    console.log('├─ ✉️  Email & Slack notifications');\\r\\n    console.log('└─ 🔍 Predictive insights\\\\n');\\r\\n\\r\\n    // Database configuration\\r\\n    const dbConfig = {\\r\\n        host: 'localhost',\\r\\n        user: 'orthodoxapps',\\r\\n        password: '[REDACTED]',\\r\\n        database: 'orthodox_metrics',\\r\\n        port: 3306\\r\\n    };\\r\\n\\r\\n    // Alert configuration\\r\\n    const alertConfig = {\\r\\n        email: {\\r\\n            enabled: false, // Set to true with SMTP details for production\\r\\n            host: 'smtp.gmail.com',\\r\\n            port: 587,\\r\\n            secure: false,\\r\\n            user: 'your-email@gmail.com',\\r\\n            password: '[REDACTED]',\\r\\n            from: 'Orthodox Metrics System <noreply@orthodoxmetrics.com>',\\r\\n            recipients: ['admin@orthodoxmetrics.com']\\r\\n        },\\r\\n        slack: {\\r\\n            enabled: false, // Set to true with webhook URL for production\\r\\n            webhookUrl: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'\\r\\n        },\\r\\n        thresholds: {\\r\\n            criticalAlertCooldown: 30 * 60 * 1000, // 30 minutes\\r\\n            highAlertCooldown: 60 * 60 * 1000, // 1 hour\\r\\n            mediumAlertCooldown: 4 * 60 * 60 * 1000 // 4 hours\\r\\n        }\\r\\n    };\\r\\n\\r\\n    // Monitoring configuration\\r\\n    const monitoringConfig = {\\r\\n        thresholds: {\\r\\n            scraperFailureRate: 0.1, // 10%\\r\\n            dataQualityDrop: 0.2, // 20%\\r\\n            duplicateIncrease: 0.3, // 30%\\r\\n            validationFailureRate: 0.15, // 15%\\r\\n            syncDelayHours: 48 // 48 hours\\r\\n        }\\r\\n    };\\r\\n\\r\\n    try {\\r\\n        console.log('🚀 Initializing AI Monitoring System...\\\\n');\\r\\n\\r\\n        // Initialize monitoring system\\r\\n        const monitoring = new MonitoringIntegration({\\r\\n            dbConfig,\\r\\n            alertConfig,\\r\\n            monitoringConfig\\r\\n        });\\r\\n\\r\\n        await monitoring.initialize();\\r\\n        console.log('✅ Monitoring system initialized successfully!\\\\n');\\r\\n\\r\\n        // 1. Demonstrate AI Analysis\\r\\n        console.log('🔬 1. AI-POWERED ANOMALY DETECTION');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        const analysisResults = await monitoring.runManualAnalysis();\\r\\n        \\r\\n        console.log(`📊 Analysis Results:`);\\r\\n        console.log(`├─ Metrics Categories: ${Object.keys(analysisResults.metrics).length}`);\\r\\n        console.log(`├─ Anomalies Detected: ${analysisResults.anomalies.length}`);\\r\\n        console.log(`├─ Recommendations: ${analysisResults.recommendations.length}`);\\r\\n        console.log(`└─ Analysis Time: ${analysisResults.timestamp}\\\\n`);\\r\\n\\r\\n        if (analysisResults.anomalies.length > 0) {\\r\\n            console.log('🚨 Detected Anomalies:');\\r\\n            analysisResults.anomalies.forEach((anomaly, index) => {\\r\\n                console.log(`  ${index + 1}. [${anomaly.severity.toUpperCase()}] ${anomaly.type}`);\\r\\n                console.log(`     └─ ${anomaly.message}`);\\r\\n            });\\r\\n            console.log();\\r\\n        }\\r\\n\\r\\n        if (analysisResults.recommendations.length > 0) {\\r\\n            console.log('💡 AI Recommendations:');\\r\\n            analysisResults.recommendations.forEach((rec, index) => {\\r\\n                console.log(`  ${index + 1}. [${rec.priority.toUpperCase()}] ${rec.title}`);\\r\\n                console.log(`     └─ ${rec.description}`);\\r\\n            });\\r\\n            console.log();\\r\\n        }\\r\\n\\r\\n        // 2. Demonstrate System Status\\r\\n        console.log('📊 2. SYSTEM STATUS MONITORING');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        const status = await monitoring.getSystemStatus();\\r\\n        console.log(`🏥 System Health: ${status.systemHealth}`);\\r\\n        console.log(`🚨 Active Alerts: ${status.activeAlerts}`);\\r\\n        console.log(`⏱️  System Uptime: ${Math.round(status.uptime / 60)} minutes`);\\r\\n        console.log(`🔧 Components Status:`);\\r\\n        \\r\\n        Object.entries(status.components || {}).forEach(([component, state]) => {\\r\\n            const icon = state === 'active' ? '✅' : '❌';\\r\\n            console.log(`   ${icon} ${component}: ${state}`);\\r\\n        });\\r\\n        console.log();\\r\\n\\r\\n        // 3. Demonstrate Continuous Monitoring\\r\\n        console.log('🔄 3. CONTINUOUS MONITORING');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        console.log('🎯 Starting continuous monitoring (demo: 1-minute intervals)...');\\r\\n        const monitoringStatus = await monitoring.startMonitoring(1); // 1 minute for demo\\r\\n        \\r\\n        console.log(`✅ Monitoring Status: ${monitoringStatus.status}`);\\r\\n        console.log(`⏰ Check Interval: ${monitoringStatus.interval} minutes`);\\r\\n        console.log(`🚀 Started At: ${monitoringStatus.startTime}\\\\n`);\\r\\n\\r\\n        // Let monitoring run for a short demo period\\r\\n        console.log('⏳ Monitoring system running... (demo will run for 30 seconds)');\\r\\n        await new Promise(resolve => setTimeout(resolve, 30000));\\r\\n\\r\\n        // 4. Demonstrate Health Check\\r\\n        console.log('🏥 4. HEALTH CHECK API');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        const healthCheck = await monitoring.healthCheck();\\r\\n        console.log(`🩺 System Healthy: ${healthCheck.healthy ? 'YES' : 'NO'}`);\\r\\n        console.log(`📊 Health Status: ${healthCheck.status}`);\\r\\n        console.log(`🚨 Active Alerts: ${healthCheck.details.activeAlerts}`);\\r\\n        console.log(`⏱️  Uptime: ${Math.round(healthCheck.details.uptime / 60)} minutes\\\\n`);\\r\\n\\r\\n        // 5. Demonstrate Alert System (test mode)\\r\\n        console.log('🚨 5. ALERT SYSTEM TEST');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        console.log('🧪 Testing alert system...');\\r\\n        await monitoring.testAlertSystem();\\r\\n        console.log('✅ Alert system test completed!\\\\n');\\r\\n\\r\\n        // 6. Show Monitoring Dashboard Endpoints\\r\\n        console.log('📈 6. MONITORING DASHBOARD API');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        console.log('🌐 Available API Endpoints:');\\r\\n        console.log('├─ GET  /api/monitoring/health     - System health status');\\r\\n        console.log('├─ GET  /api/monitoring/report     - Detailed monitoring report');\\r\\n        console.log('├─ GET  /api/monitoring/alerts     - Active alerts');\\r\\n        console.log('├─ GET  /api/monitoring/metrics    - Historical metrics');\\r\\n        console.log('├─ GET  /api/monitoring/stats      - System statistics');\\r\\n        console.log('├─ POST /api/monitoring/analyze    - Trigger manual analysis');\\r\\n        console.log('├─ PUT  /api/monitoring/alerts/:id/acknowledge');\\r\\n        console.log('└─ PUT  /api/monitoring/alerts/:id/resolve\\\\n');\\r\\n\\r\\n        // 7. Show Logging Configuration\\r\\n        console.log('📝 7. COMPREHENSIVE LOGGING');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        console.log('📁 Log Files Generated:');\\r\\n        console.log('├─ ai-monitor.log              - AI analysis and anomaly detection');\\r\\n        console.log('├─ anomalies.log               - Warning level and above');\\r\\n        console.log('├─ alerts.log                  - Alert system activity');\\r\\n        console.log('├─ monitoring-integration.log  - Main monitoring system');\\r\\n        console.log('├─ monitoring-errors.log       - Error-level events only');\\r\\n        console.log('└─ session-logs.log            - Scraping session details\\\\n');\\r\\n\\r\\n        console.log('📊 Logging Features:');\\r\\n        console.log('├─ ⚡ Multi-level logging (debug, info, warn, error)');\\r\\n        console.log('├─ 📱 JSON structured logs for parsing');\\r\\n        console.log('├─ 🔄 Log rotation (max 10MB files, 5 backups)');\\r\\n        console.log('├─ 🎯 Contextual metadata');\\r\\n        console.log('├─ 📈 Performance metrics');\\r\\n        console.log('└─ 🔍 Stack trace capture\\\\n');\\r\\n\\r\\n        // 8. Demonstrate Monitoring Metrics\\r\\n        console.log('📊 8. INTELLIGENT MONITORING METRICS');\\r\\n        console.log('─'.repeat(50));\\r\\n        \\r\\n        console.log('🤖 AI-Powered Metrics:');\\r\\n        console.log('├─ 🎯 Scraper Performance Analysis');\\r\\n        console.log('│  ├─ Success/failure rates');\\r\\n        console.log('│  ├─ Performance trend analysis');\\r\\n        console.log('│  ├─ Error pattern detection');\\r\\n        console.log('│  └─ Efficiency optimization suggestions');\\r\\n        console.log('├─ 📊 Data Quality Monitoring');\\r\\n        console.log('│  ├─ Validation score tracking');\\r\\n        console.log('│  ├─ Data completeness analysis');\\r\\n        console.log('│  ├─ Duplicate detection rates');\\r\\n        console.log('│  └─ Quality degradation alerts');\\r\\n        console.log('├─ 🔄 Sync System Health');\\r\\n        console.log('│  ├─ Sync operation success rates');\\r\\n        console.log('│  ├─ Conflict resolution tracking');\\r\\n        console.log('│  ├─ Pending records monitoring');\\r\\n        console.log('│  └─ Sync delay detection');\\r\\n        console.log('└─ 💾 Database Performance');\\r\\n        console.log('   ├─ Table size growth tracking');\\r\\n        console.log('   ├─ Query performance analysis');\\r\\n        console.log('   ├─ Index efficiency monitoring');\\r\\n        console.log('   └─ Storage optimization alerts\\\\n');\\r\\n\\r\\n        // Cleanup\\r\\n        console.log('🔌 Shutting down monitoring system...');\\r\\n        await monitoring.shutdown();\\r\\n        console.log('✅ Shutdown complete!\\\\n');\\r\\n\\r\\n    } catch (error) {\\r\\n        console.error('❌ Demo failed:', error.message);\\r\\n        console.error('Stack trace:', error.stack);\\r\\n    }\\r\\n\\r\\n    console.log('🎉 ==========================================');\\r\\n    console.log('📊 STEP 6 DEMONSTRATION COMPLETE!');\\r\\n    console.log('🎉 ==========================================\\\\n');\\r\\n\\r\\n    console.log('💡 AUTONOMOUS SYSTEM FEATURES:');\\r\\n    console.log('├─ 🤖 Self-monitoring AI system');\\r\\n    console.log('├─ 🚨 Automatic anomaly detection');\\r\\n    console.log('├─ 📧 Intelligent alert notifications');\\r\\n    console.log('├─ 📊 Real-time performance tracking');\\r\\n    console.log('├─ 🔍 Predictive analytics');\\r\\n    console.log('├─ 📱 RESTful monitoring API');\\r\\n    console.log('├─ 📝 Comprehensive audit logging');\\r\\n    console.log('├─ 🔄 Automatic system healing');\\r\\n    console.log('├─ 📈 Trend analysis and forecasting');\\r\\n    console.log('└─ 🎯 Actionable recommendations\\\\n');\\r\\n\\r\\n    console.log('🚀 PRODUCTION DEPLOYMENT READY!');\\r\\n    console.log('━'.repeat(50));\\r\\n    console.log('The Orthodox Church Directory Builder is now');\\r\\n    console.log('a fully autonomous, intelligent system with:');\\r\\n    console.log('✅ Complete data acquisition automation');\\r\\n    console.log('✅ Intelligent validation and quality control');\\r\\n    console.log('✅ Advanced sync and conflict resolution');\\r\\n    console.log('✅ Interactive frontend visualization');\\r\\n    console.log('✅ AI-powered monitoring and alerting');\\r\\n    console.log('✅ Production-grade logging and analytics\\\\n');\\r\\n}\\r\\n\\r\\n// Run the demonstration\\r\\nif (require.main === module) {\\r\\n    demonstrateStep6().catch(console.error);\\r\\n}\\r\\n\\r\\nmodule.exports = { demonstrateStep6 };\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 260,\n      \"codeLines\": 203,\n      \"commentLines\": 17,\n      \"commentRatio\": 0.07727272727272727,\n      \"averageLineLength\": 50.904545454545456\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:10.981Z\"\n  },\n  \"contentHash\": \"46f1d66de6cf6029d252237d436ee025f86ec8ba7ca2150e635f0e0c02e2221d\",\n  \"discoveredAt\": \"2025-07-26T04:17:10.981Z\"\n}"
    },
    "complexity": {
      "totalLines": 62,
      "codeLines": 62,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 220.7741935483871
    },
    "lastAnalyzed": "2025-07-28T07:19:56.790Z"
  },
  "contentHash": "7a4e355d607a8bce4178b5a85b9ec1e1b000c0b7e21bf641e503c9bd90946a84",
  "discoveredAt": "2025-07-28T07:19:56.790Z"
}