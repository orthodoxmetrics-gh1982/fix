{
  "id": "adab4294178e",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/DEPLOYMENT_GUIDE.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/DEPLOYMENT_GUIDE.md",
  "name": "DEPLOYMENT_GUIDE.md",
  "extension": ".md",
  "size": 22504,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:05.216Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 10
  },
  "metadata": {
    "fileStats": {
      "lines": 956,
      "characters": 22474,
      "words": 2517
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 10
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 653,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Deployment Guide\r\n\r\n## 🚀 Orthodox Metrics Production Deployment\r\n\r\nThis document provides comprehensive instructions for deploying the Orthodox Metrics system to production environments.\r\n\r\n## 🎯 Deployment Overview\r\n\r\n### Deployment Architecture\r\n- **Frontend**: React SPA served by Nginx\r\n- **Backend**: Node.js/Express API server\r\n- **Database**: MySQL 8.0 with replication\r\n- **Reverse Proxy**: Nginx with SSL termination\r\n- **Process Management**: PM2 for Node.js processes\r\n- **Monitoring**: System and application monitoring\r\n\r\n### Deployment Options\r\n1. **Single Server Deployment**: All components on one server\r\n2. **Multi-Server Deployment**: Separate servers for different components\r\n3. **Cloud Deployment**: AWS, Google Cloud, or Azure\r\n4. **Container Deployment**: Docker with orchestration\r\n\r\n## 🏗️ Infrastructure Requirements\r\n\r\n### 1. Server Specifications\r\n\r\n#### Production Server (Minimum)\r\n- **CPU**: 4 cores (2.4GHz+)\r\n- **RAM**: 8GB\r\n- **Storage**: 100GB SSD\r\n- **Network**: 1Gbps connection\r\n- **OS**: Ubuntu 20.04 LTS or CentOS 8\r\n\r\n#### Production Server (Recommended)\r\n- **CPU**: 8 cores (3.0GHz+)\r\n- **RAM**: 16GB\r\n- **Storage**: 200GB SSD + backup storage\r\n- **Network**: 1Gbps connection with redundancy\r\n- **OS**: Ubuntu 22.04 LTS\r\n\r\n### 2. Network Configuration\r\n\r\n#### Firewall Rules\r\n```bash\r\n# Allow HTTP/HTTPS\r\nsudo ufw allow 80/tcp\r\nsudo ufw allow 443/tcp\r\n\r\n# Allow SSH (change port if needed)\r\nsudo ufw allow 22/tcp\r\n\r\n# Allow MySQL (if external access needed)\r\nsudo ufw allow 3306/tcp\r\n\r\n# Enable firewall\r\nsudo ufw enable\r\n```\r\n\r\n#### Domain and DNS Setup\r\n```bash\r\n# Example DNS records\r\nexample.com.        A       192.168.1.100\r\nwww.example.com.    CNAME   example.com.\r\napi.example.com.    CNAME   example.com.\r\n```\r\n\r\n## 🛠️ System Preparation\r\n\r\n### 1. Operating System Setup\r\n\r\n#### Ubuntu 22.04 LTS Setup\r\n```bash\r\n# Update system\r\nsudo apt update && sudo apt upgrade -y\r\n\r\n# Install essential packages\r\nsudo apt install -y \\\r\n  curl \\\r\n  wget \\\r\n  git \\\r\n  unzip \\\r\n  software-properties-common \\\r\n  apt-transport-https \\\r\n  ca-certificates \\\r\n  gnupg \\\r\n  lsb-release\r\n\r\n# Install build tools\r\nsudo apt install -y \\\r\n  build-essential \\\r\n  python3 \\\r\n  python3-pip \\\r\n  make \\\r\n  g++\r\n```\r\n\r\n### 2. Node.js Installation\r\n\r\n#### Install Node.js 18.x\r\n```bash\r\n# Add NodeSource repository\r\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\r\n\r\n# Install Node.js\r\nsudo apt-get install -y nodejs\r\n\r\n# Verify installation\r\nnode --version\r\nnpm --version\r\n\r\n# Install PM2 globally\r\nsudo npm install -g pm2\r\n```\r\n\r\n### 3. MySQL Installation\r\n\r\n#### Install MySQL 8.0\r\n```bash\r\n# Install MySQL server\r\nsudo apt update\r\nsudo apt install -y mysql-server\r\n\r\n# Secure MySQL installation\r\nsudo mysql_secure_installation\r\n\r\n# Start and enable MySQL\r\nsudo systemctl start mysql\r\nsudo systemctl enable mysql\r\n\r\n# Create production database\r\nmysql -u root -p\r\n```\r\n\r\n#### MySQL Production Configuration\r\n```sql\r\n-- Create production database\r\nCREATE DATABASE orthodox_metrics;\r\n\r\n-- Create application user\r\nCREATE USER 'orthodox_app'@'localhost' IDENTIFIED BY 'strong_password_here';\r\n\r\n-- Grant privileges\r\nGRANT SELECT, INSERT, UPDATE, DELETE ON orthodox_metrics.* TO 'orthodox_app'@'localhost';\r\n\r\n-- Create backup user\r\nCREATE USER 'orthodox_backup'@'localhost' IDENTIFIED BY 'backup_password_here';\r\nGRANT SELECT, LOCK TABLES ON orthodox_metrics.* TO 'orthodox_backup'@'localhost';\r\n\r\n-- Flush privileges\r\nFLUSH PRIVILEGES;\r\n```\r\n\r\n### 4. Nginx Installation\r\n\r\n#### Install and Configure Nginx\r\n```bash\r\n# Install Nginx\r\nsudo apt update\r\nsudo apt install -y nginx\r\n\r\n# Start and enable Nginx\r\nsudo systemctl start nginx\r\nsudo systemctl enable nginx\r\n\r\n# Test Nginx\r\nsudo nginx -t\r\n```\r\n\r\n## 📦 Application Deployment\r\n\r\n### 1. Code Deployment\r\n\r\n#### Create Application Directory\r\n```bash\r\n# Create application directory\r\nsudo mkdir -p /var/www/orthodox-metrics\r\nsudo chown -R $USER:$USER /var/www/orthodox-metrics\r\n\r\n# Navigate to application directory\r\ncd /var/www/orthodox-metrics\r\n```\r\n\r\n#### Deploy from Git Repository\r\n```bash\r\n# Clone repository\r\ngit clone https://github.com/your-org/orthodox-metrics.git .\r\n\r\n# Create production branch\r\ngit checkout -b production\r\ngit pull origin main\r\n\r\n# Set up directory structure\r\nmkdir -p logs uploads certificates backups\r\n```\r\n\r\n### 2. Backend Deployment\r\n\r\n#### Install Dependencies\r\n```bash\r\n# Navigate to server directory\r\ncd /var/www/orthodox-metrics/server\r\n\r\n# Install production dependencies\r\nnpm ci --only=production\r\n\r\n# Install PM2 ecosystem\r\nnpm install -g pm2\r\n```\r\n\r\n#### Production Environment Configuration\r\n```bash\r\n# Create production environment file\r\ncat > .env << EOF\r\n# Database Configuration\r\nDB_HOST=localhost\r\nDB_USER=orthodox_app\r\nDB_PASSWORD=strong_password_here\r\nDB_NAME=orthodox_metrics\r\n\r\n# Application Configuration\r\nNODE_ENV=production\r\nPORT=3000\r\nFRONTEND_URL=https://example.com\r\n\r\n# Session Configuration\r\nSESSION_SECRET=$(openssl rand -base64 32)\r\nSESSION_ENCRYPTION_KEY=$(openssl rand -base64 32)\r\n\r\n# Security Configuration\r\nBCRYPT_ROUNDS=12\r\nJWT_SECRET=$(openssl rand -base64 32)\r\n\r\n# File Upload Configuration\r\nUPLOAD_MAX_SIZE=10485760\r\nUPLOAD_ALLOWED_TYPES=pdf,doc,docx,txt,jpg,jpeg,png,gif\r\nUPLOAD_PATH=/var/www/orthodox-metrics/uploads\r\n\r\n# Logging Configuration\r\nLOG_LEVEL=info\r\nLOG_FILE=/var/www/orthodox-metrics/logs/app.log\r\n\r\n# Email Configuration\r\nEMAIL_HOST=smtp.gmail.com\r\nEMAIL_PORT=587\r\nEMAIL_USER=your-email@gmail.com\r\nEMAIL_PASSWORD=your-app-password\r\nEMAIL_FROM=noreply@example.com\r\n\r\n# SSL Configuration\r\nSSL_CERT_PATH=/etc/letsencrypt/live/example.com/fullchain.pem\r\nSSL_KEY_PATH=/etc/letsencrypt/live/example.com/privkey.pem\r\nEOF\r\n\r\n# Secure environment file\r\nchmod 600 .env\r\n```\r\n\r\n#### Database Migration\r\n```bash\r\n# Run database migrations\r\nmysql -u orthodox_app -p orthodox_metrics < database/schema.sql\r\n\r\n# Run initial data seeding\r\nnode database/seed.js\r\n```\r\n\r\n#### PM2 Configuration\r\n```bash\r\n# Create PM2 ecosystem file\r\ncat > ecosystem.config.js << EOF\r\nmodule.exports = {\r\n  apps: [\r\n    {\r\n      name: 'orthodox-metrics-api',\r\n      script: 'index.js',\r\n      instances: 'max',\r\n      exec_mode: 'cluster',\r\n      env: {\r\n        NODE_ENV: 'production',\r\n        PORT: 3000\r\n      },\r\n      error_file: '/var/www/orthodox-metrics/logs/pm2-error.log',\r\n      out_file: '/var/www/orthodox-metrics/logs/pm2-out.log',\r\n      log_file: '/var/www/orthodox-metrics/logs/pm2-combined.log',\r\n      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\r\n      merge_logs: true,\r\n      max_memory_restart: '1G',\r\n      node_args: '--max-old-space-size=1024',\r\n      watch: false,\r\n      ignore_watch: ['node_modules', 'logs', 'uploads'],\r\n      restart_delay: 4000,\r\n      max_restarts: 5,\r\n      min_uptime: '10s'\r\n    }\r\n  ]\r\n};\r\nEOF\r\n```\r\n\r\n### 3. Frontend Deployment\r\n\r\n#### Build Production Assets\r\n```bash\r\n# Navigate to frontend directory\r\ncd /var/www/orthodox-metrics/front-end\r\n\r\n# Install dependencies\r\nnpm ci\r\n\r\n# Build production assets\r\nnpm run build\r\n\r\n# Move build to web root\r\nsudo cp -r dist/* /var/www/orthodox-metrics/public/\r\n```\r\n\r\n#### Frontend Environment Configuration\r\n```bash\r\n# Create production environment file\r\ncat > .env.production << EOF\r\nREACT_APP_API_URL=https://api.example.com\r\nREACT_APP_NAME=Orthodox Metrics\r\nREACT_APP_VERSION=1.0.0\r\nREACT_APP_ENV=production\r\nREACT_APP_DEBUG=false\r\nEOF\r\n```\r\n\r\n## 🌐 Nginx Configuration\r\n\r\n### 1. SSL Certificate Setup\r\n\r\n#### Install Certbot\r\n```bash\r\n# Install Certbot\r\nsudo apt install -y certbot python3-certbot-nginx\r\n\r\n# Obtain SSL certificate\r\nsudo certbot --nginx -d example.com -d www.example.com -d api.example.com\r\n\r\n# Test certificate renewal\r\nsudo certbot renew --dry-run\r\n```\r\n\r\n### 2. Nginx Site Configuration\r\n\r\n#### Create Nginx Configuration\r\n```bash\r\n# Create site configuration\r\nsudo tee /etc/nginx/sites-available/orthodox-metrics << EOF\r\n# Rate limiting\r\nlimit_req_zone \\$binary_remote_addr zone=login:10m rate=5r/m;\r\nlimit_req_zone \\$binary_remote_addr zone=api:10m rate=20r/m;\r\n\r\n# Upstream backend\r\nupstream orthodox_api {\r\n    server 127.0.0.1:3000;\r\n    keepalive 32;\r\n}\r\n\r\n# HTTP redirect to HTTPS\r\nserver {\r\n    listen 80;\r\n    server_name example.com www.example.com api.example.com;\r\n    return 301 https://\\$server_name\\$request_uri;\r\n}\r\n\r\n# Main website\r\nserver {\r\n    listen 443 ssl http2;\r\n    server_name example.com www.example.com;\r\n\r\n    # SSL configuration\r\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\r\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\r\n    ssl_protocols TLSv1.2 TLSv1.3;\r\n    ssl_ciphers HIGH:!aNULL:!MD5;\r\n    ssl_prefer_server_ciphers on;\r\n    ssl_session_cache shared:SSL:10m;\r\n    ssl_session_timeout 10m;\r\n\r\n    # Security headers\r\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\r\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\r\n    add_header X-Content-Type-Options \"nosniff\" always;\r\n    add_header X-XSS-Protection \"1; mode=block\" always;\r\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\r\n\r\n    # Document root\r\n    root /var/www/orthodox-metrics/public;\r\n    index index.html index.htm;\r\n\r\n    # Static file serving\r\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\r\n        expires 1y;\r\n        add_header Cache-Control \"public, immutable\";\r\n        gzip_static on;\r\n    }\r\n\r\n    # API proxy\r\n    location /api {\r\n        limit_req zone=api burst=10 nodelay;\r\n        \r\n        proxy_pass http://orthodox_api;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade \\$http_upgrade;\r\n        proxy_set_header Connection 'upgrade';\r\n        proxy_set_header Host \\$host;\r\n        proxy_set_header X-Real-IP \\$remote_addr;\r\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto \\$scheme;\r\n        proxy_cache_bypass \\$http_upgrade;\r\n        proxy_read_timeout 86400;\r\n    }\r\n\r\n    # Auth endpoints with stricter rate limiting\r\n    location /api/auth {\r\n        limit_req zone=login burst=3 nodelay;\r\n        \r\n        proxy_pass http://orthodox_api;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Host \\$host;\r\n        proxy_set_header X-Real-IP \\$remote_addr;\r\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto \\$scheme;\r\n    }\r\n\r\n    # File uploads\r\n    location /uploads {\r\n        alias /var/www/orthodox-metrics/uploads;\r\n        expires 1d;\r\n        add_header Cache-Control \"public\";\r\n    }\r\n\r\n    # React app (catch all)\r\n    location / {\r\n        try_files \\$uri \\$uri/ /index.html;\r\n    }\r\n\r\n    # Error pages\r\n    error_page 404 /404.html;\r\n    error_page 500 502 503 504 /50x.html;\r\n}\r\n\r\n# API subdomain\r\nserver {\r\n    listen 443 ssl http2;\r\n    server_name api.example.com;\r\n\r\n    # SSL configuration\r\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\r\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\r\n    ssl_protocols TLSv1.2 TLSv1.3;\r\n    ssl_ciphers HIGH:!aNULL:!MD5;\r\n    ssl_prefer_server_ciphers on;\r\n\r\n    # API proxy\r\n    location / {\r\n        limit_req zone=api burst=10 nodelay;\r\n        \r\n        proxy_pass http://orthodox_api;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade \\$http_upgrade;\r\n        proxy_set_header Connection 'upgrade';\r\n        proxy_set_header Host \\$host;\r\n        proxy_set_header X-Real-IP \\$remote_addr;\r\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto \\$scheme;\r\n        proxy_cache_bypass \\$http_upgrade;\r\n    }\r\n}\r\nEOF\r\n\r\n# Enable site\r\nsudo ln -s /etc/nginx/sites-available/orthodox-metrics /etc/nginx/sites-enabled/\r\n\r\n# Remove default site\r\nsudo rm /etc/nginx/sites-enabled/default\r\n\r\n# Test configuration\r\nsudo nginx -t\r\n\r\n# Reload Nginx\r\nsudo systemctl reload nginx\r\n```\r\n\r\n## 🚀 Service Management\r\n\r\n### 1. Start Application Services\r\n\r\n#### Start Backend with PM2\r\n```bash\r\n# Navigate to server directory\r\ncd /var/www/orthodox-metrics/server\r\n\r\n# Start application\r\npm2 start ecosystem.config.js\r\n\r\n# Save PM2 configuration\r\npm2 save\r\n\r\n# Setup PM2 startup script\r\npm2 startup\r\n\r\n# Follow the instructions provided by PM2\r\n```\r\n\r\n#### Verify Services\r\n```bash\r\n# Check PM2 processes\r\npm2 list\r\n\r\n# Check PM2 logs\r\npm2 logs\r\n\r\n# Check Nginx status\r\nsudo systemctl status nginx\r\n\r\n# Check MySQL status\r\nsudo systemctl status mysql\r\n```\r\n\r\n### 2. Service Monitoring\r\n\r\n#### PM2 Monitoring\r\n```bash\r\n# Monitor processes\r\npm2 monit\r\n\r\n# View logs\r\npm2 logs orthodox-metrics-api\r\n\r\n# Restart application\r\npm2 restart orthodox-metrics-api\r\n\r\n# Reload with zero downtime\r\npm2 reload orthodox-metrics-api\r\n```\r\n\r\n## 🔧 Configuration Management\r\n\r\n### 1. Environment-Specific Configurations\r\n\r\n#### Production Security Settings\r\n```bash\r\n# Secure file permissions\r\nsudo chown -R www-data:www-data /var/www/orthodox-metrics\r\nsudo chmod -R 755 /var/www/orthodox-metrics\r\nsudo chmod -R 700 /var/www/orthodox-metrics/uploads\r\nsudo chmod 600 /var/www/orthodox-metrics/server/.env\r\n\r\n# Secure log files\r\nsudo chmod 644 /var/www/orthodox-metrics/logs/*\r\nsudo chown -R www-data:www-data /var/www/orthodox-metrics/logs\r\n```\r\n\r\n### 2. Database Configuration\r\n\r\n#### MySQL Production Optimization\r\n```sql\r\n-- /etc/mysql/mysql.conf.d/mysqld.cnf\r\n[mysqld]\r\n# Performance tuning\r\ninnodb_buffer_pool_size = 4G\r\ninnodb_log_file_size = 512M\r\ninnodb_flush_method = O_DIRECT\r\ninnodb_flush_log_at_trx_commit = 2\r\n\r\n# Security settings\r\nbind-address = 127.0.0.1\r\nskip-name-resolve\r\nsecure_file_priv = /var/lib/mysql-files/\r\n\r\n# Logging\r\nlog_error = /var/log/mysql/error.log\r\nslow_query_log = 1\r\nslow_query_log_file = /var/log/mysql/slow.log\r\nlong_query_time = 2\r\n```\r\n\r\n## 📊 Monitoring and Logging\r\n\r\n### 1. Application Monitoring\r\n\r\n#### Setup System Monitoring\r\n```bash\r\n# Install monitoring tools\r\nsudo apt install -y htop iotop nethogs\r\n\r\n# Install log monitoring\r\nsudo apt install -y logwatch\r\n\r\n# Configure logwatch\r\nsudo tee /etc/logwatch/conf/logwatch.conf << EOF\r\nLogDir = /var/log\r\nTmpDir = /var/cache/logwatch\r\nMailTo = admin@example.com\r\nMailFrom = logwatch@example.com\r\nPrint = No\r\nSave = /var/cache/logwatch\r\nRange = yesterday\r\nDetail = Med\r\nService = All\r\nEOF\r\n```\r\n\r\n#### Setup Application Monitoring\r\n```bash\r\n# Install PM2 monitoring\r\npm2 install pm2-logrotate\r\n\r\n# Configure log rotation\r\npm2 set pm2-logrotate:retain 30\r\npm2 set pm2-logrotate:compress true\r\npm2 set pm2-logrotate:dateFormat 'YYYY-MM-DD_HH-mm-ss'\r\npm2 set pm2-logrotate:max_size 10M\r\n```\r\n\r\n### 2. Log Management\r\n\r\n#### Configure Logrotate\r\n```bash\r\n# Create logrotate configuration\r\nsudo tee /etc/logrotate.d/orthodox-metrics << EOF\r\n/var/www/orthodox-metrics/logs/*.log {\r\n    daily\r\n    missingok\r\n    rotate 30\r\n    compress\r\n    delaycompress\r\n    notifempty\r\n    create 644 www-data www-data\r\n    postrotate\r\n        pm2 reloadLogs\r\n    endscript\r\n}\r\nEOF\r\n```\r\n\r\n## 🔄 Backup and Recovery\r\n\r\n### 1. Database Backup\r\n\r\n#### Automated Database Backup\r\n```bash\r\n# Create backup script\r\nsudo tee /usr/local/bin/backup-orthodox-db.sh << 'EOF'\r\n#!/bin/bash\r\n\r\n# Configuration\r\nDB_NAME=\"orthodox_metrics\"\r\nDB_USER=\"orthodox_backup\"\r\nDB_PASS=\"[REDACTED]\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"orthodox_metrics_${DATE}.sql.gz\"\r\n\r\n# Create backup directory\r\nmkdir -p ${BACKUP_DIR}\r\n\r\n# Create backup\r\nmysqldump -u ${DB_USER} -p${DB_PASS} ${DB_NAME} | gzip > ${BACKUP_DIR}/${BACKUP_FILE}\r\n\r\n# Remove backups older than 30 days\r\nfind ${BACKUP_DIR} -name \"*.sql.gz\" -mtime +30 -delete\r\n\r\n# Log backup completion\r\necho \"$(date): Database backup completed: ${BACKUP_FILE}\" >> /var/log/orthodox-backup.log\r\nEOF\r\n\r\n# Make script executable\r\nsudo chmod +x /usr/local/bin/backup-orthodox-db.sh\r\n\r\n# Schedule daily backup\r\nsudo crontab -e\r\n# Add line: 0 2 * * * /usr/local/bin/backup-orthodox-db.sh\r\n```\r\n\r\n### 2. File System Backup\r\n\r\n#### Application Backup Script\r\n```bash\r\n# Create application backup script\r\nsudo tee /usr/local/bin/backup-orthodox-files.sh << 'EOF'\r\n#!/bin/bash\r\n\r\n# Configuration\r\nAPP_DIR=\"/var/www/orthodox-metrics\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_FILE=\"orthodox_files_${DATE}.tar.gz\"\r\n\r\n# Create backup directory\r\nmkdir -p ${BACKUP_DIR}\r\n\r\n# Create backup excluding unnecessary files\r\ntar -czf ${BACKUP_DIR}/${BACKUP_FILE} \\\r\n    --exclude='node_modules' \\\r\n    --exclude='logs' \\\r\n    --exclude='.git' \\\r\n    --exclude='coverage' \\\r\n    --exclude='dist' \\\r\n    ${APP_DIR}\r\n\r\n# Remove backups older than 7 days\r\nfind ${BACKUP_DIR} -name \"*_files_*.tar.gz\" -mtime +7 -delete\r\n\r\n# Log backup completion\r\necho \"$(date): Files backup completed: ${BACKUP_FILE}\" >> /var/log/orthodox-backup.log\r\nEOF\r\n\r\n# Make script executable\r\nsudo chmod +x /usr/local/bin/backup-orthodox-files.sh\r\n\r\n# Schedule weekly backup\r\nsudo crontab -e\r\n# Add line: 0 3 * * 0 /usr/local/bin/backup-orthodox-files.sh\r\n```\r\n\r\n## 🔄 Deployment Automation\r\n\r\n### 1. Deployment Script\r\n\r\n#### Create Deployment Script\r\n```bash\r\n# Create deployment script\r\ntee /var/www/orthodox-metrics/deploy.sh << 'EOF'\r\n#!/bin/bash\r\n\r\n# Configuration\r\nAPP_DIR=\"/var/www/orthodox-metrics\"\r\nBRANCH=\"production\"\r\nBACKUP_DIR=\"/var/backups/orthodox-metrics\"\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\n\r\necho \"Starting deployment at $(date)\"\r\n\r\n# Navigate to application directory\r\ncd ${APP_DIR}\r\n\r\n# Create backup before deployment\r\necho \"Creating backup...\"\r\ntar -czf ${BACKUP_DIR}/pre_deploy_${DATE}.tar.gz \\\r\n    --exclude='node_modules' \\\r\n    --exclude='logs' \\\r\n    --exclude='.git' \\\r\n    .\r\n\r\n# Pull latest code\r\necho \"Pulling latest code...\"\r\ngit fetch origin\r\ngit checkout ${BRANCH}\r\ngit pull origin ${BRANCH}\r\n\r\n# Install/update dependencies\r\necho \"Installing dependencies...\"\r\ncd server && npm ci --only=production\r\ncd ../front-end && npm ci && npm run build\r\n\r\n# Copy build to public directory\r\necho \"Copying frontend build...\"\r\ncp -r dist/* ../public/\r\n\r\n# Run database migrations\r\necho \"Running database migrations...\"\r\ncd ../server\r\nnode database/migrate.js\r\n\r\n# Restart application\r\necho \"Restarting application...\"\r\npm2 reload orthodox-metrics-api\r\n\r\n# Test deployment\r\necho \"Testing deployment...\"\r\nsleep 10\r\ncurl -f http://localhost:3000/api/health || exit 1\r\n\r\necho \"Deployment completed successfully at $(date)\"\r\nEOF\r\n\r\n# Make script executable\r\nchmod +x /var/www/orthodox-metrics/deploy.sh\r\n```\r\n\r\n### 2. Health Check Script\r\n\r\n#### Create Health Check Script\r\n```bash\r\n# Create health check script\r\ntee /usr/local/bin/orthodox-health-check.sh << 'EOF'\r\n#!/bin/bash\r\n\r\n# Configuration\r\nAPI_URL=\"http://localhost:3000/api/health\"\r\nEMAIL=\"admin@example.com\"\r\nLOG_FILE=\"/var/log/orthodox-health.log\"\r\n\r\n# Function to send alert\r\nsend_alert() {\r\n    local message=\"$1\"\r\n    echo \"$(date): $message\" >> ${LOG_FILE}\r\n    echo \"$message\" | mail -s \"Orthodox Metrics Health Alert\" ${EMAIL}\r\n}\r\n\r\n# Check API health\r\nif ! curl -f -s ${API_URL} > /dev/null; then\r\n    send_alert \"API health check failed\"\r\n    exit 1\r\nfi\r\n\r\n# Check database connectivity\r\nif ! mysql -u orthodox_app -p'strong_password_here' -e \"SELECT 1\" orthodox_metrics > /dev/null 2>&1; then\r\n    send_alert \"Database connectivity check failed\"\r\n    exit 1\r\nfi\r\n\r\n# Check disk space\r\nDISK_USAGE=$(df /var/www/orthodox-metrics | tail -1 | awk '{print $5}' | sed 's/%//')\r\nif [ ${DISK_USAGE} -gt 80 ]; then\r\n    send_alert \"Disk usage is ${DISK_USAGE}% - cleanup required\"\r\nfi\r\n\r\n# Check memory usage\r\nMEMORY_USAGE=$(free | grep Mem | awk '{printf \"%.0f\", ($3/$2)*100}')\r\nif [ ${MEMORY_USAGE} -gt 90 ]; then\r\n    send_alert \"Memory usage is ${MEMORY_USAGE}% - investigation required\"\r\nfi\r\n\r\necho \"$(date): Health check passed\" >> ${LOG_FILE}\r\nEOF\r\n\r\n# Make script executable\r\nsudo chmod +x /usr/local/bin/orthodox-health-check.sh\r\n\r\n# Schedule health check every 5 minutes\r\nsudo crontab -e\r\n# Add line: */5 * * * * /usr/local/bin/orthodox-health-check.sh\r\n```\r\n\r\n## 🔍 Troubleshooting\r\n\r\n### 1. Common Issues\r\n\r\n#### Service Not Starting\r\n```bash\r\n# Check PM2 logs\r\npm2 logs orthodox-metrics-api\r\n\r\n# Check system logs\r\nsudo journalctl -u nginx -f\r\n\r\n# Check MySQL logs\r\nsudo tail -f /var/log/mysql/error.log\r\n\r\n# Check port conflicts\r\nsudo netstat -tulpn | grep :3000\r\nsudo netstat -tulpn | grep :80\r\n```\r\n\r\n#### Database Connection Issues\r\n```bash\r\n# Test database connection\r\nmysql -u orthodox_app -p orthodox_metrics\r\n\r\n# Check MySQL process\r\nsudo systemctl status mysql\r\n\r\n# Reset MySQL password\r\nsudo mysql -u root -p\r\nALTER USER 'orthodox_app'@'localhost' IDENTIFIED BY 'new_password';\r\nFLUSH PRIVILEGES;\r\n```\r\n\r\n#### SSL Certificate Issues\r\n```bash\r\n# Check certificate expiry\r\nsudo certbot certificates\r\n\r\n# Renew certificate\r\nsudo certbot renew\r\n\r\n# Test SSL configuration\r\nsudo nginx -t\r\n```\r\n\r\n### 2. Performance Issues\r\n\r\n#### Identify Performance Bottlenecks\r\n```bash\r\n# Check CPU usage\r\ntop\r\nhtop\r\n\r\n# Check memory usage\r\nfree -h\r\ncat /proc/meminfo\r\n\r\n# Check disk I/O\r\niotop\r\niostat -x 1\r\n\r\n# Check network usage\r\nnethogs\r\niftop\r\n```\r\n\r\n#### Database Performance\r\n```sql\r\n-- Check slow queries\r\nSHOW PROCESSLIST;\r\nSHOW FULL PROCESSLIST;\r\n\r\n-- Check query performance\r\nEXPLAIN SELECT * FROM users WHERE email = 'test@example.com';\r\n\r\n-- Check table sizes\r\nSELECT \r\n    table_name AS \"Table\",\r\n    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS \"Size (MB)\"\r\nFROM information_schema.tables \r\nWHERE table_schema = 'orthodox_metrics'\r\nORDER BY (data_length + index_length) DESC;\r\n```\r\n\r\n## 📋 Deployment Checklist\r\n\r\n### Pre-Deployment\r\n- [ ] Code reviewed and tested\r\n- [ ] Environment variables configured\r\n- [ ] Database migrations ready\r\n- [ ] SSL certificates valid\r\n- [ ] Backup strategy in place\r\n- [ ] Monitoring configured\r\n- [ ] Health checks configured\r\n\r\n### During Deployment\r\n- [ ] Create backup\r\n- [ ] Deploy code\r\n- [ ] Run migrations\r\n- [ ] Update dependencies\r\n- [ ] Restart services\r\n- [ ] Verify deployment\r\n- [ ] Test critical functionality\r\n\r\n### Post-Deployment\r\n- [ ] Monitor logs for errors\r\n- [ ] Check performance metrics\r\n- [ ] Verify SSL certificates\r\n- [ ] Test backup procedures\r\n- [ ] Update documentation\r\n- [ ] Notify stakeholders\r\n\r\n---\r\n\r\n*This deployment guide provides comprehensive instructions for deploying the Orthodox Metrics system to production. It should be updated whenever deployment procedures change or new infrastructure is added.*\r\n"
    },
    "complexity": {
      "totalLines": 956,
      "codeLines": 525,
      "commentLines": 229,
      "commentRatio": 0.3037135278514589,
      "averageLineLength": 28.24137931034483
    },
    "lastAnalyzed": "2025-07-28T07:19:58.162Z"
  },
  "contentHash": "175f0b4fccdc6be9efc67ff0f4a532df213a76195388ec5db25b2cb75dd4af87",
  "discoveredAt": "2025-07-28T07:19:58.162Z"
}