{
  "id": "242e6efccd6c",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/docs/archive/temp_extract/07-09-25/SERVER_SETUP_GUIDE_192.168.1.239.md",
  "relativePath": "docs/archive/temp_extract/07-09-25/SERVER_SETUP_GUIDE_192.168.1.239.md",
  "name": "SERVER_SETUP_GUIDE_192.168.1.239.md",
  "extension": ".md",
  "size": 13549,
  "modified": "2025-07-09T04:32:16.000Z",
  "created": "2025-07-14T05:44:07.052Z",
  "classification": {
    "type": "Documentation",
    "category": "Documentation",
    "confidence": 9
  },
  "metadata": {
    "fileStats": {
      "lines": 465,
      "characters": 13537,
      "words": 1474
    },
    "classification": {
      "type": "Documentation",
      "category": "Documentation",
      "confidence": 9
    },
    "dependencies": [],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 147,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 148,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "# Orthodox Metrics Server Setup Guide for 192.168.1.239\r\n# Complete setup from scratch with multilingual database\r\n\r\n## Prerequisites\r\n- Ubuntu 20.04 LTS or later\r\n- Root or sudo access\r\n- Internet connection\r\n\r\n## Step 1: Connect to the New Server\r\nOpen your SSH client and connect:\r\n```bash\r\nssh ubuntu@192.168.1.239\r\n```\r\n\r\n## Step 2: Update System and Install Dependencies\r\n```bash\r\n# Update system packages\r\nsudo apt update && sudo apt upgrade -y\r\n\r\n# Install essential packages\r\nsudo apt install -y curl wget git unzip software-properties-common\r\n\r\n# Install Node.js 18.x LTS\r\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\r\nsudo apt-get install -y nodejs\r\n\r\n# Verify Node.js installation\r\nnode --version\r\nnpm --version\r\n\r\n# Install PM2 for process management\r\nsudo npm install -g pm2\r\n\r\n# Install MariaDB (MySQL compatible)\r\nsudo apt install -y mariadb-server mariadb-client\r\n\r\n# Install Nginx web server\r\nsudo apt install -y nginx\r\n\r\n# Install additional utilities\r\nsudo apt install -y htop ufw fail2ban logrotate\r\n```\r\n\r\n## Step 3: Secure MariaDB Installation\r\n```bash\r\nsudo mysql_secure_installation\r\n```\r\n**Use these settings:**\r\n- Set root password: `SecureOCMPassword2025!`\r\n- Remove anonymous users: `Y`\r\n- Disallow root login remotely: `Y` \r\n- Remove test database: `Y`\r\n- Reload privilege tables: `Y`\r\n\r\n## Step 4: Create Application Directories\r\n```bash\r\n# Create main application directory\r\nsudo mkdir -p /var/www/orthodox-church-mgmt\r\nsudo chown -R ubuntu:ubuntu /var/www/orthodox-church-mgmt\r\n\r\n# Create backup directory\r\nsudo mkdir -p /opt/backups/ocm\r\nsudo chown -R ubuntu:ubuntu /opt/backups/ocm\r\n\r\n# Create log directory\r\nsudo mkdir -p /var/log/orthodox-church-mgmt\r\nsudo chown -R ubuntu:ubuntu /var/log/orthodox-church-mgmt\r\n\r\n# Create temporary directory for uploads\r\nsudo mkdir -p /tmp/orthodox-uploads\r\nsudo chown -R ubuntu:ubuntu /tmp/orthodox-uploads\r\n```\r\n\r\n## Step 5: Transfer Application Files\r\nYou need to transfer the application files from the source server. Choose one method:\r\n\r\n### Method A: Direct Copy (if both servers are accessible)\r\n```bash\r\n# On your local machine or from source server\r\nscp -r \\\\192.168.1.221\\ocm-ssppoc\\server ubuntu@192.168.1.239:/tmp/\r\nscp \\\\192.168.1.221\\ocm-ssppoc\\package.json ubuntu@192.168.1.239:/tmp/\r\n```\r\n\r\n### Method B: Create Archive and Transfer\r\nOn your Windows machine, run this PowerShell script:\r\n```powershell\r\n# Create deployment archive\r\n$sourceDir = \"\\\\192.168.1.221\\ocm-ssppoc\"\r\n$archivePath = \"C:\\temp\\orthodox-deployment.zip\"\r\n\r\n# Ensure temp directory exists\r\nNew-Item -ItemType Directory -Path \"C:\\temp\" -Force\r\n\r\n# Create archive (you can use 7-Zip or built-in compression)\r\nCompress-Archive -Path \"$sourceDir\\server\", \"$sourceDir\\package.json\", \"$sourceDir\\scripts\" -DestinationPath $archivePath -Force\r\n\r\nWrite-Host \"Archive created: $archivePath\"\r\nWrite-Host \"Transfer this file to ubuntu@192.168.1.239:/tmp/\"\r\n```\r\n\r\n### Method C: Download from Cloud Storage\r\nIf you upload the files to Google Drive/Dropbox:\r\n```bash\r\n# Example with wget (replace with your download link)\r\ncd /tmp\r\nwget \"YOUR_DOWNLOAD_LINK\" -O orthodox-deployment.zip\r\nunzip orthodox-deployment.zip\r\n```\r\n\r\n## Step 6: Extract and Setup Application Files\r\n```bash\r\n# Navigate to application directory\r\ncd /var/www/orthodox-church-mgmt\r\n\r\n# If you have a zip file in /tmp\r\nif [ -f \"/tmp/orthodox-deployment.zip\" ]; then\r\n    unzip /tmp/orthodox-deployment.zip -d .\r\n    rm /tmp/orthodox-deployment.zip\r\nfi\r\n\r\n# If files were copied directly to /tmp\r\nif [ -d \"/tmp/server\" ]; then\r\n    cp -r /tmp/server .\r\n    cp /tmp/package.json .\r\n    if [ -d \"/tmp/scripts\" ]; then\r\n        cp -r /tmp/scripts .\r\n    fi\r\n    rm -rf /tmp/server /tmp/package.json /tmp/scripts\r\nfi\r\n\r\n# Set proper permissions\r\nsudo chown -R ubuntu:ubuntu /var/www/orthodox-church-mgmt\r\nchmod +x scripts/*.sh 2>/dev/null || true\r\n```\r\n\r\n## Step 7: Create the Multilingual Database\r\n```bash\r\ncd /var/www/orthodox-church-mgmt\r\n\r\n# Create the database setup script if not transferred\r\ncat > setup_database.sh << 'EOF'\r\n#!/bin/bash\r\nset -e\r\n\r\nDB_NAME=\"orthodoxmetrics_db\"\r\nDB_USER=\"orthodoxmetrics_user\"\r\nDB_PASSWORD=\"[REDACTED]\"\r\nROOT_PASSWORD=\"[REDACTED]\"\r\n\r\necho \"Setting up multilingual database: $DB_NAME\"\r\n\r\n# Create database and user\r\nmysql -u root -p\"$ROOT_PASSWORD\" << MYSQL_EOF\r\nCREATE DATABASE IF NOT EXISTS $DB_NAME \r\nCHARACTER SET utf8mb4 \r\nCOLLATE utf8mb4_unicode_ci;\r\n\r\nCREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';\r\n\r\nGRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';\r\nGRANT CREATE ROUTINE ON $DB_NAME.* TO '$DB_USER'@'localhost';\r\nGRANT ALTER ROUTINE ON $DB_NAME.* TO '$DB_USER'@'localhost';\r\nGRANT EXECUTE ON $DB_NAME.* TO '$DB_USER'@'localhost';\r\n\r\nFLUSH PRIVILEGES;\r\nMYSQL_EOF\r\n\r\necho \"Database and user created successfully\"\r\n\r\n# Import schema if available\r\nif [ -f \"server/database/orthodoxmetrics_db_schema.sql\" ]; then\r\n    echo \"Importing multilingual schema...\"\r\n    mysql -u $DB_USER -p\"$DB_PASSWORD\" $DB_NAME < server/database/orthodoxmetrics_db_schema.sql\r\n    echo \"Schema imported successfully\"\r\nelse\r\n    echo \"Schema file not found. Will create basic structure.\"\r\n    # Create basic tables for immediate functionality\r\n    mysql -u $DB_USER -p\"$DB_PASSWORD\" $DB_NAME << BASIC_SCHEMA\r\n    -- Basic tables for immediate functionality\r\n    CREATE TABLE IF NOT EXISTS churches (\r\n        id INT PRIMARY KEY AUTO_INCREMENT,\r\n        name VARCHAR(255) NOT NULL,\r\n        email VARCHAR(255) UNIQUE NOT NULL,\r\n        phone VARCHAR(50),\r\n        address TEXT,\r\n        city VARCHAR(100),\r\n        country VARCHAR(100),\r\n        preferred_language CHAR(2) DEFAULT 'en',\r\n        currency CHAR(3) DEFAULT 'USD',\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n    );\r\n\r\n    CREATE TABLE IF NOT EXISTS invoices (\r\n        id INT PRIMARY KEY AUTO_INCREMENT,\r\n        invoice_number VARCHAR(50) UNIQUE NOT NULL,\r\n        church_id INT NOT NULL,\r\n        issue_date DATE NOT NULL,\r\n        due_date DATE,\r\n        language CHAR(2) DEFAULT 'en',\r\n        currency CHAR(3) DEFAULT 'USD',\r\n        total_amount DECIMAL(10,2) NOT NULL,\r\n        status ENUM('draft', 'pending', 'sent', 'paid', 'overdue', 'cancelled') DEFAULT 'draft',\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        FOREIGN KEY (church_id) REFERENCES churches(id) ON DELETE CASCADE\r\n    );\r\n\r\n    CREATE TABLE IF NOT EXISTS users (\r\n        id INT PRIMARY KEY AUTO_INCREMENT,\r\n        email VARCHAR(255) UNIQUE NOT NULL,\r\n        password_hash VARCHAR(255) NOT NULL,\r\n        first_name VARCHAR(100) NOT NULL,\r\n        last_name VARCHAR(100) NOT NULL,\r\n        preferred_language CHAR(2) DEFAULT 'en',\r\n        role ENUM('super_admin', 'admin', 'manager', 'user') DEFAULT 'user',\r\n        church_id INT,\r\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n        FOREIGN KEY (church_id) REFERENCES churches(id) ON DELETE SET NULL\r\n    );\r\n\r\n    -- Insert sample data\r\n    INSERT INTO churches (name, email, address, city, country, preferred_language, currency) VALUES\r\n    ('St. Nicholas Orthodox Cathedral', 'admin@stnicholascathedral.org', '123 Orthodox Way', 'New York', 'United States', 'en', 'USD');\r\n\r\n    INSERT INTO users (email, password_hash, first_name, last_name, role) VALUES\r\n    ('admin@orthodoxmetrics.com', '\\$2a\\$10\\$example_hash', 'System', 'Administrator', 'super_admin');\r\nBASIC_SCHEMA\r\n    echo \"Basic schema created\"\r\nfi\r\n\r\necho \"Database setup complete!\"\r\nEOF\r\n\r\nchmod +x setup_database.sh\r\n./setup_database.sh\r\n```\r\n\r\n## Step 8: Install Node.js Dependencies\r\n```bash\r\ncd /var/www/orthodox-church-mgmt\r\n\r\n# Install production dependencies\r\nnpm install --production\r\n\r\n# If package-lock.json exists, use it for exact versions\r\nif [ -f \"package-lock.json\" ]; then\r\n    npm ci --production\r\nfi\r\n```\r\n\r\n## Step 9: Create Environment Configuration\r\n```bash\r\ncd /var/www/orthodox-church-mgmt\r\n\r\n# Create production environment file\r\ncat > .env << 'EOF'\r\n# Orthodox Metrics Production Configuration\r\nNODE_ENV=production\r\nPORT=3001\r\n\r\n# Database Configuration\r\nDB_HOST=localhost\r\nDB_NAME=orthodoxmetrics_db\r\nDB_USER=orthodoxmetrics_user\r\nDB_PASSWORD=SecureOCMPassword2025!\r\n\r\n# Security\r\nSESSION_SECRET=SecureSessionSecret2025Orthodox!\r\nJWT_SECRET=SecureJWTSecret2025Orthodox!\r\n\r\n# CORS Configuration\r\nCORS_ORIGINS=https://orthodoxmetrics.com,https://www.orthodoxmetrics.com,http://192.168.1.239\r\n\r\n# Logging\r\nLOG_LEVEL=info\r\nLOG_FILE=/var/log/orthodox-church-mgmt/app.log\r\n\r\n# Multilingual Support\r\nDEFAULT_LANGUAGE=en\r\nSUPPORTED_LANGUAGES=en,gr,ru,ro\r\nENABLE_MULTILINGUAL=true\r\n\r\n# Features\r\nENABLE_PDF_GENERATION=true\r\nENABLE_OCR_PROCESSING=true\r\nENABLE_EMAIL_NOTIFICATIONS=false\r\n\r\n# File Upload\r\nUPLOAD_DIR=/tmp/orthodox-uploads\r\nMAX_FILE_SIZE=10485760\r\n\r\n# Rate Limiting\r\nRATE_LIMIT_WINDOW=900000\r\nRATE_LIMIT_MAX=100\r\n\r\n# SSL/TLS (when enabled)\r\nSSL_ENABLED=false\r\nFORCE_HTTPS=false\r\nEOF\r\n\r\n# Secure the environment file\r\nchmod 600 .env\r\n```\r\n\r\n## Step 10: Configure Nginx\r\n```bash\r\n# Create nginx configuration\r\nsudo tee /etc/nginx/sites-available/orthodox-church-mgmt << 'EOF'\r\nserver {\r\n    listen 80;\r\n    server_name orthodoxmetrics.com www.orthodoxmetrics.com 192.168.1.239 _;\r\n    \r\n    # Basic security headers\r\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\r\n    add_header X-XSS-Protection \"1; mode=block\" always;\r\n    add_header X-Content-Type-Options \"nosniff\" always;\r\n    \r\n    # Client max body size for file uploads\r\n    client_max_body_size 10M;\r\n    \r\n    # API routes\r\n    location /api/ {\r\n        proxy_pass http://localhost:3001;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection 'upgrade';\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        proxy_cache_bypass $http_upgrade;\r\n        proxy_connect_timeout 60s;\r\n        proxy_send_timeout 60s;\r\n        proxy_read_timeout 60s;\r\n    }\r\n    \r\n    # Health check endpoint\r\n    location /health {\r\n        proxy_pass http://localhost:3001/health;\r\n        access_log off;\r\n    }\r\n    \r\n    # Static files and frontend\r\n    location / {\r\n        proxy_pass http://localhost:3001;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection 'upgrade';\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto $scheme;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n    \r\n    # Logging\r\n    access_log /var/log/nginx/orthodox_access.log;\r\n    error_log /var/log/nginx/orthodox_error.log;\r\n}\r\nEOF\r\n\r\n# Enable the site\r\nsudo ln -sf /etc/nginx/sites-available/orthodox-church-mgmt /etc/nginx/sites-enabled/\r\nsudo rm -f /etc/nginx/sites-enabled/default\r\n\r\n# Test nginx configuration\r\nsudo nginx -t\r\n\r\n# Restart nginx\r\nsudo systemctl restart nginx\r\nsudo systemctl enable nginx\r\n```\r\n\r\n## Step 11: Configure Firewall\r\n```bash\r\n# Reset and configure UFW firewall\r\nsudo ufw --force reset\r\nsudo ufw default deny incoming\r\nsudo ufw default allow outgoing\r\n\r\n# Allow SSH, HTTP, HTTPS\r\nsudo ufw allow 22/tcp\r\nsudo ufw allow 80/tcp\r\nsudo ufw allow 443/tcp\r\n\r\n# Enable firewall\r\nsudo ufw --force enable\r\n\r\n# Check status\r\nsudo ufw status\r\n```\r\n\r\n## Step 12: Start the Application\r\n```bash\r\ncd /var/www/orthodox-church-mgmt\r\n\r\n# Start the application with PM2\r\npm2 start server/index.js --name \"orthodox-church-mgmt\" --env production\r\n\r\n# Configure PM2 to start on boot\r\npm2 startup\r\npm2 save\r\n\r\n# Check application status\r\npm2 status\r\npm2 logs orthodox-church-mgmt --lines 20\r\n```\r\n\r\n## Step 13: Verify Installation\r\n```bash\r\n# Test database connection\r\nmysql -u orthodoxmetrics_user -pSecureOCMPassword2025! orthodoxmetrics_db -e \"SELECT 'Database OK' as status;\"\r\n\r\n# Test application locally\r\ncurl http://localhost:3001/api/health\r\n\r\n# Test through nginx\r\ncurl http://localhost/api/health\r\n\r\n# Check system status\r\nsystemctl status nginx\r\nsystemctl status mysql\r\npm2 status\r\n\r\n# View application logs\r\npm2 logs orthodox-church-mgmt --lines 50\r\n```\r\n\r\n## Step 14: Final Validation\r\nTest these URLs in your browser or with curl:\r\n- `http://192.168.1.239/api/health` - Health check\r\n- `http://192.168.1.239/api/churches` - Churches endpoint\r\n- `http://192.168.1.239/api/enhanced-invoices` - Enhanced invoices\r\n\r\n## Troubleshooting Commands\r\nIf something goes wrong:\r\n```bash\r\n# Restart all services\r\nsudo systemctl restart nginx\r\nsudo systemctl restart mysql\r\npm2 restart orthodox-church-mgmt\r\n\r\n# Check logs\r\npm2 logs orthodox-church-mgmt\r\nsudo tail -f /var/log/nginx/orthodox_error.log\r\nsudo tail -f /var/log/mysql/error.log\r\n\r\n# Check service status\r\nsudo systemctl status nginx\r\nsudo systemctl status mysql\r\npm2 status\r\n\r\n# Test database connection\r\nmysql -u orthodoxmetrics_user -pSecureOCMPassword2025! -e \"SHOW DATABASES;\"\r\n```\r\n\r\n## Setup Complete!\r\nOnce all steps are completed successfully, your Orthodox Metrics system will be running on 192.168.1.239 with:\r\n- ✅ Multilingual database support (English, Greek, Russian, Romanian)\r\n- ✅ Complete invoice management system\r\n- ✅ Church management features\r\n- ✅ PDF generation capabilities\r\n- ✅ Secure configuration\r\n- ✅ Production-ready setup\r\n"
    },
    "complexity": {
      "totalLines": 465,
      "codeLines": 289,
      "commentLines": 89,
      "commentRatio": 0.23544973544973544,
      "averageLineLength": 34.29365079365079
    },
    "lastAnalyzed": "2025-07-28T07:19:58.220Z"
  },
  "contentHash": "68417a3d73b2296d1ca6c57667873d811dddf6c67174309b3775ee808e939f97",
  "discoveredAt": "2025-07-28T07:19:58.220Z"
}