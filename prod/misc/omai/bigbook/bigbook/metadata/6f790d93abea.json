{
  "id": "6f790d93abea",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/emailService.js",
  "relativePath": "server/utils/emailService.js",
  "name": "emailService.js",
  "extension": ".js",
  "size": 11803,
  "modified": "2025-07-04T23:08:09.000Z",
  "created": "2025-07-09T00:48:38.526Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 334,
      "characters": 11754,
      "words": 1140
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "nodemailer",
        "line": 2
      },
      {
        "type": "npm_package",
        "name": "path",
        "line": 3
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 60,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 87,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 88,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 89,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 91,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 91,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 92,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 92,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 110,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 110,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 203,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 203,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 289,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 289,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/utils/emailService.js\r\nconst nodemailer = require('nodemailer');\r\nconst path = require('path');\r\n\r\n// Email templates\r\nconst getOCRReceiptTemplate = (sessionInfo, results) => {\r\n  const { sessionId, recordType, churchId, userEmail, expiresAt } = sessionInfo;\r\n  const { processedImages, extractedText, translatedText, confidence } = results;\r\n\r\n  return `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <style>\r\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n        .header { background: #8c249d; color: white; padding: 20px; text-align: center; }\r\n        .content { padding: 20px; }\r\n        .result-card { background: #f9f9f9; border-left: 4px solid #8c249d; padding: 15px; margin: 10px 0; }\r\n        .footer { background: #f1f1f1; padding: 10px; text-align: center; font-size: 12px; }\r\n        .download-link { background: #8c249d; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }\r\n        .metadata { background: #e8f4f8; padding: 10px; border-radius: 5px; margin: 10px 0; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>üìÑ OCR Processing Complete</h1>\r\n        <p>Orthodox Church Records Management System</p>\r\n    </div>\r\n    \r\n    <div class=\"content\">\r\n        <h2>Hello!</h2>\r\n        <p>Your document OCR processing has been completed successfully. Here are the results:</p>\r\n        \r\n        <div class=\"metadata\">\r\n            <h3>üìã Session Details</h3>\r\n            <p><strong>Session ID:</strong> ${sessionId}</p>\r\n            <p><strong>Record Type:</strong> ${recordType.charAt(0).toUpperCase() + recordType.slice(1)}</p>\r\n            <p><strong>Church ID:</strong> ${churchId}</p>\r\n            <p><strong>Processed:</strong> ${new Date().toLocaleDateString()}</p>\r\n            <p><strong>Images Processed:</strong> ${processedImages || 0}</p>\r\n        </div>\r\n\r\n        ${extractedText ? `\r\n        <div class=\"result-card\">\r\n            <h3>üîç Extracted Text</h3>\r\n            <pre style=\"white-space: pre-wrap; font-family: monospace; background: white; padding: 10px; border-radius: 3px;\">${extractedText}</pre>\r\n            ${confidence ? `<p><em>Confidence Score: ${Math.round(confidence * 100)}%</em></p>` : ''}\r\n        </div>\r\n        ` : ''}\r\n\r\n        ${translatedText ? `\r\n        <div class=\"result-card\">\r\n            <h3>üåê Translated Text</h3>\r\n            <pre style=\"white-space: pre-wrap; font-family: monospace; background: white; padding: 10px; border-radius: 3px;\">${translatedText}</pre>\r\n        </div>\r\n        ` : ''}\r\n\r\n        <div style=\"text-align: center; margin: 30px 0;\">\r\n            <a href=\"${process.env.[REDACTED] || 'http://localhost:3000'}/ocr/results/${sessionId}\" class=\"download-link\">\r\n                üì• Download Full Results\r\n            </a>\r\n        </div>\r\n        \r\n        <p><em>‚è∞ Note: This download link will expire on ${new Date(expiresAt).toLocaleDateString()} for security reasons.</em></p>\r\n        \r\n        <h3>Next Steps:</h3>\r\n        <ul>\r\n            <li>Review the extracted text for accuracy</li>\r\n            <li>Download the processed results before expiry</li>\r\n            <li>Contact your church administrator if you need assistance</li>\r\n        </ul>\r\n    </div>\r\n    \r\n    <div class=\"footer\">\r\n        <p>¬© 2025 Orthodox Church Records Management System</p>\r\n        <p>This is an automated message. Please do not reply to this email.</p>\r\n    </div>\r\n</body>\r\n</html>\r\n  `;\r\n};\r\n\r\n// Create transporter\r\nconst createTransporter = () => {\r\n  const config = {\r\n    host: process.env.[REDACTED] || 'smtp.gmail.com',\r\n    port: process.env.[REDACTED] || 587,\r\n    secure: process.env.[REDACTED] === 'true', // true for 465, false for other ports\r\n    auth: {\r\n      user: process.env.[REDACTED] || process.env.[REDACTED],\r\n      pass: process.env.[REDACTED] || process.env.[REDACTED],\r\n    },\r\n  };\r\n\r\n  return nodemailer.createTransporter(config);\r\n};\r\n\r\n// Send OCR receipt email\r\nconst sendOCRReceipt = async (sessionInfo, results, attachments = []) => {\r\n  try {\r\n    const transporter = createTransporter();\r\n    const { userEmail, sessionId, recordType } = sessionInfo;\r\n\r\n    if (!userEmail) {\r\n      throw new Error('No email address provided for receipt');\r\n    }\r\n\r\n    const mailOptions = {\r\n      from: `\"Orthodox Church Records\" <${process.env.[REDACTED] || process.env.[REDACTED]}>`,\r\n      to: userEmail,\r\n      subject: `OCR Processing Complete - ${recordType.charAt(0).toUpperCase() + recordType.slice(1)} Record (${sessionId.substring(0, 8)})`,\r\n      html: getOCRReceiptTemplate(sessionInfo, results),\r\n      attachments: attachments // Array of {filename, content, contentType}\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    \r\n    console.log('‚úÖ OCR receipt email sent:', {\r\n      messageId: info.messageId,\r\n      to: userEmail,\r\n      sessionId: sessionId\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      messageId: info.messageId,\r\n      recipient: userEmail\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error sending OCR receipt email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Send session verification email\r\nconst sendSessionVerification = async (sessionInfo) => {\r\n  try {\r\n    const transporter = createTransporter();\r\n    const { userEmail, sessionId, pin, expiresAt, recordType } = sessionInfo;\r\n\r\n    if (!userEmail) {\r\n      return { success: false, reason: 'No email provided' };\r\n    }\r\n\r\n    const verificationTemplate = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <style>\r\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n        .header { background: #8c249d; color: white; padding: 20px; text-align: center; }\r\n        .content { padding: 20px; }\r\n        .pin-box { background: #f0f8ff; border: 2px solid #8c249d; padding: 20px; text-align: center; margin: 20px 0; border-radius: 10px; }\r\n        .pin { font-size: 24px; font-weight: bold; color: #8c249d; letter-spacing: 3px; }\r\n        .footer { background: #f1f1f1; padding: 10px; text-align: center; font-size: 12px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>üîê Session Verification</h1>\r\n        <p>Orthodox Church Records Management System</p>\r\n    </div>\r\n    \r\n    <div class=\"content\">\r\n        <h2>Your OCR Session is Ready</h2>\r\n        <p>A new OCR session has been created for processing your ${recordType} records.</p>\r\n        \r\n        <div class=\"pin-box\">\r\n            <h3>üì± Verification PIN</h3>\r\n            <div class=\"pin\">${pin}</div>\r\n            <p>Use this PIN to verify your session when scanning the QR code</p>\r\n        </div>\r\n        \r\n        <h3>üìã Session Details:</h3>\r\n        <ul>\r\n            <li><strong>Session ID:</strong> ${sessionId}</li>\r\n            <li><strong>Record Type:</strong> ${recordType.charAt(0).toUpperCase() + recordType.slice(1)}</li>\r\n            <li><strong>Expires:</strong> ${new Date(expiresAt).toLocaleString()}</li>\r\n        </ul>\r\n        \r\n        <h3>üöÄ How to Use:</h3>\r\n        <ol>\r\n            <li>Scan the QR code displayed on the screen</li>\r\n            <li>Enter the PIN: <strong>${pin}</strong></li>\r\n            <li>Upload your document images</li>\r\n            <li>Wait for processing to complete</li>\r\n            <li>Receive your results via email</li>\r\n        </ol>\r\n    </div>\r\n    \r\n    <div class=\"footer\">\r\n        <p>¬© 2025 Orthodox Church Records Management System</p>\r\n        <p>This PIN will expire on ${new Date(expiresAt).toLocaleString()}</p>\r\n    </div>\r\n</body>\r\n</html>\r\n    `;\r\n\r\n    const mailOptions = {\r\n      from: `\"Orthodox Church Records\" <${process.env.[REDACTED] || process.env.[REDACTED]}>`,\r\n      to: userEmail,\r\n      subject: `OCR Session Created - PIN: ${pin}`,\r\n      html: verificationTemplate\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    \r\n    console.log('‚úÖ Session verification email sent:', {\r\n      messageId: info.messageId,\r\n      to: userEmail,\r\n      sessionId: sessionId\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      messageId: info.messageId,\r\n      recipient: userEmail\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error sending verification email:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// Send error notification email\r\nconst sendErrorNotification = async (sessionInfo, error) => {\r\n  try {\r\n    const transporter = createTransporter();\r\n    const { userEmail, sessionId, recordType } = sessionInfo;\r\n\r\n    if (!userEmail) {\r\n      return { success: false, reason: 'No email provided' };\r\n    }\r\n\r\n    const errorTemplate = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <style>\r\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n        .header { background: #dc3545; color: white; padding: 20px; text-align: center; }\r\n        .content { padding: 20px; }\r\n        .error-box { background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; margin: 15px 0; }\r\n        .footer { background: #f1f1f1; padding: 10px; text-align: center; font-size: 12px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>‚ö†Ô∏è OCR Processing Error</h1>\r\n        <p>Orthodox Church Records Management System</p>\r\n    </div>\r\n    \r\n    <div class=\"content\">\r\n        <h2>Processing Error Occurred</h2>\r\n        <p>We encountered an issue while processing your ${recordType} records.</p>\r\n        \r\n        <div class=\"error-box\">\r\n            <h3>üîç Error Details:</h3>\r\n            <p><strong>Session ID:</strong> ${sessionId}</p>\r\n            <p><strong>Error:</strong> ${error.message || 'Unknown error occurred'}</p>\r\n            <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>\r\n        </div>\r\n        \r\n        <h3>üõ†Ô∏è What to do next:</h3>\r\n        <ul>\r\n            <li>Check that your images are clear and readable</li>\r\n            <li>Ensure images are in supported formats (JPG, PNG, PDF)</li>\r\n            <li>Try creating a new session and re-uploading</li>\r\n            <li>Contact support if the problem persists</li>\r\n        </ul>\r\n        \r\n        <p>We apologize for the inconvenience. Please try again or contact your church administrator for assistance.</p>\r\n    </div>\r\n    \r\n    <div class=\"footer\">\r\n        <p>¬© 2025 Orthodox Church Records Management System</p>\r\n        <p>Session ID: ${sessionId}</p>\r\n    </div>\r\n</body>\r\n</html>\r\n    `;\r\n\r\n    const mailOptions = {\r\n      from: `\"Orthodox Church Records\" <${process.env.[REDACTED] || process.env.[REDACTED]}>`,\r\n      to: userEmail,\r\n      subject: `OCR Processing Error - Session ${sessionId.substring(0, 8)}`,\r\n      html: errorTemplate\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    \r\n    console.log('‚úÖ Error notification email sent:', {\r\n      messageId: info.messageId,\r\n      to: userEmail,\r\n      sessionId: sessionId\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      messageId: info.messageId,\r\n      recipient: userEmail\r\n    };\r\n\r\n  } catch (emailError) {\r\n    console.error('‚ùå Error sending error notification email:', emailError);\r\n    return { success: false, error: emailError.message };\r\n  }\r\n};\r\n\r\n// Test email configuration\r\nconst testEmailConfig = async () => {\r\n  try {\r\n    const transporter = createTransporter();\r\n    await transporter.verify();\r\n    console.log('‚úÖ Email configuration is valid');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('‚ùå Email configuration test failed:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  sendOCRReceipt,\r\n  sendSessionVerification,\r\n  sendErrorNotification,\r\n  testEmailConfig\r\n};\r\n"
    },
    "complexity": {
      "totalLines": 334,
      "codeLines": 279,
      "commentLines": 7,
      "commentRatio": 0.024475524475524476,
      "averageLineLength": 39.39160839160839
    },
    "lastAnalyzed": "2025-07-28T07:20:01.248Z"
  },
  "contentHash": "87fcfc94b647fb2469b46085c645dc9989187d94d3467f93818c05ed00fd9f95",
  "discoveredAt": "2025-07-28T07:20:01.248Z"
}