{
  "id": "2b45654af8bf",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/testing/test-api-routes.js",
  "relativePath": "server/testing/test-api-routes.js",
  "name": "test-api-routes.js",
  "extension": ".js",
  "size": 7882,
  "modified": "2025-07-12T03:35:55.256Z",
  "created": "2025-07-12T03:35:07.977Z",
  "classification": {
    "type": "Server Scripts",
    "category": "Backend > Server",
    "confidence": 7
  },
  "metadata": {
    "fileStats": {
      "lines": 224,
      "characters": 7828,
      "words": 708
    },
    "classification": {
      "type": "Server Scripts",
      "category": "Backend > Server",
      "confidence": 7
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "axios",
        "line": 9
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 13,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\n/**\r\n * Comprehensive API Route Tester\r\n * \r\n * Tests all API routes to identify which ones are working and which have issues\r\n */\r\n\r\nconst axios = require('axios');\r\n\r\nclass ApiRouteTester {\r\n  constructor() {\r\n    this.baseUrl = process.env.[REDACTED] || 'http://localhost:3001';\r\n    this.results = [];\r\n  }\r\n\r\n  async testRoute(method, path, description, options = {}) {\r\n    const url = `${this.baseUrl}${path}`;\r\n    const expectedStatus = options.expectedStatus || 200;\r\n    \r\n    try {\r\n      console.log(`üîç ${method} ${path}`);\r\n      console.log(`    ${description}`);\r\n      \r\n      let response;\r\n      const axiosConfig = {\r\n        timeout: 10000,\r\n        validateStatus: () => true, // Don't throw on any status\r\n        ...options.config\r\n      };\r\n\r\n      if (method === 'GET') {\r\n        response = await axios.get(url, axiosConfig);\r\n      } else if (method === 'POST') {\r\n        response = await axios.post(url, options.data || {}, axiosConfig);\r\n      }\r\n\r\n      const result = {\r\n        method,\r\n        path,\r\n        description,\r\n        url,\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        contentType: response.headers['content-type'],\r\n        success: response.status === expectedStatus || (response.status >= 200 && response.status < 300),\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      if (result.success) {\r\n        console.log(`    ‚úÖ ${response.status} - Success`);\r\n      } else {\r\n        console.log(`    ‚ùå ${response.status} - ${response.statusText}`);\r\n        \r\n        if (response.status === 401) {\r\n          console.log(`    üîí Authentication required`);\r\n        } else if (response.status === 403) {\r\n          console.log(`    üö´ Permission denied`);\r\n        } else if (response.status === 404) {\r\n          console.log(`    üí• Route not found`);\r\n        } else if (response.status >= 500) {\r\n          console.log(`    üî• Server error`);\r\n          if (response.data) {\r\n            console.log(`    Error: ${JSON.stringify(response.data)}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.results.push(result);\r\n      console.log('');\r\n      return result;\r\n\r\n    } catch (error) {\r\n      const result = {\r\n        method,\r\n        path,\r\n        description,\r\n        url,\r\n        status: 'ERROR',\r\n        error: error.message,\r\n        success: false,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      console.log(`    üí• ERROR: ${error.message}`);\r\n      this.results.push(result);\r\n      console.log('');\r\n      return result;\r\n    }\r\n  }\r\n\r\n  async testAllApiRoutes() {\r\n    console.log('üîç Comprehensive API Route Testing');\r\n    console.log('=' .repeat(50));\r\n    console.log('');\r\n\r\n    // Authentication routes\r\n    console.log('üìã Authentication Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/auth/check', 'Check authentication status');\r\n    \r\n    // Admin routes\r\n    console.log('üìã Admin Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/admin/users', 'Get admin users');\r\n    await this.testRoute('GET', '/api/admin/churches', 'Get admin churches');\r\n    await this.testRoute('GET', '/api/admin/logs', 'Get admin logs');\r\n    \r\n    // Church management routes\r\n    console.log('üìã Church Management Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/churches', 'Get all churches');\r\n    \r\n    // Template routes\r\n    console.log('üìã Template Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/templates', 'Get all templates');\r\n    await this.testRoute('GET', '/api/templates/global/available', 'Get global templates');\r\n    await this.testRoute('GET', '/api/templates/types/record-types', 'Get record types');\r\n    \r\n    // Record routes\r\n    console.log('üìã Record Management Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/baptism-records', 'Get baptism records');\r\n    await this.testRoute('GET', '/api/marriage-records', 'Get marriage records');\r\n    await this.testRoute('GET', '/api/funeral-records', 'Get funeral records');\r\n    \r\n    // Other API routes\r\n    console.log('üìã Other API Routes');\r\n    console.log('-'.repeat(30));\r\n    await this.testRoute('GET', '/api/liturgical-calendar', 'Get liturgical calendar');\r\n    await this.testRoute('GET', '/api/unique-values', 'Get unique values');\r\n    await this.testRoute('GET', '/api/notes', 'Get notes');\r\n    \r\n    this.printSummary();\r\n  }\r\n\r\n  printSummary() {\r\n    console.log('üìä API ROUTE TEST SUMMARY');\r\n    console.log('=' .repeat(50));\r\n    \r\n    const total = this.results.length;\r\n    const successful = this.results.filter(r => r.success).length;\r\n    const authRequired = this.results.filter(r => r.status === 401).length;\r\n    const permissionDenied = this.results.filter(r => r.status === 403).length;\r\n    const notFound = this.results.filter(r => r.status === 404).length;\r\n    const serverErrors = this.results.filter(r => r.status >= 500).length;\r\n    const networkErrors = this.results.filter(r => r.status === 'ERROR').length;\r\n\r\n    console.log(`Total routes tested: ${total}`);\r\n    console.log(`Successful: ${successful} (${((successful / total) * 100).toFixed(1)}%)`);\r\n    console.log(`Authentication required (401): ${authRequired}`);\r\n    console.log(`Permission denied (403): ${permissionDenied}`);\r\n    console.log(`Not found (404): ${notFound}`);\r\n    console.log(`Server errors (500+): ${serverErrors}`);\r\n    console.log(`Network errors: ${networkErrors}`);\r\n    console.log('');\r\n\r\n    if (authRequired > 0) {\r\n      console.log('üîí AUTHENTICATION REQUIRED:');\r\n      this.results.filter(r => r.status === 401).forEach(r => {\r\n        console.log(`   ${r.method} ${r.path} - ${r.description}`);\r\n      });\r\n      console.log('   üí° These routes require login - try browser session test');\r\n      console.log('');\r\n    }\r\n\r\n    if (notFound > 0) {\r\n      console.log('üí• ROUTES NOT FOUND:');\r\n      this.results.filter(r => r.status === 404).forEach(r => {\r\n        console.log(`   ${r.method} ${r.path} - ${r.description}`);\r\n      });\r\n      console.log('   üí° Check route definitions and middleware');\r\n      console.log('');\r\n    }\r\n\r\n    if (serverErrors > 0) {\r\n      console.log('üî• SERVER ERRORS:');\r\n      this.results.filter(r => r.status >= 500).forEach(r => {\r\n        console.log(`   ${r.method} ${r.path} - ${r.description}`);\r\n      });\r\n      console.log('   üí° Check server logs and database connectivity');\r\n      console.log('');\r\n    }\r\n\r\n    if (permissionDenied > 0) {\r\n      console.log('üö´ PERMISSION DENIED (CRITICAL):');\r\n      this.results.filter(r => r.status === 403).forEach(r => {\r\n        console.log(`   ${r.method} ${r.path} - ${r.description}`);\r\n      });\r\n      console.log('   üí° These should be accessible to superadmin!');\r\n      console.log('');\r\n    }\r\n\r\n    console.log('üí° NEXT STEPS:');\r\n    console.log('-'.repeat(30));\r\n    if (authRequired > 0) {\r\n      console.log('1. For 401 errors: Run browser session test with login cookies');\r\n      console.log('   npm run check:session -- --cookie \"your-session-cookie\"');\r\n    }\r\n    if (serverErrors > 0) {\r\n      console.log('2. For 500 errors: Run specific diagnostic scripts');\r\n      console.log('   npm run debug:churches');\r\n    }\r\n    if (notFound > 0) {\r\n      console.log('3. For 404 errors: Check route definitions in server/routes/');\r\n    }\r\n    \r\n    console.log('');\r\n    console.log('‚úÖ API route testing complete!');\r\n  }\r\n}\r\n\r\n// Run if called directly\r\nif (require.main === module) {\r\n  const tester = new ApiRouteTester();\r\n  tester.testAllApiRoutes().catch(error => {\r\n    console.error('‚ùå API route testing failed:', error);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\nmodule.exports = ApiRouteTester;\r\n"
    },
    "complexity": {
      "totalLines": 224,
      "codeLines": 178,
      "commentLines": 13,
      "commentRatio": 0.06806282722513089,
      "averageLineLength": 39.38743455497382
    },
    "lastAnalyzed": "2025-07-28T07:20:01.195Z"
  },
  "contentHash": "ed24c94e47157861196993dd285ca9fc39adeb18d55a48364181dcc6efbf376d",
  "discoveredAt": "2025-07-28T07:20:01.195Z"
}