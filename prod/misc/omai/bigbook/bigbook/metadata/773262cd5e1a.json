{
  "id": "773262cd5e1a",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/scripts/create-fixed-test-user.js",
  "relativePath": "server/scripts/create-fixed-test-user.js",
  "name": "create-fixed-test-user.js",
  "extension": ".js",
  "size": 3802,
  "modified": "2025-07-20T18:32:04.866Z",
  "created": "2025-07-20T18:29:06.678Z",
  "classification": {
    "type": "Testing Scripts",
    "category": "DevOps > Test",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 95,
      "characters": 3784,
      "words": 347
    },
    "classification": {
      "type": "Testing Scripts",
      "category": "DevOps > Test",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 1
      },
      {
        "type": "npm_package",
        "name": "bcrypt",
        "line": 2
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 16,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "const path = require('path');\r\nconst bcrypt = require('bcrypt');\r\nconst DatabaseService = require('../services/databaseService');\r\n\r\n/**\r\n * Fixed Test User Creation Script\r\n * Using correct database access pattern: result[0] for data, result[1] for metadata\r\n */\r\n\r\nasync function createTestUser() {\r\n    console.log('üë§ CREATING TEST USER WITH CORRECT DATABASE ACCESS');\r\n    console.log('========================================');\r\n\r\n    try {\r\n        const testEmail = 'test@orthodoxmetrics.com';\r\n        const testPassword = '[REDACTED]';\r\n        const testRole = 'admin';\r\n        const testFirstName = 'Test';\r\n        const testLastName = 'User';\r\n\r\n        // Check if user already exists using correct access pattern\r\n        console.log('\\n1. Checking if test user already exists...');\r\n        const existingResult = await DatabaseService.queryPlatform(\r\n            'SELECT id, email, role FROM users WHERE email = ?', \r\n            [testEmail]\r\n        );\r\n        const existingData = existingResult[0]; // Correct access to data rows\r\n        \r\n        if (existingData.length > 0) {\r\n            const existingUser = existingData[0];\r\n            console.log(`‚úÖ Test user already exists:`);\r\n            console.log(`   ID: ${existingUser.id}`);\r\n            console.log(`   Email: ${existingUser.email}`);\r\n            console.log(`   Role: ${existingUser.role}`);\r\n            return existingUser;\r\n        }\r\n\r\n        // Hash the password\r\n        console.log('\\n2. Hashing password...');\r\n        const saltRounds = 10;\r\n        const hashedPassword = await bcrypt.hash(testPassword, saltRounds);\r\n        console.log('‚úÖ Password hashed successfully');\r\n\r\n        // Create the user\r\n        console.log('\\n3. Creating test user...');\r\n        const insertResult = await DatabaseService.queryPlatform(\r\n            'INSERT INTO users (email, password_hash, first_name, last_name, role, created_at) VALUES (?, ?, ?, ?, ?, NOW())',\r\n            [testEmail, hashedPassword, testFirstName, testLastName, testRole]\r\n        );\r\n        console.log('‚úÖ User creation query executed');\r\n\r\n        // Get the newly created user\r\n        console.log('\\n4. Retrieving newly created user...');\r\n        const newUserResult = await DatabaseService.queryPlatform(\r\n            'SELECT id, email, role, created_at FROM users WHERE email = ?', \r\n            [testEmail]\r\n        );\r\n        const newUserData = newUserResult[0]; // Correct access to data rows\r\n        \r\n        if (newUserData.length > 0) {\r\n            const newUser = newUserData[0];\r\n            console.log(`‚úÖ Test user created successfully:`);\r\n            console.log(`   ID: ${newUser.id}`);\r\n            console.log(`   Email: ${newUser.email}`);\r\n            console.log(`   Role: ${newUser.role}`);\r\n            console.log(`   Created: ${newUser.created_at}`);\r\n            \r\n            // Test login with the new user\r\n            console.log('\\n5. Testing password verification...');\r\n            const isValid = await bcrypt.compare(testPassword, hashedPassword);\r\n            console.log(`‚úÖ Password verification: ${isValid ? 'PASSED' : 'FAILED'}`);\r\n            \r\n            return newUser;\r\n        } else {\r\n            throw new Error('Failed to retrieve newly created user');\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('‚ùå Error creating test user:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Run the script\r\ncreateTestUser()\r\n    .then((user) => {\r\n        console.log('\\nüéâ TEST USER CREATION COMPLETED');\r\n        console.log(`Final user: ID=${user.id}, Email=${user.email}, Role=${user.role}`);\r\n        process.exit(0);\r\n    })\r\n    .catch((error) => {\r\n        console.error('\\n‚ùå Test user creation failed:', error);\r\n        process.exit(1);\r\n    });\r\n"
    },
    "complexity": {
      "totalLines": 95,
      "codeLines": 71,
      "commentLines": 10,
      "commentRatio": 0.12345679012345678,
      "averageLineLength": 44.901234567901234
    },
    "lastAnalyzed": "2025-07-28T07:20:01.016Z"
  },
  "contentHash": "223962a3a5c7957099248cd88398ccab2956e72ef15ffa45c8bf8f51d4c6135d",
  "discoveredAt": "2025-07-28T07:20:01.017Z"
}