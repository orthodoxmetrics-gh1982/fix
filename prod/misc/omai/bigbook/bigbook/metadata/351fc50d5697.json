{
  "id": "351fc50d5697",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/bigbook/metadata/aeb3bdd6c667.json",
  "relativePath": "bigbook/metadata/aeb3bdd6c667.json",
  "name": "aeb3bdd6c667.json",
  "extension": ".json",
  "size": 4410,
  "modified": "2025-07-26T04:17:11.798Z",
  "created": "2025-07-26T04:17:11.798Z",
  "classification": {
    "type": "Configuration",
    "category": "Configuration",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 56,
      "characters": 4410,
      "words": 376
    },
    "classification": {
      "type": "Configuration",
      "category": "Configuration",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "mysql2/promise",
        "line": 43
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 43,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "{\n  \"id\": \"aeb3bdd6c667\",\n  \"originalPath\": \"/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/utils/test-church-creation.js\",\n  \"relativePath\": \"server/utils/test-church-creation.js\",\n  \"name\": \"test-church-creation.js\",\n  \"extension\": \".js\",\n  \"size\": 2732,\n  \"modified\": \"2025-07-04T23:08:01.000Z\",\n  \"created\": \"2025-07-09T00:48:38.534Z\",\n  \"classification\": {\n    \"type\": \"Server Scripts\",\n    \"category\": \"Backend > Server\",\n    \"confidence\": 3\n  },\n  \"metadata\": {\n    \"fileStats\": {\n      \"lines\": 99,\n      \"characters\": 2732,\n      \"words\": 273\n    },\n    \"classification\": {\n      \"type\": \"Server Scripts\",\n      \"category\": \"Backend > Server\",\n      \"confidence\": 3\n    },\n    \"dependencies\": [\n      {\n        \"type\": \"npm_package\",\n        \"name\": \"mysql2/promise\",\n        \"line\": 2\n      }\n    ],\n    \"security\": {\n      \"findings\": [\n        {\n          \"type\": \"sensitive_data\",\n          \"pattern\": \"(?:password|pwd|pass)\\\\s*[:=]\\\\s*['\\\"]([^'\\\"]+)['\\\"]\",\n          \"line\": 8,\n          \"redacted\": true\n        }\n      ],\n      \"hasSecurityIssues\": true,\n      \"redactedContent\": \"// Test script to verify church creation fix\\r\\nconst mysql = require('mysql2/promise');\\r\\n\\r\\nasync function testChurchCreation() {\\r\\n  const pool = mysql.createPool({\\r\\n    host: 'localhost',\\r\\n    user: 'ssppoc_user',\\r\\n    password: '[REDACTED]',\\r\\n    database: 'ssppoc_records_db',\\r\\n    waitForConnections: true,\\r\\n    connectionLimit: 10,\\r\\n    queueLimit: 0\\r\\n  });\\r\\n\\r\\n  try {\\r\\n    // Test the INSERT that was failing\\r\\n    console.log('Testing church creation...');\\r\\n    \\r\\n    const church_name = 'Test Church';\\r\\n    const location = 'Test City';\\r\\n    const country = 'USA';\\r\\n    const language_preference = 'en';\\r\\n    const admin_email = 'test@test.com';\\r\\n    const timezone = 'America/New_York';\\r\\n    const is_active = true;\\r\\n\\r\\n    // First, check table structure\\r\\n    console.log('Checking table structure...');\\r\\n    const [columns] = await pool.query('DESCRIBE churches');\\r\\n    console.log('Churches table columns:', columns.map(col => col.Field));\\r\\n\\r\\n    // Try the INSERT with both name and church_name\\r\\n    const [result] = await pool.query(`\\r\\n      INSERT INTO churches (\\r\\n        name,\\r\\n        church_name,\\r\\n        city,\\r\\n        country,\\r\\n        language_preference,\\r\\n        admin_email,\\r\\n        timezone,\\r\\n        is_active\\r\\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\\r\\n    `, [\\r\\n      church_name, // Use church_name for both name and church_name fields\\r\\n      church_name,\\r\\n      location,\\r\\n      country,\\r\\n      language_preference,\\r\\n      admin_email,\\r\\n      timezone,\\r\\n      is_active\\r\\n    ]);\\r\\n\\r\\n    console.log('Church created successfully with ID:', result.insertId);\\r\\n\\r\\n    // Clean up test data\\r\\n    await pool.query('DELETE FROM churches WHERE id = ?', [result.insertId]);\\r\\n    console.log('Test data cleaned up');\\r\\n\\r\\n  } catch (error) {\\r\\n    console.error('Error testing church creation:', error);\\r\\n    \\r\\n    // If the above failed, try without the name column\\r\\n    try {\\r\\n      console.log('Trying without name column...');\\r\\n      const [result2] = await pool.query(`\\r\\n        INSERT INTO churches (\\r\\n          church_name,\\r\\n          city,\\r\\n          country,\\r\\n          language_preference,\\r\\n          admin_email,\\r\\n          timezone,\\r\\n          is_active\\r\\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\\r\\n      `, [\\r\\n        'Test Church 2',\\r\\n        'Test City',\\r\\n        'USA',\\r\\n        'en',\\r\\n        'test2@test.com',\\r\\n        'America/New_York',\\r\\n        true\\r\\n      ]);\\r\\n      \\r\\n      console.log('Church created without name column, ID:', result2.insertId);\\r\\n      await pool.query('DELETE FROM churches WHERE id = ?', [result2.insertId]);\\r\\n      \\r\\n    } catch (error2) {\\r\\n      console.error('Both methods failed:', error2);\\r\\n    }\\r\\n  } finally {\\r\\n    await pool.end();\\r\\n  }\\r\\n}\\r\\n\\r\\ntestChurchCreation();\\r\\n\"\n    },\n    \"complexity\": {\n      \"totalLines\": 99,\n      \"codeLines\": 80,\n      \"commentLines\": 6,\n      \"commentRatio\": 0.06976744186046512,\n      \"averageLineLength\": 30.25581395348837\n    },\n    \"lastAnalyzed\": \"2025-07-26T04:17:11.800Z\"\n  },\n  \"contentHash\": \"9c69d03e4b294c47452b17783a529362c8ca4b8abb050df758150af107efd7f5\",\n  \"discoveredAt\": \"2025-07-26T04:17:11.800Z\"\n}"
    },
    "complexity": {
      "totalLines": 56,
      "codeLines": 56,
      "commentLines": 0,
      "commentRatio": 0,
      "averageLineLength": 77.76785714285714
    },
    "lastAnalyzed": "2025-07-28T07:19:57.353Z"
  },
  "contentHash": "1eb8ac19f56a943344d4fc2a7f96c2c5651850fdb880ca542a3b1d7b9d12a735",
  "discoveredAt": "2025-07-28T07:19:57.353Z"
}