{
  "id": "6e07d18a1094",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/clear-old-sessions.js",
  "relativePath": "server/debug/clear-old-sessions.js",
  "name": "clear-old-sessions.js",
  "extension": ".js",
  "size": 3808,
  "modified": "2025-07-24T14:50:26.356Z",
  "created": "2025-07-24T14:50:26.356Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 106,
      "characters": 3768,
      "words": 362
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "path",
        "line": 7
      },
      {
        "type": "npm_package",
        "name": "fs",
        "line": 8
      },
      {
        "type": "npm_package",
        "name": "dotenv",
        "line": 23
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 34,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 34,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 35,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 35,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 36,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 36,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 37,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 37,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 38,
          "redacted": true
        },
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 38,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/usr/bin/env node\r\n\r\nconsole.log('🧹 CLEARING OLD SESSIONS FOR DEBUG');\r\nconsole.log('==================================');\r\n\r\n// Load environment variables - try multiple locations\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n// Try loading from various possible locations\r\nconst envPaths = [\r\n  path.resolve(__dirname, '../.env.production'),\r\n  path.resolve(__dirname, '../../.env.production'), \r\n  path.resolve(__dirname, '../.env'),\r\n  path.resolve(__dirname, '../../.env')\r\n];\r\n\r\nconsole.log('🔧 Loading environment variables...');\r\nlet envLoaded = false;\r\nfor (const envPath of envPaths) {\r\n  if (fs.existsSync(envPath)) {\r\n    console.log(`   ✅ Found env file: ${envPath}`);\r\n    require('dotenv').config({ path: envPath });\r\n    envLoaded = true;\r\n    break;\r\n  }\r\n}\r\n\r\nif (!envLoaded) {\r\n  console.log('   ⚠️  No .env file found, using system environment');\r\n}\r\n\r\n// Set production environment variables as fallback\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'production';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'localhost';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'orthodoxapps';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'Summerof1982@!';\r\nprocess.env.[REDACTED] = process.env.[REDACTED] || 'orthodoxmetrics_db';\r\n\r\nconst { promisePool } = require('../../config/db');\r\n\r\nasync function clearOldSessions() {\r\n  try {\r\n    console.log('\\n1️⃣ CHECKING CURRENT SESSIONS:');\r\n    console.log('-----------------------------');\r\n    \r\n    // Count current sessions\r\n    const [sessionCount] = await promisePool.query('SELECT COUNT(*) as count FROM sessions');\r\n    console.log(`📊 Current sessions in database: ${sessionCount[0].count}`);\r\n    \r\n    // Show recent sessions with data (if any)\r\n    const [recentSessions] = await promisePool.query(`\r\n      SELECT session_id, expires, \r\n             CASE \r\n               WHEN data LIKE '%\"email\"%' THEN 'HAS_USER_DATA'\r\n               ELSE 'NO_USER_DATA'\r\n             END as has_user,\r\n             LENGTH(data) as data_size\r\n      FROM sessions \r\n      ORDER BY expires DESC \r\n      LIMIT 10\r\n    `);\r\n    \r\n    if (recentSessions.length > 0) {\r\n      console.log('\\n📋 Recent sessions:');\r\n      recentSessions.forEach((session, i) => {\r\n        const expires = new Date(session.expires);\r\n        const isExpired = expires < new Date();\r\n        console.log(`   ${i+1}. ${session.session_id.substring(0, 20)}... (${session.has_user}) ${isExpired ? '⏰ EXPIRED' : '✅ ACTIVE'}`);\r\n      });\r\n    }\r\n    \r\n    console.log('\\n2️⃣ CLEARING OLD/EXPIRED SESSIONS:');\r\n    console.log('----------------------------------');\r\n    \r\n    // Clear expired sessions\r\n    const [expiredResult] = await promisePool.query('DELETE FROM sessions WHERE expires < NOW()');\r\n    console.log(`🗑️  Removed ${expiredResult.affectedRows} expired sessions`);\r\n    \r\n    // For debugging, let's keep only the most recent 5 sessions\r\n    const [cleanupResult] = await promisePool.query(`\r\n      DELETE FROM sessions \r\n      WHERE session_id NOT IN (\r\n        SELECT session_id FROM (\r\n          SELECT session_id FROM sessions ORDER BY expires DESC LIMIT 5\r\n        ) as recent_sessions\r\n      )\r\n    `);\r\n    console.log(`🧹 Kept only 5 most recent sessions (removed ${cleanupResult.affectedRows} others)`);\r\n    \r\n    // Final count\r\n    const [finalCount] = await promisePool.query('SELECT COUNT(*) as count FROM sessions');\r\n    console.log(`📊 Sessions remaining: ${finalCount[0].count}`);\r\n    \r\n    console.log('\\n✅ Session cleanup complete!');\r\n    console.log('💡 Now login and watch the logs to see session behavior.');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error clearing sessions:', error.message);\r\n    process.exit(1);\r\n  }\r\n  \r\n  process.exit(0);\r\n}\r\n\r\nclearOldSessions(); "
    },
    "complexity": {
      "totalLines": 106,
      "codeLines": 78,
      "commentLines": 9,
      "commentRatio": 0.10344827586206896,
      "averageLineLength": 41.44827586206897
    },
    "lastAnalyzed": "2025-07-28T07:20:00.089Z"
  },
  "contentHash": "f6d5d338f7b9a1640aa9465e7bb184f431a72cacfadabb7e6d960a1b9bddb0ff",
  "discoveredAt": "2025-07-28T07:20:00.089Z"
}