{
  "id": "d63e645b43b7",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/server/debug/cookie-test.js",
  "relativePath": "server/debug/cookie-test.js",
  "name": "cookie-test.js",
  "extension": ".js",
  "size": 2930,
  "modified": "2025-07-22T03:58:17.758Z",
  "created": "2025-07-22T03:58:17.754Z",
  "classification": {
    "type": "Troubleshooting Utilities",
    "category": "Diagnostic Tools",
    "confidence": 3
  },
  "metadata": {
    "fileStats": {
      "lines": 82,
      "characters": 2900,
      "words": 260
    },
    "classification": {
      "type": "Troubleshooting Utilities",
      "category": "Diagnostic Tools",
      "confidence": 3
    },
    "dependencies": [
      {
        "type": "npm_package",
        "name": "axios",
        "line": 2
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "(?:password|pwd|pass)\\s*[:=]\\s*['\"]([^'\"]+)['\"]",
          "line": 15,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "// server/debug/cookie-test.js\r\nconst axios = require('axios');\r\n\r\nasync function testCookieFlow() {\r\n  console.log('🍪 Testing Cookie Flow');\r\n  console.log('======================');\r\n\r\n  const baseURL = 'https://orthodoxmetrics.com';\r\n  \r\n  try {\r\n    // Step 1: Login and capture cookies\r\n    console.log('\\n1. 🔐 Testing login...');\r\n    const loginResponse = await axios.post(`${baseURL}/api/auth/login`, {\r\n      username: 'superadmin@orthodoxmetrics.com',\r\n      password: '[REDACTED]' // Replace with actual password\r\n    }, {\r\n      withCredentials: true,\r\n      timeout: 10000\r\n    });\r\n\r\n    console.log('✅ Login response status:', loginResponse.status);\r\n    console.log('✅ Login response data:', loginResponse.data);\r\n    \r\n    // Check if cookies were set\r\n    const setCookieHeaders = loginResponse.headers['set-cookie'];\r\n    if (setCookieHeaders) {\r\n      console.log('✅ Cookies set by server:');\r\n      setCookieHeaders.forEach(cookie => {\r\n        console.log('   ', cookie);\r\n      });\r\n    } else {\r\n      console.log('❌ No cookies set by server');\r\n    }\r\n\r\n    // Step 2: Make an authenticated request\r\n    console.log('\\n2. 🔐 Testing authenticated request...');\r\n    \r\n    // Create a new axios instance with the cookies\r\n    const authenticatedAxios = axios.create({\r\n      baseURL,\r\n      withCredentials: true,\r\n      timeout: 10000\r\n    });\r\n\r\n    const authCheckResponse = await authenticatedAxios.get('/api/auth/check');\r\n    \r\n    console.log('✅ Auth check response status:', authCheckResponse.status);\r\n    console.log('✅ Auth check response data:', authCheckResponse.data);\r\n\r\n    // Step 3: Test User Management endpoint\r\n    console.log('\\n3. 👥 Testing User Management endpoint...');\r\n    \r\n    const usersResponse = await authenticatedAxios.get('/api/admin/users');\r\n    \r\n    console.log('✅ Users response status:', usersResponse.status);\r\n    console.log('✅ Users response data (first 100 chars):', \r\n      JSON.stringify(usersResponse.data).substring(0, 100) + '...');\r\n\r\n    console.log('\\n🎉 All tests passed! Cookie flow is working correctly.');\r\n\r\n  } catch (error) {\r\n    console.error('\\n❌ Cookie test failed:');\r\n    \r\n    if (error.response) {\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.message);\r\n    } else {\r\n      console.error('Request setup error:', error.message);\r\n    }\r\n\r\n    console.log('\\n🔍 Debugging suggestions:');\r\n    console.log('1. Check if server is running and accessible');\r\n    console.log('2. Verify login credentials are correct');\r\n    console.log('3. Check server logs for authentication errors');\r\n    console.log('4. Verify CORS and session configuration');\r\n  }\r\n}\r\n\r\ntestCookieFlow(); "
    },
    "complexity": {
      "totalLines": 82,
      "codeLines": 59,
      "commentLines": 6,
      "commentRatio": 0.09230769230769231,
      "averageLineLength": 42.707692307692305
    },
    "lastAnalyzed": "2025-07-28T07:20:00.093Z"
  },
  "contentHash": "cc6a97635601ad85e6dae4efe6e69a95d9c4c4742688d88a85fd91a1a516e415",
  "discoveredAt": "2025-07-28T07:20:00.093Z"
}