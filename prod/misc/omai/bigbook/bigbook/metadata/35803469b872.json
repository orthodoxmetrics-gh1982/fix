{
  "id": "35803469b872",
  "originalPath": "/var/www/orthodox-church-mgmt/orthodoxmetrics/prod/scripts/7-26-25/setup-frontend-backend-connection.sh",
  "relativePath": "scripts/7-26-25/setup-frontend-backend-connection.sh",
  "name": "setup-frontend-backend-connection.sh",
  "extension": ".sh",
  "size": 8160,
  "modified": "2025-07-24T22:24:05.273Z",
  "created": "2025-07-24T22:24:00.661Z",
  "classification": {
    "type": "Setup Scripts",
    "category": "DevOps > Setup",
    "confidence": 4
  },
  "metadata": {
    "fileStats": {
      "lines": 273,
      "characters": 8118,
      "words": 1010
    },
    "classification": {
      "type": "Setup Scripts",
      "category": "DevOps > Setup",
      "confidence": 4
    },
    "dependencies": [
      {
        "type": "system_command",
        "name": "npm",
        "line": 146
      },
      {
        "type": "system_command",
        "name": "npm",
        "line": 154
      },
      {
        "type": "system_command",
        "name": "npm",
        "line": 210
      },
      {
        "type": "system_command",
        "name": "npm",
        "line": 225
      },
      {
        "type": "system_command",
        "name": "npm",
        "line": 264
      },
      {
        "type": "system_command",
        "name": "npm",
        "line": 265
      }
    ],
    "security": {
      "findings": [
        {
          "type": "sensitive_data",
          "pattern": "process\\.env\\.([A-Z_]+)",
          "line": 58,
          "redacted": true
        }
      ],
      "hasSecurityIssues": true,
      "redactedContent": "#!/bin/bash\n\n# OrthodoxMetrics Frontend-Backend Connection Setup Script\n# This script helps configure and test the connection between frontend and backend\n\nset -e\n\necho \"🔧 Setting up Frontend-Backend Connection for OrthodoxMetrics\"\necho \"==============================================================\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if we're in the right directory\nif [ ! -f \"server/index.js\" ] || [ ! -f \"front-end/package.json\" ]; then\n    print_error \"Please run this script from the project root directory (where server/ and front-end/ folders are located)\"\n    exit 1\nfi\n\nprint_status \"Current directory: $(pwd)\"\n\n# Step 1: Create development environment file for frontend\nprint_status \"Creating frontend environment configuration...\"\n\ncat > front-end/.env.development << EOF\n# Development Environment Configuration\nVITE_API_BASE_URL=http://localhost:3001\nVITE_APP_ENV=development\nVITE_APP_VERSION=5.0.0\nEOF\n\nprint_success \"Created front-end/.env.development\"\n\n# Step 2: Verify backend configuration\nprint_status \"Checking backend configuration...\"\n\nif grep -q \"const PORT = process.env.[REDACTED] || 3001\" server/index.js; then\n    print_success \"Backend configured to run on port 3001\"\nelse\n    print_warning \"Backend port configuration not found in expected location\"\nfi\n\n# Step 3: Verify frontend proxy configuration\nprint_status \"Checking frontend proxy configuration...\"\n\nif grep -q \"target: 'http://localhost:3001'\" front-end/vite.config.ts; then\n    print_success \"Frontend proxy configured to backend port 3001\"\nelse\n    print_warning \"Frontend proxy configuration not found\"\nfi\n\n# Step 4: Check if backend dependencies are installed\nprint_status \"Checking backend dependencies...\"\n\nif [ -d \"server/node_modules\" ]; then\n    print_success \"Backend node_modules found\"\nelse\n    print_warning \"Backend node_modules not found - you may need to run 'npm install' in server/ directory\"\nfi\n\n# Step 5: Check if frontend dependencies are installed\nprint_status \"Checking frontend dependencies...\"\n\nif [ -d \"front-end/node_modules\" ]; then\n    print_success \"Frontend node_modules found\"\nelse\n    print_warning \"Frontend node_modules not found - you may need to run 'npm install' in front-end/ directory\"\nfi\n\n# Step 6: Create a test script to verify connection\nprint_status \"Creating connection test script...\"\n\ncat > test-frontend-backend-connection.sh << 'EOF'\n#!/bin/bash\n\n# Test script to verify frontend-backend connection\n\necho \"🧪 Testing Frontend-Backend Connection\"\necho \"======================================\"\n\n# Colors\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\n# Function to test if a port is listening\ntest_port() {\n    local port=$1\n    local service=$2\n    \n    if command -v netstat >/dev/null 2>&1; then\n        if netstat -tuln 2>/dev/null | grep -q \":$port \"; then\n            echo -e \"${GREEN}✅ $service is running on port $port${NC}\"\n            return 0\n        fi\n    elif command -v ss >/dev/null 2>&1; then\n        if ss -tuln 2>/dev/null | grep -q \":$port \"; then\n            echo -e \"${GREEN}✅ $service is running on port $port${NC}\"\n            return 0\n        fi\n    elif command -v lsof >/dev/null 2>&1; then\n        if lsof -i :$port >/dev/null 2>&1; then\n            echo -e \"${GREEN}✅ $service is running on port $port${NC}\"\n            return 0\n        fi\n    fi\n    \n    echo -e \"${RED}❌ $service is not running on port $port${NC}\"\n    return 1\n}\n\n# Test backend\necho -e \"${BLUE}Testing Backend (Port 3001)...${NC}\"\nif test_port 3001 \"Backend\"; then\n    # Test API health endpoint\n    echo -e \"${BLUE}Testing API health endpoint...${NC}\"\n    if curl -s http://localhost:3001/api/health >/dev/null 2>&1; then\n        echo -e \"${GREEN}✅ Backend API is responding${NC}\"\n    else\n        echo -e \"${YELLOW}⚠️  Backend API health check failed (this might be normal if auth is required)${NC}\"\n    fi\nelse\n    echo -e \"${YELLOW}💡 To start the backend, run: cd server && npm start${NC}\"\nfi\n\n# Test frontend\necho -e \"${BLUE}Testing Frontend (Port 5174)...${NC}\"\nif test_port 5174 \"Frontend\"; then\n    echo -e \"${GREEN}✅ Frontend is running${NC}\"\nelse\n    echo -e \"${YELLOW}💡 To start the frontend, run: cd front-end && npm run dev${NC}\"\nfi\n\necho \"\"\necho -e \"${BLUE}Connection Summary:${NC}\"\necho \"Backend:  http://localhost:3001\"\necho \"Frontend: http://localhost:5174\"\necho \"API Proxy: /api requests from frontend → backend\"\necho \"\"\necho -e \"${YELLOW}If both services are running, you should be able to access:${NC}\"\necho \"- Frontend: http://localhost:5174\"\necho \"- Backend API: http://localhost:3001/api/health\"\nEOF\n\nchmod +x test-frontend-backend-connection.sh\nprint_success \"Created test-frontend-backend-connection.sh\"\n\n# Step 7: Create startup script\nprint_status \"Creating startup script...\"\n\ncat > start-orthodoxmetrics.sh << 'EOF'\n#!/bin/bash\n\n# OrthodoxMetrics Startup Script\n# Starts both backend and frontend services\n\nset -e\n\necho \"🚀 Starting OrthodoxMetrics Services\"\necho \"====================================\"\n\n# Colors\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\n# Function to check if a process is running\nis_running() {\n    local port=$1\n    if command -v netstat >/dev/null 2>&1; then\n        netstat -tuln 2>/dev/null | grep -q \":$port \"\n    elif command -v ss >/dev/null 2>&1; then\n        ss -tuln 2>/dev/null | grep -q \":$port \"\n    elif command -v lsof >/dev/null 2>&1; then\n        lsof -i :$port >/dev/null 2>&1\n    else\n        false\n    fi\n}\n\n# Start backend if not running\nif ! is_running 3001; then\n    echo -e \"${BLUE}Starting backend on port 3001...${NC}\"\n    cd server\n    npm start &\n    BACKEND_PID=$!\n    echo -e \"${GREEN}Backend started with PID: $BACKEND_PID${NC}\"\n    cd ..\nelse\n    echo -e \"${YELLOW}Backend already running on port 3001${NC}\"\nfi\n\n# Wait a moment for backend to start\nsleep 3\n\n# Start frontend if not running\nif ! is_running 5174; then\n    echo -e \"${BLUE}Starting frontend on port 5174...${NC}\"\n    cd front-end\n    npm run dev &\n    FRONTEND_PID=$!\n    echo -e \"${GREEN}Frontend started with PID: $FRONTEND_PID${NC}\"\n    cd ..\nelse\n    echo -e \"${YELLOW}Frontend already running on port 5174${NC}\"\nfi\n\necho \"\"\necho -e \"${GREEN}🎉 OrthodoxMetrics services are starting up!${NC}\"\necho \"\"\necho -e \"${BLUE}Services:${NC}\"\necho \"- Backend:  http://localhost:3001\"\necho \"- Frontend: http://localhost:5174\"\necho \"\"\necho -e \"${YELLOW}To stop services, press Ctrl+C${NC}\"\necho -e \"${YELLOW}To test connection, run: ./test-frontend-backend-connection.sh${NC}\"\n\n# Wait for user to stop\nwait\nEOF\n\nchmod +x start-orthodoxmetrics.sh\nprint_success \"Created start-orthodoxmetrics.sh\"\n\n# Step 8: Display summary\necho \"\"\necho \"==============================================================\"\necho -e \"${GREEN}✅ Frontend-Backend Connection Setup Complete!${NC}\"\necho \"==============================================================\"\necho \"\"\necho -e \"${BLUE}What was configured:${NC}\"\necho \"1. ✅ Created front-end/.env.development with API configuration\"\necho \"2. ✅ Verified backend runs on port 3001\"\necho \"3. ✅ Verified frontend proxy configuration\"\necho \"4. ✅ Created test script: test-frontend-backend-connection.sh\"\necho \"5. ✅ Created startup script: start-orthodoxmetrics.sh\"\necho \"\"\necho -e \"${BLUE}Next steps:${NC}\"\necho \"1. Start the backend: cd server && npm start\"\necho \"2. Start the frontend: cd front-end && npm run dev\"\necho \"3. Test connection: ./test-frontend-backend-connection.sh\"\necho \"4. Or use the startup script: ./start-orthodoxmetrics.sh\"\necho \"\"\necho -e \"${BLUE}Access URLs:${NC}\"\necho \"- Frontend: http://localhost:5174\"\necho \"- Backend API: http://localhost:3001\"\necho \"\"\necho -e \"${YELLOW}Note: The frontend will proxy /api requests to the backend automatically${NC}\" "
    },
    "complexity": {
      "totalLines": 273,
      "codeLines": 195,
      "commentLines": 31,
      "commentRatio": 0.13716814159292035,
      "averageLineLength": 34.68141592920354
    },
    "lastAnalyzed": "2025-07-28T07:19:59.032Z"
  },
  "contentHash": "6785ef10bac6eaa00c42a1f29d94ef0ed11100014f31ba5c7b50663fecd01afe",
  "discoveredAt": "2025-07-28T07:19:59.032Z"
}