=== State Management Analysis ===
File: front-end/src/vite-env.d.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/pages/omb/types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/pages/omb/sample-icons.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/testAuthFix.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/logger.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/thumbnailGenerator.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/globalErrorHandler.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/invoicePDFGenerator.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/authErrorHandler.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/arrayUtils.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/roles.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/devLogger.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/axiosInterceptor.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/generateDummyRecords.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/utils/i18n.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/hooks/useInspectorState.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useCallback, useRef } from 'react';
import { ComponentInfo } from './useComponentRegistry';
export const useInspectorState = (): InspectorState & InspectorActions => {
  const [state, setState] = useState<InspectorState>({
  const stateRef = useRef(state);
  const openInspector = useCallback((component: ComponentInfo) => {
  const closeInspector = useCallback(() => {
  const selectComponent = useCallback((component: ComponentInfo | null) => {
  const toggleEditMode = useCallback(() => {
  const updatePendingChanges = useCallback((changes: Record<string, any>) => {
  const applyChanges = useCallback(() => {
  const discardChanges = useCallback(() => {
  const goBack = useCallback(() => {
  const goForward = useCallback(() => {
  const clearHistory = useCallback(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useFilteredMenuItems.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useMemo, useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useMenuVisibility } from '../contexts/MenuVisibilityContext';
import { useDynamicMenuPermissions } from './useDynamicMenuPermissions';
import { useAddonsRegistry } from '../components/registry/ComponentRegistry';
export const useFilteredMenuItems = () => {
    const { user, hasRole, isSuperAdmin } = useAuth();
    const { visibleMenus, extrasEnabled } = useMenuVisibility();
        useStaticPermissions 
    } = useDynamicMenuPermissions();
    const { registry: addonsRegistry, loading: addonsLoading } = useAddonsRegistry();
    const [componentStatus, setComponentStatus] = useState<{ [componentName: string]: boolean }>({});
    const [componentsLoading, setComponentsLoading] = useState(true);
    useEffect(() => {
    const filteredMenuItems = useMemo(() => {
                componentName: 'useFilteredMenuItems',
        if (isSocialEnabled() && !useStaticPermissions) {
    }, [visibleMenus, extrasEnabled, user, hasRole, isSuperAdmin, hasSocialAccess, isSocialEnabled, useStaticPermissions, addonsRegistry, addonsLoading, componentStatus, componentsLoading]);

=== State Management Analysis ===
File: front-end/src/hooks/useOcrSettings.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
 * useOcrSettings Hook
import { useState, useEffect, useCallback } from 'react';
export const useOcrSettings = (churchId: string) => {
  const [settings, setSettings] = useState<OcrSettings | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasChanges, setHasChanges] = useState(false);
  const fetchSettings = useCallback(async () => {
  const getDefaultSettings = useCallback((): OcrSettings => {
  const updateSetting = useCallback(<K extends keyof OcrSettings>(
  const saveSettings = useCallback(async () => {
  const resetSettings = useCallback(() => {
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useProfileSync.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
export const useProfileSync = (defaultImage?: string): ProfileSyncReturn => {
    const { user, refreshAuth } = useAuth();
    const [profileImage, setProfileImage] = useState(defaultImage || '/src/assets/images/profile/user-1.jpg');
    const [profileData, setProfileData] = useState<ProfileData | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const loadProfile = useCallback(async () => {
    const updateProfileImage = useCallback(async (imageUrl: string) => {
    const updateProfile = useCallback(async (updates: Partial<ProfileData>) => {
    const refreshProfile = useCallback(async () => {
    useEffect(() => {
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useClientManagement.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useEffect } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
export const useClients = (page = 1, limit = 10, search?: string) => {
    return useQuery({
export const useClient = (clientId: number) => {
    return useQuery({
export const useCreateClient = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useUpdateClient = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useDeleteClient = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useClientStats = (clientId: number) => {
    return useQuery({
export const useUpdateClientStatus = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useChurchInfo = (clientSlug: string) => {
    return useQuery({
export const useUpdateChurchInfo = (clientSlug: string) => {
    const queryClient = useQueryClient();
    return useMutation({
export const useClientBaptisms = (clientSlug: string, page = 1, limit = 10) => {
    return useQuery({
export const useClientMarriages = (clientSlug: string, page = 1, limit = 10) => {
    return useQuery({
export const useClientFunerals = (clientSlug: string, page = 1, limit = 10) => {
    return useQuery({
export const useClientStatistics = (clientSlug: string) => {
    return useQuery({
export const useTestClientConnection = () => {
    return useMutation({
export const useTemplates = () => {
    return useQuery({
export const useDeployTemplate = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useCloneTemplate = () => {
    const queryClient = useQueryClient();
    return useMutation({
export const useClientSelection = () => {
    const [selectedClient, setSelectedClient] = useState<Client | null>(null);
    const [selectedClientSlug, setSelectedClientSlug] = useState<string>('');
export const usePagination = (initialPage = 1, initialLimit = 10) => {
    const [page, setPage] = useState(initialPage);
    const [limit, setLimit] = useState(initialLimit);

=== State Management Analysis ===
File: front-end/src/hooks/useComponentRegistry.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useEffect, useCallback, useRef } from 'react';
export const useComponentRegistry = (): ComponentRegistry => {
  const [components] = useState(() => new Map<string, ComponentInfo>());
  const registryRef = useRef<ComponentRegistry>();
  const registerComponent = useCallback((info: ComponentInfo) => {
  const unregisterComponent = useCallback((id: string) => {
  const getComponentById = useCallback((id: string) => {
  const getComponentsInArea = useCallback((x: number, y: number, radius: number = 50) => {
  const getAllComponents = useCallback(() => {
  const clearRegistry = useCallback(() => {
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useDynamicMenuPermissions.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
    useStaticPermissions: boolean;
export const useDynamicMenuPermissions = () => {
    const { user } = useAuth();
    const [permissions, setPermissions] = useState<DynamicMenuPermission[]>([]);
    const [hasSocialAccess, setHasSocialAccess] = useState(false);
    const [socialPermissions, setSocialPermissions] = useState<string[]>([]);
    const [useStaticPermissions, setUseStaticPermissions] = useState(true);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
                    setUseStaticPermissions(data.useStaticPermissions || false);
    useEffect(() => {
        if (useStaticPermissions) {
        if (useStaticPermissions) {
        if (useStaticPermissions) {
        useStaticPermissions,

=== State Management Analysis ===
File: front-end/src/hooks/useOcrTests.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
 * useOcrTests Hook
import { useState, useCallback } from 'react';
export const useOcrTests = (churchId: string, userEmail?: string) => {
  const [testResults, setTestResults] = useState<TestResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [currentTest, setCurrentTest] = useState<string>('');
  const updateTestResult = useCallback((
  const runTest = useCallback(async (testName: string, endpoint: string) => {
  const runBasicTest = useCallback(async () => {
  const runAdvancedTest = useCallback(async () => {
  const runFullTest = useCallback(async () => {
  const retryFailedJobs = useCallback(async () => {
  const getOverallStatus = useCallback(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useOcrJobs.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
 * useOcrJobs Hook
import { useState, useEffect, useCallback } from 'react';
export const useOcrJobs = (churchId: string) => {
  const [jobs, setJobs] = useState<OcrJob[]>([]);
  const [stats, setStats] = useState<OcrStats>({
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const calculateStats = useCallback((jobList: OcrJob[]): OcrStats => {
  const fetchJobs = useCallback(async () => {
  const uploadFile = useCallback(async (
  const retryJob = useCallback(async (jobId: string) => {
  const deleteJob = useCallback(async (jobId: string) => {
  const getJobDetails = useCallback(async (jobId: string): Promise<OcrJob | null> => {
  const downloadJobResults = useCallback(async (jobId: string, fileName: string) => {
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/hooks/useLiturgicalCalendar.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useState, useEffect, useCallback, useMemo } from 'react';
import useSWR from 'swr';
export const useLiturgicalCalendarData = (filters: LiturgicalCalendarFilters) => {
  const { data, error, isLoading, mutate } = useSWR(
export const useLiturgicalCalendarByYear = (
export const useLiturgicalCalendarByMonth = (
export const useFastingStatus = (date: string) => {
  const { data, error, isLoading } = useSWR(
export const useSearchSaints = (query: string, language: string = 'en', limit: number = 10) => {
  const { data, error, isLoading } = useSWR(
export const useSearchFeasts = (query: string, language: string = 'en', limit: number = 10) => {
  const { data, error, isLoading } = useSWR(
export const useLiturgicalCalendarEvents = (
  const events = useMemo(() => {
export const useLiturgicalCalendarFull = (
  const { days, loading, error, refetch } = useLiturgicalCalendarByMonth(
  const events = useLiturgicalCalendarEvents(
export const useLiturgicalCalendar = (
  const [events, setEvents] = useState<any[]>([]);
  const [saints, setSaints] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const year = useMemo(() => date.getFullYear(), [date.getFullYear()]);
  const apiLanguage = useMemo(() => language === 'el' ? 'gr' : language, [language]);
  const refreshData = useCallback(async () => {
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/omai/cli/omaiLearner.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/omai/knowledge/knowledgeGraph.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
    if (path.includes('components') || content.includes('react') || content.includes('useState')) {

=== State Management Analysis ===
File: front-end/src/omai/knowledge/knowledgeIndexer.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/omai/knowledge/queryEngine.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/omai/knowledge/fileToKnowledge.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
  if (content.includes('React') || content.includes('useState') || content.includes('useEffect')) {

=== State Management Analysis ===
File: front-end/src/schemas/record-schemas.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
      fields: ['fullName', 'birthDate', 'deathDate', 'birthPlace', 'deathPlace', 'causeOfDeath']
    key: 'causeOfDeath',

=== State Management Analysis ===
File: front-end/src/views/apps/calendar/EventData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/views/apps/client-management/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/views/orthodox-calendar/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/helpers/httpClient.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/store/useTableStyleStore_new.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/store/useTableStyleStore.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
export const useTableStyleStore = (): TableStyleState => {

=== State Management Analysis ===
File: front-end/src/layouts/full/horizontal/navbar/Menudata.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/layouts/full/vertical/sidebar/SSPPOCMenuItems.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/layouts/full/vertical/sidebar/module-name.d.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/layouts/full/vertical/sidebar/MenuItems.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { useAuth } from 'src/context/AuthContext';

=== State Management Analysis ===
File: front-end/src/layouts/full/vertical/header/data.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/layouts/full/shared/customizer/typings.d.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/modules/OMLearn/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
export { SurveyResultsProvider, useSurveyResults } from './SurveyResultsContext';
export { default as surveyLoader } from './SurveyLoader';
export { default as omlearnAPI } from './omlearn.api';

// Types
export type { Survey, Question, SurveyMetadata } from './SurveyLoader';
export type { SurveyResponse, SurveySession, OMAIAnalysis, SurveySubmission } from './omlearn.api'; 

--- CUSTOM HOOKS ---
export { SurveyResultsProvider, useSurveyResults } from './SurveyResultsContext';

=== State Management Analysis ===
File: front-end/src/modules/OMLearn/omlearn.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/modules/OMLearn/SurveyResultsContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface SurveyResponse {
  questionId: string;
  answer: string | number;
  reasoning?: string;
--
}

const SurveyResultsContext = createContext<SurveyResultsContextType | undefined>(undefined);

interface SurveyResultsProviderProps {
  children: ReactNode;
}

--
  };

  const contextValue: SurveyResultsContextType = {
    getSession,
    createSession,
    updateSession,
    saveResponse,
    getResponses,
--

  return (
    <SurveyResultsContext.Provider value={contextValue}>
      {children}
    </SurveyResultsContext.Provider>
  );
};

export const useSurveyResults = (): SurveyResultsContextType => {
  const context = useContext(SurveyResultsContext);
  if (context === undefined) {
    throw new Error('useSurveyResults must be used within a SurveyResultsProvider');
  }
  return context;

--- PROVIDERS ---
interface SurveyResultsProviderProps {
  children: ReactNode;
}

const STORAGE_KEY = 'omlearn_survey_results';

export const SurveyResultsProvider: React.FC<SurveyResultsProviderProps> = ({ children }) => {
  const [sessions, setSessions] = useState<SurveySession[]>([]);

  // Load data from localStorage on mount
  useEffect(() => {
    const loadFromStorage = () => {
      try {
        const stored = localStorage.getItem(STORAGE_KEY);
        if (stored) {
          const parsed = JSON.parse(stored);
          // Convert date strings back to Date objects
--
    <SurveyResultsContext.Provider value={contextValue}>
      {children}
    </SurveyResultsContext.Provider>
  );
};

export const useSurveyResults = (): SurveyResultsContextType => {
  const context = useContext(SurveyResultsContext);
  if (context === undefined) {
    throw new Error('useSurveyResults must be used within a SurveyResultsProvider');
  }
  return context;
}; 

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
  const [sessions, setSessions] = useState<SurveySession[]>([]);
  useEffect(() => {
  useEffect(() => {
export const useSurveyResults = (): SurveyResultsContextType => {
  const context = useContext(SurveyResultsContext);
    throw new Error('useSurveyResults must be used within a SurveyResultsProvider');

=== State Management Analysis ===
File: front-end/src/modules/OMLearn/SurveyLoader.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/email.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/userProfile.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/blog.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/invoice.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/icon.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/notes.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/users.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/contact.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/kanban.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/chat.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/eCommerce.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/apps/ticket.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/calendar.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/layout/sidebar.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/client-management.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/church-records.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/church-records-advanced.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/liturgical.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/orthodox-metrics.types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/types/auth/auth.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/menuService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/aiService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/adminService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/churchService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/userService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/accountService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/liturgicalService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/authService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/om-ai/editorBridge.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/services/templateService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/testAccountService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/recordService.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/services/autoLearningAPI.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/contexts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/contexts/DynamicMenuContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useAuth } from '../context/AuthContext';
import MenuService, { MenuItem } from '../services/menuService';

interface DynamicMenuContextType {
    menuItems: MenuItem[];
--
}

const DynamicMenuContext = createContext<DynamicMenuContextType | undefined>(undefined);

interface DynamicMenuProviderProps {
    children: ReactNode;
}

--
    }, [authenticated, user?.id, user?.role]);

    const contextValue: DynamicMenuContextType = {
        menuItems,
        loading,
        error,
        refreshMenuItems,
        hasMenuItem,
--

    return (
        <DynamicMenuContext.Provider value={contextValue}>
            {children}
        </DynamicMenuContext.Provider>
    );
};

export const useDynamicMenu = (): DynamicMenuContextType => {
    const context = useContext(DynamicMenuContext);
    if (!context) {
        throw new Error('useDynamicMenu must be used within a DynamicMenuProvider');
    }
    return context;

--- PROVIDERS ---
interface DynamicMenuProviderProps {
    children: ReactNode;
}

export const DynamicMenuProvider: React.FC<DynamicMenuProviderProps> = ({ children }) => {
    const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { user, authenticated } = useAuth();

    const loadMenuItems = async () => {
        if (!authenticated || !user) {
            setMenuItems([]);
            setLoading(false);
            return;
--
        <DynamicMenuContext.Provider value={contextValue}>
            {children}
        </DynamicMenuContext.Provider>
    );
};

export const useDynamicMenu = (): DynamicMenuContextType => {
    const context = useContext(DynamicMenuContext);
    if (!context) {
        throw new Error('useDynamicMenu must be used within a DynamicMenuProvider');
    }
    return context;
};

export default DynamicMenuProvider;

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useAuth } from '../context/AuthContext';
    const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { user, authenticated } = useAuth();
    useEffect(() => {
export const useDynamicMenu = (): DynamicMenuContextType => {
    const context = useContext(DynamicMenuContext);
        throw new Error('useDynamicMenu must be used within a DynamicMenuProvider');

=== State Management Analysis ===
File: front-end/src/contexts/MenuVisibilityContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface MenuVisibilityState {
    [key: string]: boolean;
}

--
}

const MenuVisibilityContext = createContext<MenuVisibilityContextType | undefined>(undefined);

// Version for localStorage schema management
const MENU_VISIBILITY_VERSION = '1.0.0';

// Default menu visibility state - simplified for church management
--

    return (
        <MenuVisibilityContext.Provider value={{
            visibleMenus,
            extrasEnabled,
            toggleMenuVisibility,
            toggleExtras,
            resetToDefaults,

--- PROVIDERS ---
interface MenuVisibilityProviderProps {
    children: ReactNode;
}

export const MenuVisibilityProvider: React.FC<MenuVisibilityProviderProps> = ({ children }) => {
    const [visibleMenus, setVisibleMenus] = useState<MenuVisibilityState>(DEFAULT_MENU_VISIBILITY);
    const [extrasEnabled, setExtrasEnabled] = useState<boolean>(false); // Extras disabled by default
    const [isLoaded, setIsLoaded] = useState(false);

    // Load from localStorage after component mounts
    useEffect(() => {
        const loadFromStorage = () => {
            try {
                // Check if localStorage is available
                if (typeof window === 'undefined' || !window.localStorage) {
--
        <MenuVisibilityContext.Provider value={{
            visibleMenus,
            extrasEnabled,
            toggleMenuVisibility,
            toggleExtras,
            resetToDefaults,
            hideAll,
            showAll
        }}>
            {children}
        </MenuVisibilityContext.Provider>
    );
};

export const useMenuVisibility = () => {
    const context = useContext(MenuVisibilityContext);
    if (context === undefined) {
        throw new Error('useMenuVisibility must be used within a MenuVisibilityProvider');
    }
    return context;
};

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
    const [visibleMenus, setVisibleMenus] = useState<MenuVisibilityState>(DEFAULT_MENU_VISIBILITY);
    const [extrasEnabled, setExtrasEnabled] = useState<boolean>(false); // Extras disabled by default
    const [isLoaded, setIsLoaded] = useState(false);
    useEffect(() => {
    useEffect(() => {
export const useMenuVisibility = () => {
    const context = useContext(MenuVisibilityContext);
        throw new Error('useMenuVisibility must be used within a MenuVisibilityProvider');

=== State Management Analysis ===
File: front-end/src/contexts/NotificationContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';

// Types
export interface NotificationType {
    id: number;
--
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
--
    }, [authenticated, fetchCounts]);

    const value: NotificationContextType = {
        // State
        notifications,
        counts,
        preferences,
        loading,
--

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

--- PROVIDERS ---
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};

export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const { authenticated, user } = useAuth();
    const [notifications, setNotifications] = useState<NotificationType[]>([]);
    const [counts, setCounts] = useState<NotificationCounts>({
        total: 0,
        unread: 0,
        urgent: 0,
        high: 0
    });
    const [preferences, setPreferences] = useState<NotificationPreference[]>([]);
    const [loading, setLoading] = useState(false);
--
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
export const useNotifications = () => {
    const context = useContext(NotificationContext);
        throw new Error('useNotifications must be used within a NotificationProvider');
    const { authenticated, user } = useAuth();
    const [notifications, setNotifications] = useState<NotificationType[]>([]);
    const [counts, setCounts] = useState<NotificationCounts>({
    const [preferences, setPreferences] = useState<NotificationPreference[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const fetchNotifications = useCallback(async (options = {}) => {
    const fetchCounts = useCallback(async () => {
    const fetchPreferences = useCallback(async () => {
    const markAsRead = useCallback(async (id: number) => {
    const markAllAsRead = useCallback(async () => {
    const dismissNotification = useCallback(async (id: number) => {
    const updatePreferences = useCallback(async (newPreferences: NotificationPreference[]) => {
    const addNotification = useCallback((notification: NotificationType) => {
    const updateNotification = useCallback((id: number, updates: Partial<NotificationType>) => {
    const removeNotification = useCallback((id: number) => {
    const getNotificationsByCategory = useCallback((category: string) => {
    const getNotificationsByPriority = useCallback((priority: string) => {
    const getUnreadCount = useCallback(() => {
    const hasUnreadNotifications = useCallback(() => {
    useEffect(() => {
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/constants/notifications.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/autoFixEngine.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/ai/errorClassifier.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/ai/git/gitOpsBridge.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/git/prGenerator.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
      // In a real implementation, this would create the PR via Git provider API
      const apiResult = await this.createPRViaAPI(pullRequest);
      if (apiResult.success && apiResult.url) {
        pullRequest.url = apiResult.url;
        pullRequest.id = apiResult.id || pullRequest.id;
      }
      
      // Store pending PR
      this.pendingPRs.set(pullRequest.id, pullRequest);
      
      // Log PR creation
--
    // In a real implementation, this would call the Git provider's API
    // For now, simulate the API call
    return {
      success: true,
      id: pr.id,
      url: `https://github.com/orthodoxmetrics/orthodoxmetrics/pull/${pr.id}`,
      warnings: ['API integration not implemented - using simulation']
    };
  }
  
  private async updatePRViaAPI(prId: string, updates: any): Promise<{ success: boolean }> {

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/git/config.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
  // Provider settings
  provider: 'github' | 'gitlab' | 'gitea';
  apiBaseUrl?: string;
  
  // Logging
  logFilePath: string;
  enableDetailedLogging: boolean;
}

export interface GitProviderConfig {
  name: string;
  apiBaseUrl: string;
  tokenEnvVar: string;
  usernameEnvVar: string;
  emailEnvVar: string;
}

export const GIT_PROVIDERS: Record<string, GitProviderConfig> = {
  github: {
    name: 'GitHub',
    apiBaseUrl: 'https://api.github.com',
    tokenEnvVar: 'GITHUB_TOKEN',
    usernameEnvVar: 'GITHUB_USERNAME',
    emailEnvVar: 'GITHUB_EMAIL'
  },
  gitlab: {
    name: 'GitLab',
    apiBaseUrl: 'https://gitlab.com/api/v4',
--
    const provider = (process.env.OMAI_GIT_PROVIDER as 'github' | 'gitlab' | 'gitea') || 'github';
    const providerConfig = GIT_PROVIDERS[provider];
    
    return {
      // Repository settings
      repoPath: process.env.OMAI_GIT_REPO_PATH || '/var/www/orthodoxmetrics',
      remoteOrigin: process.env.OMAI_GIT_REMOTE_ORIGIN || '',
      defaultBranch: process.env.OMAI_GIT_DEFAULT_BRANCH || 'main',
      omaiBranchPrefix: process.env.OMAI_GIT_BRANCH_PREFIX || 'omai-fixes',
      
      // Authentication
      authToken: process.env[providerConfig.tokenEnvVar],
      username: process.env[providerConfig.usernameEnvVar] || 'omai-bot',
      email: process.env[providerConfig.emailEnvVar] || 'omai@orthodoxmetrics.com',
      
      // GitOps settings
      autoCommitEnabled: process.env.OMAI_GIT_AUTO_COMMIT === 'true',
      autoCreatePR: process.env.OMAI_GIT_AUTO_CREATE_PR === 'true',
      autoMergeEnabled: process.env.OMAI_GIT_AUTO_MERGE === 'false', // Default to false for safety
      requireApproval: process.env.OMAI_GIT_REQUIRE_APPROVAL === 'true',
      
      // Thresholds
      commitConfidenceThreshold: parseFloat(process.env.OMAI_GIT_COMMIT_THRESHOLD || '0.7'),
      prConfidenceThreshold: parseFloat(process.env.OMAI_GIT_PR_THRESHOLD || '0.8'),
--
      // Provider settings
      provider,
      apiBaseUrl: process.env.OMAI_GIT_API_BASE_URL || providerConfig.apiBaseUrl,
      
      // Logging
      logFilePath: process.env.OMAI_GIT_LOG_PATH || '/logs/omai/gitops.log',
      enableDetailedLogging: process.env.OMAI_GIT_DETAILED_LOGGING === 'true'
    };
  }
  
  getConfig(): GitConfig {
    return { ...this.config };
  }
--
  getProviderConfig(): GitProviderConfig {
    return GIT_PROVIDERS[this.config.provider];
  }
  
  validateConfig(): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!this.config.repoPath) {
      errors.push('Repository path is not configured');
    }
    
    if (!this.config.remoteOrigin) {

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/git/commitHandler.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/learning/regressionFeedback.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/ai/recoveryActions.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/ai/fixLogger.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/vrt/vrtConfigManager.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/vrt/vrtSecurity.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/vrt/exportUtils.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
      useCORS: true,

=== State Management Analysis ===
File: front-end/src/ai/visualTesting/diffAnalyzer.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/visualTesting/snapshotEngine.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/ai/visualTesting/confidenceAdjuster.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/ai/visualTesting/playwrightTests.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import { ComponentInfo } from '../../hooks/useComponentRegistry';

=== State Management Analysis ===
File: front-end/src/config/api.config.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/apps/ecommerce/productDetail/SliderData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/tables/tableData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/ColorPickerPopover/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/RecordPreviewPane/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/ocr/SmartSuggestionEngine.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/ocr/MappingState.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
export const useMappingState = (initialOcrLines: OcrTextLine[]) => {
  const [state, setState] = React.useState<MappingState>(() => 
  const actions = React.useMemo(() => ({

=== State Management Analysis ===
File: front-end/src/components/ocr/types.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/ocr/utils/ocrRowSplitter.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/FieldRenderer/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/react-tables/filter/FilterTableData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/react-tables/pagination/PaginationData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/ErrorBoundary/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
export const useErrorHandler = () => {

=== State Management Analysis ===
File: front-end/src/components/OCRUploader/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/forms/form-elements/autoComplete/data.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/dashboards/modern/TopPerformerData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/components/AGGridViewOnly/index.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/tools/utils/FileParser.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---

        // Context
        if (pathLower.includes('/context') || fileName.includes('context') || content.includes('createContext')) {
            return 'context';
        }

        // React components (check for JSX/TSX and React imports)
        if ((fileName.endsWith('.tsx') || fileName.endsWith('.jsx')) && 

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/globalFetcher.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/church-records.hooks.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
import useSWR from 'swr';
import useSWRMutation from 'swr/mutation';
export const useAuth = () => {
  const { data, error, isLoading, mutate } = useSWR('/auth/check', 
  const signIn = useSWRMutation('/auth/sign-in', 
  const signOut = useSWRMutation('/auth/sign-out', 
export const useHealthCheck = () => {
  const { data, error, isLoading } = useSWR('/health', 
export const useBaptismRecords = (filters?: SearchFilters) => {
  const { data, error, isLoading, mutate } = useSWR(key, 
  const createRecord = useSWRMutation('/baptism-records', 
  const updateRecord = useSWRMutation('/baptism-records', 
  const deleteRecord = useSWRMutation('/baptism-records', 
export const useBaptismRecord = (id: number) => {
  const { data, error, isLoading, mutate } = useSWR(
  const getHistory = useSWRMutation(`/baptism-records/${id}/history`, 
export const useMarriageRecords = (filters?: SearchFilters) => {
  const { data, error, isLoading, mutate } = useSWR(key, 
  const createRecord = useSWRMutation('/marriage-records', 
  const updateRecord = useSWRMutation('/marriage-records', 
  const deleteRecord = useSWRMutation('/marriage-records', 
export const useMarriageRecord = (id: number) => {
  const { data, error, isLoading, mutate } = useSWR(
export const useFuneralRecords = (filters?: SearchFilters) => {
  const { data, error, isLoading, mutate } = useSWR(key, 
  const createRecord = useSWRMutation('/funeral-records', 
  const updateRecord = useSWRMutation('/funeral-records', 
  const deleteRecord = useSWRMutation('/funeral-records', 
export const useFuneralRecord = (id: number) => {
  const { data, error, isLoading, mutate } = useSWR(
export const useOCRHistory = () => {
  const { data, error, isLoading, mutate } = useSWR('/ocr/history', 
  const uploadFile = useSWRMutation('/ocr/upload', 
  const deleteFile = useSWRMutation('/ocr/files', 
export const useOCRStatus = (id: string) => {
  const { data, error, isLoading } = useSWR(
export const useLiturgicalCalendar = (year: number, month?: number, language?: string) => {
  const { data, error, isLoading, mutate } = useSWR(
  const createEvent = useSWRMutation('/calendar/events', 
  const updateEvent = useSWRMutation('/calendar/events', 
  const deleteEvent = useSWRMutation('/calendar/events', 
export const useDashboardMetrics = () => {
  const { data, error, isLoading } = useSWR('/dashboard/metrics', 
export const useDashboardActivity = (limit?: number) => {
  const { data, error, isLoading } = useSWR(
export const useDropdownOptions = () => {
  const { data, error, isLoading } = useSWR('/dropdown-options', 
export const useCertificateGeneration = () => {
  const generateBaptismCertificate = useSWRMutation('/certificate/baptism', 
  const generateMarriageCertificate = useSWRMutation('/certificate/marriage', 
  const previewCertificate = useSWRMutation('/certificate/preview', 
export const useFileUpload = () => {
  const uploadBaptismRecords = useSWRMutation('/baptism-records/import', 
  const uploadMarriageRecords = useSWRMutation('/marriage-records/import', 
  const uploadFuneralRecords = useSWRMutation('/funeral-records/import', 

=== State Management Analysis ===
File: front-end/src/api/utils/axiosInstance.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/components.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/eCommerce/ProductsData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/church-records.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/client-management.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/user.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/blog/blogData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/orthodox-metrics.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/metrics.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/mocks/browser.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/mocks/handlers/mockhandlers.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/omai.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/userprofile/PostData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/userprofile/UsersData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/ticket/TicketData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/calendar.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/chat/Chatdata.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/admin.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/social.api.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/api/notes/NotesData.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/I18nContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
 */

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import type { SupportedLanguage, TranslationKey, Translations } from '../types/orthodox-metrics.types';

interface I18nContextType {
  language: SupportedLanguage;
  setLanguage: (language: SupportedLanguage) => void;
--
}

const I18nContext = createContext<I18nContextType | undefined>(undefined);

interface I18nProviderProps {
  children: ReactNode;
  defaultLanguage?: SupportedLanguage;
}
--
  };

  const contextValue: I18nContextType = {
    language,
    setLanguage,
    t,
    isLoading,
    availableLanguages: AVAILABLE_LANGUAGES,
--

  return (
    <I18nContext.Provider value={contextValue}>
      {children}
    </I18nContext.Provider>
  );
};

export const useI18n = (): I18nContextType => {
  const context = useContext(I18nContext);
  if (context === undefined) {
    throw new Error('useI18n must be used within an I18nProvider');
  }
  return context;

--- PROVIDERS ---
 * OrthodoxMetrics Internationalization Context & Provider
 * Multi-language support for EN, GR, RU, RO
 */

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import type { SupportedLanguage, TranslationKey, Translations } from '../types/orthodox-metrics.types';

interface I18nContextType {
  language: SupportedLanguage;
  setLanguage: (language: SupportedLanguage) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
--
interface I18nProviderProps {
  children: ReactNode;
  defaultLanguage?: SupportedLanguage;
}

// Available languages configuration
const AVAILABLE_LANGUAGES = [
  {
    code: 'en' as SupportedLanguage,
    name: 'English',
    nativeName: 'English',
--
export const I18nProvider: React.FC<I18nProviderProps> = ({ 
  children, 
  defaultLanguage = 'en' 
}) => {
  const [language, setLanguageState] = useState<SupportedLanguage>(defaultLanguage);
  const [translations, setTranslations] = useState<Translations>({});
  const [isLoading, setIsLoading] = useState(true);

  // Initialize language from localStorage or browser preference
  useEffect(() => {
    const initializeLanguage = () => {
--
    <I18nContext.Provider value={contextValue}>
      {children}
    </I18nContext.Provider>
  );
};

export const useI18n = (): I18nContextType => {
  const context = useContext(I18nContext);
  if (context === undefined) {
    throw new Error('useI18n must be used within an I18nProvider');
  }
  return context;
};

// Hook for translations (shorter alias)
export const useTranslation = () => {
  const { t, language, setLanguage } = useI18n();
  return { t, language, setLanguage };
};

--
export default I18nProvider;

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
  const [language, setLanguageState] = useState<SupportedLanguage>(defaultLanguage);
  const [translations, setTranslations] = useState<Translations>({});
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
export const useI18n = (): I18nContextType => {
  const context = useContext(I18nContext);
    throw new Error('useI18n must be used within an I18nProvider');
export const useTranslation = () => {
  const { t, language, setLanguage } = useI18n();
          spouseName: 'Spouse Name',
          causeOfDeath: 'Cause of Death',

=== State Management Analysis ===
File: front-end/src/context/AuthContext.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
 */

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import AuthService from '../services/authService';
import type { User, UserRole } from '../types/orthodox-metrics.types';
import { 
  hasRole as checkRole, 
  hasAnyRole, 
--
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

--
  };

  const contextValue: AuthContextType = {
    user,
    authenticated: !!user,
    loading,
    error,
    login,
--

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;

--- PROVIDERS ---
 * OrthodoxMetrics Authentication Context & Provider
 * Simplified version to prevent blank page
 * 🔄 Refactored to use unified role system (see utils/roles.ts)
 */

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import AuthService from '../services/authService';
import type { User, UserRole } from '../types/orthodox-metrics.types';
import { 
  hasRole as checkRole, 
  hasAnyRole, 
--
interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false); // Start with false to render immediately
  const [error, setError] = useState<string | null>(null);

  // Initialize auth state from localStorage ONLY - no API calls
  useEffect(() => {
    try {
      const storedUser = AuthService.getStoredUser();
      
      if (storedUser) {
--
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthProvider;

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false); // Start with false to render immediately
  const [error, setError] = useState<string | null>(null);
  useEffect(() => {
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
    throw new Error('useAuth must be used within an AuthProvider');

=== State Management Analysis ===
File: front-end/src/context/ConatactContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/ConatactContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import { createContext, useState, useEffect, ReactNode } from 'react';
import { ContactType } from '../../types/apps/contact';
import React from "react";

import useSWR from 'swr';
import { deleteFetcher, getFetcher, postFetcher, putFetcher } from 'src/api/globalFetcher';
--
}

export const ContactContext = createContext<ContactContextType | any>(undefined);
export const ContactContextProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [contacts, setContacts] = useState<ContactType[]>([]);
  const [starredContacts, setStarredContacts] = useState<number[]>([]);
  const [selectedContact, setSelectedContact] = useState<ContactType | null>(null);
  const [selectedDepartment, setSelectedDepartment] = useState<string>('All');
  const [searchTerm, setSearchTerm] = useState<string>('');
--

  // Value provided by the context provider
  const contextValue: ContactContextType = {
    selectedDepartment,
    setSelectedDepartment,
    contacts,
    setContacts,
    starredContacts,
--

  return (
    <ContactContext.Provider value={contextValue}>
      {children}
    </ContactContext.Provider>
  );
};

--- PROVIDERS ---
export const ContactContextProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [contacts, setContacts] = useState<ContactType[]>([]);
  const [starredContacts, setStarredContacts] = useState<number[]>([]);
  const [selectedContact, setSelectedContact] = useState<ContactType | null>(null);
  const [selectedDepartment, setSelectedDepartment] = useState<string>('All');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<any>(null);


--
  // Value provided by the context provider
  const contextValue: ContactContextType = {
    selectedDepartment,
    setSelectedDepartment,
    contacts,
    setContacts,
    starredContacts,
    setStarredContacts,
    selectedContact,
    setSelectedContact,
    addContact,
--
    <ContactContext.Provider value={contextValue}>
      {children}
    </ContactContext.Provider>
  );
};

--- CUSTOM HOOKS ---
import { createContext, useState, useEffect, ReactNode } from 'react';
import useSWR from 'swr';
  const [contacts, setContacts] = useState<ContactType[]>([]);
  const [starredContacts, setStarredContacts] = useState<number[]>([]);
  const [selectedContact, setSelectedContact] = useState<ContactType | null>(null);
  const [selectedDepartment, setSelectedDepartment] = useState<string>('All');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<any>(null);
  const { data: contactsData, isLoading: isContactsLoading, error: contactsError, mutate } = useSWR('/api/data/contacts/contactsData', getFetcher);
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/InvoiceContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/InvoiceContext/index.tsx.backup
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useEffect, useState, useContext } from 'react';
import { InvoiceList } from '../../types/apps/invoice';
import { orthodoxMetricsAPI } from 'src/api/orthodox-metrics.api';
import type {
  InvoiceFilters,
  CreateInvoiceData,
--
}

const InvoiceContext = createContext<InvoiceContextType | any>(undefined);

// Custom hook to use the invoice context
export const useInvoiceContext = () => {
  const context = useContext(InvoiceContext);
  if (!context) {
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  }
  return context;
--
  };

  const contextValue: InvoiceContextType = {
    invoices,
    loading,
    error,
    totalCount,
    currentPage,
--

  return (
    <InvoiceContext.Provider value={contextValue}>
      {children}
    </InvoiceContext.Provider>
  );
};


--- PROVIDERS ---
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  }
  return context;
};

export const InvoiceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [invoices, setInvoices] = useState<InvoiceList[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState<InvoiceFilters>({
    page: 1,
    limit: 10,
    status: undefined,
    church_id: undefined,
--
    <InvoiceContext.Provider value={contextValue}>
      {children}
    </InvoiceContext.Provider>
  );
};

// Legacy export for backward compatibility
export { InvoiceContext };

--- CUSTOM HOOKS ---
import React, { createContext, useEffect, useState, useContext } from 'react';
export const useInvoiceContext = () => {
  const context = useContext(InvoiceContext);
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  const [invoices, setInvoices] = useState<InvoiceList[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState<InvoiceFilters>({
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/InvoiceContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useEffect, useState, useContext } from 'react';
import { InvoiceList } from '../../types/apps/invoice';
import { orthodoxMetricsAPI } from 'src/api/orthodox-metrics.api';
import type {
  InvoiceFilters,
  CreateInvoiceData,
--
}

const InvoiceContext = createContext<InvoiceContextType | any>(undefined);

// Custom hook to use the invoice context
export const useInvoiceContext = () => {
  const context = useContext(InvoiceContext);
  if (!context) {
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  }
  return context;
--
  };

  const contextValue: InvoiceContextType = {
    invoices,
    loading,
    error,
    totalCount,
    currentPage,
--

  return (
    <InvoiceContext.Provider value={contextValue}>
      {children}
    </InvoiceContext.Provider>
  );
};


--- PROVIDERS ---
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  }
  return context;
};

export const InvoiceProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [invoices, setInvoices] = useState<InvoiceList[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState<InvoiceFilters>({
    page: 1,
    limit: 10,
    status: undefined,
    church_id: undefined,
--
    <InvoiceContext.Provider value={contextValue}>
      {children}
    </InvoiceContext.Provider>
  );
};

// Legacy export for backward compatibility
export { InvoiceContext };

--- CUSTOM HOOKS ---
import React, { createContext, useEffect, useState, useContext } from 'react';
export const useInvoiceContext = () => {
  const context = useContext(InvoiceContext);
    throw new Error('useInvoiceContext must be used within an InvoiceProvider');
  const [invoices, setInvoices] = useState<InvoiceList[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState<InvoiceFilters>({
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/EmailContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/EmailContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
"use client"
import React, { createContext, useState, Dispatch, SetStateAction, useEffect } from 'react';
import { EmailType } from '../../types/apps/email';
import useSWR from 'swr';
import { deleteFetcher, getFetcher } from 'src/api/globalFetcher';

interface EmailContextType {
--
}

const initialEmailContext: EmailContextType = {
    emails: [],
    selectedEmail: null,
    filter: 'inbox',
    searchQuery: '',
    loading: true,
--
};

export const EmailContext = createContext<EmailContextType>(initialEmailContext);

export const EmailContextProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [emails, setEmails] = useState<EmailType[]>([]);
    const [selectedEmail, setSelectedEmail] = useState<EmailType | null>(null);
    const [filter, setFilter] = useState<string>('inbox');
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [loading, setLoading] = useState<boolean>(true);
--

    return (
        <EmailContext.Provider value={{ emails, selectedEmail, setSelectedEmail, deleteEmail, toggleStar, toggleImportant, setFilter, filter, error, loading, searchQuery, setSearchQuery }}>
            {children}
        </EmailContext.Provider>
    );
};

--- PROVIDERS ---
export const EmailContextProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [emails, setEmails] = useState<EmailType[]>([]);
    const [selectedEmail, setSelectedEmail] = useState<EmailType | null>(null);
    const [filter, setFilter] = useState<string>('inbox');
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);

    const { data: emailData, isLoading: isEmailLoading, error: emailError, mutate } = useSWR("/api/data/email/EmailData", getFetcher);

    useEffect(() => {
--
        <EmailContext.Provider value={{ emails, selectedEmail, setSelectedEmail, deleteEmail, toggleStar, toggleImportant, setFilter, filter, error, loading, searchQuery, setSearchQuery }}>
            {children}
        </EmailContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import React, { createContext, useState, Dispatch, SetStateAction, useEffect } from 'react';
import useSWR from 'swr';
    const [emails, setEmails] = useState<EmailType[]>([]);
    const [selectedEmail, setSelectedEmail] = useState<EmailType | null>(null);
    const [filter, setFilter] = useState<string>('inbox');
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);
    const { data: emailData, isLoading: isEmailLoading, error: emailError, mutate } = useSWR("/api/data/email/EmailData", getFetcher);
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/OCRContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/OCRContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import { createContext, useState, useContext, useEffect } from 'react';
import React from "react";
import { useAuth } from '../AuthContext';

// OCR Types
export interface OCRFile {
--

// Initial values
const initialContext: OCRContextType = {
    session: null,
    files: [],
    config: null,
    languages: [],
    disclaimers: [],
--

// Create context
export const OCRContext = createContext<OCRContextType>(initialContext);

// Custom hook
export const useOCR = () => {
    const context = useContext(OCRContext);
    if (!context) {

--- PROVIDERS ---
        throw new Error('useOCR must be used within an OCRProvider');
    }
    return context;
};

// Provider component
export const OCRProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [session, setSession] = useState<OCRSession | null>(null);
    const [files, setFiles] = useState<OCRFile[]>([]);
    const [config, setConfig] = useState<OCRUploadConfig | null>(null);
    const [languages, setLanguages] = useState<OCRLanguage[]>([]);
    const [disclaimers, setDisclaimers] = useState<OCRDisclaimer[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    const { authenticated } = useAuth();

--
        <OCRContext.Provider
            value={{
                session,
                files,
                config,
                languages,
                disclaimers,
                loading,
                error,
                createSession,
                verifySession,
--
        </OCRContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import { createContext, useState, useContext, useEffect } from 'react';
import { useAuth } from '../AuthContext';
export const useOCR = () => {
    const context = useContext(OCRContext);
        throw new Error('useOCR must be used within an OCRProvider');
    const [session, setSession] = useState<OCRSession | null>(null);
    const [files, setFiles] = useState<OCRFile[]>([]);
    const [config, setConfig] = useState<OCRUploadConfig | null>(null);
    const [languages, setLanguages] = useState<OCRLanguage[]>([]);
    const [disclaimers, setDisclaimers] = useState<OCRDisclaimer[]>([]);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const { authenticated } = useAuth();
    useEffect(() => {
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/NotesContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/NotesContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---

import React, { createContext, useContext, useState, useEffect } from 'react';
import type { NotesType } from '../../types/apps/note';
import { useAuth } from '../AuthContext';
import { ensureArray } from '../../utils/arrayUtils';

interface NotesFilters {
--

// Initial context values
const initialContext: NotesContextType = {
    notes: [],
    categories: [],
    loading: true,
    error: null,
    selectedNoteId: null,
--

// Create context
export const NotesContext = createContext<NotesContextType>(initialContext);

// Provider component
export const NotesProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [notes, setNotes] = useState<NotesType[]>([]);
    const [categories, setCategories] = useState<any[]>([]);

--- PROVIDERS ---
// Provider component
export const NotesProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [notes, setNotes] = useState<NotesType[]>([]);
    const [categories, setCategories] = useState<any[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedNoteId, setSelectedNoteId] = useState<number | null>(null);
    const [filters, setFilters] = useState(initialContext.filters);

    const { authenticated, user } = useAuth();

    // Fetch notes from the backend
--
        <NotesContext.Provider
            value={{
                notes,
                categories,
                loading,
                error,
                selectedNoteId,
                filters,
                selectNote,
                addNote,
                updateNote,
--
        </NotesContext.Provider>
    );
};



--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from '../AuthContext';
    const [notes, setNotes] = useState<NotesType[]>([]);
    const [categories, setCategories] = useState<any[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedNoteId, setSelectedNoteId] = useState<number | null>(null);
    const [filters, setFilters] = useState(initialContext.filters);
    const { authenticated, user } = useAuth();
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/ChatContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/ChatContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
'use client'
import { createContext, useState, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';
import React from "react";
import useSWR from 'swr';
import { ChatsType, MessageType } from '../../types/apps/chat';
import { getFetcher, postFetcher } from 'src/api/globalFetcher';

--

// Create the context
export const ChatContext = createContext<ChatContextProps>({
    chatData: [],
    chatContent: [],
    chatSearch: '',
    selectedChat: null,
    loading: true,
--
    };

    const value: ChatContextProps = {
        chatData,
        chatContent,
        chatSearch,
        selectedChat,
        loading,
--
        setLoading,
    };
    return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;
};



--- PROVIDERS ---
// Create the provider component
export const ChatProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [chatData, setChatData] = useState<ChatsType[]>([]);
    const [chatContent, setChatContent] = useState<any[]>([]);
    const [chatSearch, setChatSearch] = useState<string>('');
    const [selectedChat, setSelectedChat] = useState<ChatsType | null>(null);
    const [activeChatId, setActiveChatId] = useState<number | null>(1);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string>('');

    const { data: ChatsData, isLoading: isChatsLoading, error: Chatserror, mutate } = useSWR('/api/data/chat/ChatData', getFetcher);

--
    return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;
};



--- CUSTOM HOOKS ---
import { createContext, useState, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';
import useSWR from 'swr';
    const [chatData, setChatData] = useState<ChatsType[]>([]);
    const [chatContent, setChatContent] = useState<any[]>([]);
    const [chatSearch, setChatSearch] = useState<string>('');
    const [selectedChat, setSelectedChat] = useState<ChatsType | null>(null);
    const [activeChatId, setActiveChatId] = useState<number | null>(1);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string>('');
    const { data: ChatsData, isLoading: isChatsLoading, error: Chatserror, mutate } = useSWR('/api/data/chat/ChatData', getFetcher);
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/EcommerceContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/EcommerceContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React from "react";
import { createContext, useState, useEffect } from 'react';
import { ProductType } from '../../types/apps/eCommerce';

import useSWR from 'swr';

import { deleteFetcher, getFetcher, postFetcher, putFetcher } from "src/api/globalFetcher";
--

// Create Context with the specified type
export const ProductContext = createContext<ProductContextType>({} as ProductContextType);

// Provider Component
export const ProductProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [products, setProducts] = useState<ProductType[]>([]);
    const [searchProduct, setSearchProduct] = useState<string>('');

--- PROVIDERS ---
// Provider Component
export const ProductProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [products, setProducts] = useState<ProductType[]>([]);
    const [searchProduct, setSearchProduct] = useState<string>('');
    const [selectedCategory, setSelectedCategory] = useState<string>('All');
    const [sortBy, setSortBy] = useState<string>('newest');
    const [priceRange, setPriceRange] = useState<string>('All');
    const [selectedGender, setSelectedGender] = useState<string>('All');
    const [selectedColor, setSelectedColor] = useState<string>('All');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);
    const [cartItems, setCartItems] = useState(() => {
--
        <ProductContext.Provider
            value={{
                products,
                searchProduct,
                selectedCategory,
                sortBy,
                priceRange,
                selectedGender,
                selectedColor,
                loading,
                error,
--
        </ProductContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import { createContext, useState, useEffect } from 'react';
import useSWR from 'swr';
    const [products, setProducts] = useState<ProductType[]>([]);
    const [searchProduct, setSearchProduct] = useState<string>('');
    const [selectedCategory, setSelectedCategory] = useState<string>('All');
    const [sortBy, setSortBy] = useState<string>('newest');
    const [priceRange, setPriceRange] = useState<string>('All');
    const [selectedGender, setSelectedGender] = useState<string>('All');
    const [selectedColor, setSelectedColor] = useState<string>('All');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);
    const [cartItems, setCartItems] = useState(() => {
    const { data: productsData, isLoading: isProductsLoading, error: productsError } = useSWR('/api/data/eCommerce/ProductsData', getFetcher);
    useEffect(() => {
    const { data: cartsData, isLoading: isCartsLoading, error: cartsError, mutate: cartMutate } = useSWR('/api/eCommerce/carts', getFetcher);
    useEffect(() => {
    useEffect(() => {
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/UserDataContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/UserDataContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---

import { createContext, useState, useEffect } from 'react';
import { PostType, profiledataType } from '../../types/apps/userProfile';
import React from "react";
import useSWR from 'swr';
import { getFetcher, postFetcher } from 'src/api/globalFetcher';
import { ensureArray } from '../../utils/arrayUtils';

// Define context type
export type UserDataContextType = {
    posts: PostType[];
    users: any[];
    gallery: any[];
    loading: boolean;
    profileData: profiledataType;
--

// Create context
export const UserDataContext = createContext<UserDataContextType | undefined>(undefined);

// Default config values
const config = {
    posts: [],
    users: [],
--

    return (
        <UserDataContext.Provider value={{
            posts,
            users,
            error,
            gallery,
            loading,

--- PROVIDERS ---
export const UserDataProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [posts, setPosts] = useState<PostType[]>(config.posts);
    const [users, setUsers] = useState<any[]>(config.users);
    const [gallery, setGallery] = useState<any[]>(config.gallery);
    const [followers, setFollowers] = useState<any[]>(config.followers);
    const [search, setSearch] = useState<string>(config.search);
    const [error, setError] = useState<any>(null);
    const [loading, setLoading] = useState<boolean>(config.loading);
    const [profileData] = useState<profiledataType>({
        name: 'Mathew Anderson',
        role: 'Designer',
--
        <UserDataContext.Provider value={{
            posts,
            users,
            error,
            gallery,
            loading,
            profileData,
            addGalleryItem,
            addReply,
            likePost,
            addComment,
--
        </UserDataContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import { createContext, useState, useEffect } from 'react';
import useSWR from 'swr';
    const [posts, setPosts] = useState<PostType[]>(config.posts);
    const [users, setUsers] = useState<any[]>(config.users);
    const [gallery, setGallery] = useState<any[]>(config.gallery);
    const [followers, setFollowers] = useState<any[]>(config.followers);
    const [search, setSearch] = useState<string>(config.search);
    const [error, setError] = useState<any>(null);
    const [loading, setLoading] = useState<boolean>(config.loading);
    const [profileData] = useState<profiledataType>({
    const { data: postsData, isLoading: isPostsLoading, error: postsError, mutate } = useSWR("/api/data/postData", getFetcher);
    const { data: usersData, isLoading: isUsersLoading, error: usersError } = useSWR("/api/data/users", getFetcher);
    const { data: galleryData, isLoading: isGalleryLoading, error: galleryError } = useSWR("/api/data/gallery", getFetcher);
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/ChurchRecordsProvider.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
// Church Records Management System Context Provider
// 🔄 Refactored to use unified role system (see utils/roles.ts)
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { useAuth } from '../api/church-records.hooks';
import type { User } from '../types/church-records.types';
import { 
  hasRole as checkRole, 
  hasAnyRole, 
--
}

const ChurchRecordsContext = createContext<ChurchRecordsContextType | undefined>(undefined);

interface ChurchRecordsProviderProps {
  children: ReactNode;
}

--
  };

  const value: ChurchRecordsContextType = {
    user: auth.user,
    authenticated: auth.authenticated,
    loading: auth.loading || !isInitialized,
    error: auth.error,
    signIn,
--

  return (
    <ChurchRecordsContext.Provider value={value}>
      {children}
    </ChurchRecordsContext.Provider>
  );
};

export const useChurchRecords = (): ChurchRecordsContextType => {
  const context = useContext(ChurchRecordsContext);
  if (context === undefined) {
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');
  }
  return context;

--- PROVIDERS ---
// Church Records Management System Context Provider
// 🔄 Refactored to use unified role system (see utils/roles.ts)
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { useAuth } from '../api/church-records.hooks';
import type { User } from '../types/church-records.types';
import { 
  hasRole as checkRole, 
  hasAnyRole, 
  canManageRecords as checkCanManageRecords,
  canViewDashboard as checkCanViewDashboard,
  canManageUsers as checkCanManageUsers,
--
interface ChurchRecordsProviderProps {
  children: ReactNode;
}

export const ChurchRecordsProvider: React.FC<ChurchRecordsProviderProps> = ({ children }) => {
  const auth = useAuth();
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // Initialize authentication state on mount
    if (!auth.loading && !isInitialized) {
      setIsInitialized(true);
    }
  }, [auth.loading, isInitialized]);

--
    <ChurchRecordsContext.Provider value={value}>
      {children}
    </ChurchRecordsContext.Provider>
  );
};

export const useChurchRecords = (): ChurchRecordsContextType => {
  const context = useContext(ChurchRecordsContext);
  if (context === undefined) {
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');
  }
  return context;
};

// Higher-order component for protected routes
export const withChurchRecordsAuth = <P extends object>(
  Component: React.ComponentType<P>
): React.ComponentType<P> => {
  return (props: P) => {
    const { authenticated, loading } = useChurchRecords();
--
export default ChurchRecordsProvider;

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { useAuth } from '../api/church-records.hooks';
  const auth = useAuth();
  const [isInitialized, setIsInitialized] = useState(false);
  useEffect(() => {
export const useChurchRecords = (): ChurchRecordsContextType => {
  const context = useContext(ChurchRecordsContext);
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');
    const { authenticated, loading } = useChurchRecords();
export const usePermissions = () => {
  const { user } = useChurchRecords();

=== State Management Analysis ===
File: front-end/src/context/config.ts
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/TicketContext
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/TicketContext/index.tsx
Date: Wed Jul 30 01:00:01 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import { createContext, useState, useEffect } from 'react';
import { TicketType } from '../../types/apps/ticket';
import { getFetcher, deleteFetcher } from 'src/api/globalFetcher';

import useSWR from 'swr';

--

// Create Context
export const TicketContext = createContext<TicketContextType>({} as TicketContextType);

// Provider Component
export const TicketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [tickets, setTickets] = useState<TicketType[]>([]);
    const [ticketSearch, setTicketSearch] = useState<string>('');

--- PROVIDERS ---
// Provider Component
export const TicketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [tickets, setTickets] = useState<TicketType[]>([]);
    const [ticketSearch, setTicketSearch] = useState<string>('');
    const [filter, setFilter] = useState<string>('total_tickets');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);

    // Fetch tickets from the API when the component mounts using useEffect
    const { data: ticketsData, isLoading: isTicketsLoading, error: ticketsError, mutate } = useSWR("/api/data/ticket/TicketData", getFetcher)
    useEffect(() => {
        if (ticketsData) {
--
        <TicketContext.Provider
            value={{ tickets, error, loading, deleteTicket, setTicketSearch, searchTickets, ticketSearch, filter, setFilter }}
        >
            {children}
        </TicketContext.Provider>
    );
};



--- CUSTOM HOOKS ---
import { createContext, useState, useEffect } from 'react';
import useSWR from 'swr';
    const [tickets, setTickets] = useState<TicketType[]>([]);
    const [ticketSearch, setTicketSearch] = useState<string>('');
    const [filter, setFilter] = useState<string>('total_tickets');
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);
    // Fetch tickets from the API when the component mounts using useEffect
    const { data: ticketsData, isLoading: isTicketsLoading, error: ticketsError, mutate } = useSWR("/api/data/ticket/TicketData", getFetcher)
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/BlogContext
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/BlogContext/index.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---

import { createContext, useState, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';
import { BlogPostType, BlogType } from '../../types/apps/blog';
import React from "react";
import useSWR from 'swr';
import { getFetcher } from 'src/api/globalFetcher';

--

// Create context with default values
export const BlogContext = createContext<BlogContextProps>({
    posts: [],
    sortBy: 'newest',
    selectedPost: null,
    isLoading: true,
    setPosts: () => { },
--


    const value: BlogContextProps = {
        posts,
        sortBy,
        selectedPost,
        isLoading,
        setPosts,
--
    };

    return <BlogContext.Provider value={value}>{children}</BlogContext.Provider>;
};

--- PROVIDERS ---
// BlogProvider component
export const BlogProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [posts, setPosts] = useState<BlogPostType[]>([]);
    const [sortBy, setSortBy] = useState<string>('newest');
    const [selectedPost, setSelectedPost] = useState<BlogPostType | null>(null);
    const [isLoading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);

    // Fetch Post data from the API
    const { data: postsData, isLoading: isPostsLoading, error: postsError } = useSWR('/api/data/blog/BlogPosts', getFetcher);

    useEffect(() => {
--
    return <BlogContext.Provider value={value}>{children}</BlogContext.Provider>;
};

--- CUSTOM HOOKS ---
import { createContext, useState, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';
import useSWR from 'swr';
    const [posts, setPosts] = useState<BlogPostType[]>([]);
    const [sortBy, setSortBy] = useState<string>('newest');
    const [selectedPost, setSelectedPost] = useState<BlogPostType | null>(null);
    const [isLoading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<any>(null);
    const { data: postsData, isLoading: isPostsLoading, error: postsError } = useSWR('/api/data/blog/BlogPosts', getFetcher);
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/RecordsContext.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from './AuthContext';

export interface RecordType {
  id: string;
  name: string;
--
};

const RecordsContext = createContext<RecordsContextType | null>(null);

export const useRecords = () => {
  const context = useContext(RecordsContext);
  if (!context) {
    throw new Error('useRecords must be used within a RecordProvider');

--- PROVIDERS ---
    throw new Error('useRecords must be used within a RecordProvider');
  }
  return context;
};

export const RecordProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, hasRole } = useAuth();
  const [recordTypes, setRecordTypes] = useState<RecordType[]>([]);
  const [selectedChurch, setSelectedChurch] = useState<any>(null);
  const [availableChurches, setAvailableChurches] = useState<any[]>([]);
  const [filters, setFilters] = useState<RecordFilter>(defaultFilters);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Default record types configuration
  const defaultRecordTypes: RecordType[] = [
--
    <RecordsContext.Provider
      value={{
        recordTypes,
        filteredRecordTypes: filteredRecordTypes(),
        selectedChurch,
        availableChurches,
        filters,
        loading,
        error,
        updateFilters,
        clearFilters,
--
    </RecordsContext.Provider>
  );
}; 

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from './AuthContext';
export const useRecords = () => {
  const context = useContext(RecordsContext);
    throw new Error('useRecords must be used within a RecordProvider');
  const { user, hasRole } = useAuth();
  const [recordTypes, setRecordTypes] = useState<RecordType[]>([]);
  const [selectedChurch, setSelectedChurch] = useState<any>(null);
  const [availableChurches, setAvailableChurches] = useState<any[]>([]);
  const [filters, setFilters] = useState<RecordFilter>(defaultFilters);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  useEffect(() => {
  const filteredRecordTypes = useCallback(() => {

=== State Management Analysis ===
File: front-end/src/context/kanbancontext
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
No context found

--- PROVIDERS ---
No providers found

--- CUSTOM HOOKS ---
No custom hooks found

=== State Management Analysis ===
File: front-end/src/context/kanbancontext/index.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useState, useEffect, ReactNode } from 'react';
import { useAuth } from '../AuthContext';

// Enhanced types to match backend structure
export interface KanbanLabel {
    id: number;
--
}

export const KanbanDataContext = createContext<KanbanContextType>({} as KanbanContextType);

export const KanbanDataContextProvider: React.FC<KanbanDataContextProps> = ({ children }) => {
    const [boards, setBoards] = useState<KanbanBoard[]>([]);
    const [currentBoard, setCurrentBoard] = useState<KanbanBoard | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);


--- PROVIDERS ---
export const KanbanDataContextProvider: React.FC<KanbanDataContextProps> = ({ children }) => {
    const [boards, setBoards] = useState<KanbanBoard[]>([]);
    const [currentBoard, setCurrentBoard] = useState<KanbanBoard | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    // Legacy state for backward compatibility
    const [todoCategories, setTodoCategories] = useState<TodoCategory[]>([]);

    const { authenticated } = useAuth();

--
        <KanbanDataContext.Provider
            value={{
                // New backend-integrated state
                boards,
                currentBoard,
                loading,
                error,

                // Board operations
                fetchBoards,
                fetchBoard,
--
        </KanbanDataContext.Provider>
    );
};

--- CUSTOM HOOKS ---
import React, { createContext, useState, useEffect, ReactNode } from 'react';
import { useAuth } from '../AuthContext';
    const [boards, setBoards] = useState<KanbanBoard[]>([]);
    const [currentBoard, setCurrentBoard] = useState<KanbanBoard | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [todoCategories, setTodoCategories] = useState<TodoCategory[]>([]);
    const { authenticated } = useAuth();
    useEffect(() => {
    useEffect(() => {
    useEffect(() => {
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/CustomizerContext.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---

import { createContext, useState, ReactNode, useEffect } from 'react';
import config from './config'
import React from "react";

// Define the shape of the context state
interface CustomizerContextState {
--

// Create the context with an initial value
export const CustomizerContext = createContext<CustomizerContextState | any>(undefined);

// Define the type for the children prop
interface CustomizerContextProps {
    children: ReactNode;
}
--

// Create the provider component
export const CustomizerContextProvider: React.FC<CustomizerContextProps> = ({ children }) => {

    // Initialize state with localStorage values or config defaults
    const [activeDir, setActiveDirState] = useState<string>(() => 
        getStoredValue('activeDir', config.activeDir)
    );

--- PROVIDERS ---
// Create the provider component
export const CustomizerContextProvider: React.FC<CustomizerContextProps> = ({ children }) => {

    // Initialize state with localStorage values or config defaults
    const [activeDir, setActiveDirState] = useState<string>(() => 
        getStoredValue('activeDir', config.activeDir)
    );
    const [activeMode, setActiveModeState] = useState<string>(() => 
        getStoredValue('activeMode', config.activeMode)
    );
    const [activeTheme, setActiveThemeState] = useState<string>(() => 
        getStoredValue('activeTheme', config.activeTheme)
--
        <CustomizerContext.Provider
            value={{

                activeDir,
                setActiveDir,
                activeMode,
                setActiveMode,
                activeTheme,
                setActiveTheme,
                activeLayout,
                setActiveLayout,
--
        </CustomizerContext.Provider>
    );
};


--- CUSTOM HOOKS ---
import { createContext, useState, ReactNode, useEffect } from 'react';
    const [activeDir, setActiveDirState] = useState<string>(() => 
    const [activeMode, setActiveModeState] = useState<string>(() => 
    const [activeTheme, setActiveThemeState] = useState<string>(() => 
    const [activeLayout, setActiveLayoutState] = useState<string>(() => 
    const [isCardShadow, setIsCardShadowState] = useState<boolean>(() => 
    const [isLayout, setIsLayoutState] = useState<string>(() => 
    const [isBorderRadius, setIsBorderRadiusState] = useState<number>(() => 
    const [isCollapse, setIsCollapseState] = useState<string>(() => 
    const [isLanguage, setIsLanguage] = useState<string>(config.isLanguage);
    const [isSidebarHover, setIsSidebarHover] = useState<boolean>(false);
    const [isMobileSidebar, setIsMobileSidebar] = useState<boolean>(false);
    useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/ChurchRecordsContext.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from './AuthContext';

export interface ChurchRecord {
  id: string;
  type: 'baptism' | 'marriage' | 'funeral' | 'membership' | 'clergy' | 'donation';
--
};

const ChurchRecordsContext = createContext<ChurchRecordsContextType | null>(null);

export const useChurchRecords = () => {
  const context = useContext(ChurchRecordsContext);
  if (!context) {
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');

--- PROVIDERS ---
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');
  }
  return context;
};

export const ChurchRecordsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const [records, setRecords] = useState<ChurchRecord[]>([]);
  const [availableParishes, setAvailableParishes] = useState<string[]>([]);
  const [availableClergy, setAvailableClergy] = useState<string[]>([]);
  const [filters, setFilters] = useState<RecordFilter>(defaultFilters);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPaginationState] = useState({
    page: 0,
    rowsPerPage: 25,
--
    console.log('📋 ChurchRecordsProvider initialized (records will load on demand)');
    setLoading(false); // Set loading to false since we're not loading automatically
  }, []);

  // Filter records client-side for immediate feedback
  const filteredRecords = React.useMemo(() => {
    let filtered = [...records];

    // Apply filters
    if (filters.type.length > 0) {
      filtered = filtered.filter(record => filters.type.includes(record.type));
--
    <ChurchRecordsContext.Provider
      value={{
        records,
        filteredRecords,
        availableParishes,
        availableClergy,
        filters,
        loading,
        error,
        pagination,
        updateFilters,
--
    </ChurchRecordsContext.Provider>
  );
}; 

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from './AuthContext';
export const useChurchRecords = () => {
  const context = useContext(ChurchRecordsContext);
    throw new Error('useChurchRecords must be used within a ChurchRecordsProvider');
  const { user } = useAuth();
  const [records, setRecords] = useState<ChurchRecord[]>([]);
  const [availableParishes, setAvailableParishes] = useState<string[]>([]);
  const [availableClergy, setAvailableClergy] = useState<string[]>([]);
  const [filters, setFilters] = useState<RecordFilter>(defaultFilters);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [pagination, setPaginationState] = useState({
  const loadRecords = useCallback(async () => {
  useEffect(() => {
  const [hasLoadedOnce, setHasLoadedOnce] = useState(false);
  useEffect(() => {
  const filteredRecords = React.useMemo(() => {

=== State Management Analysis ===
File: front-end/src/context/WebSocketContext.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
import React, { createContext, useContext, useEffect, useState, useRef, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAuth } from './AuthContext';

interface WebSocketContextType {
  socket: Socket | null;
--
}

const WebSocketContext = createContext<WebSocketContextType | null>(null);

export const useWebSocket = () => {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
--
  }, [socket, isConnected]);

  const value: WebSocketContextType = {
    socket,
    isConnected,
    onlineUsers,
    
    // Chat functions
--

  return (
    <WebSocketContext.Provider value={value}>
      {children}
    </WebSocketContext.Provider>
  );
};


--- PROVIDERS ---
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  return context;
};

interface WebSocketProviderProps {
  children: React.ReactNode;
}

export const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {
  const { user, isAuthenticated } = useAuth();
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState<Set<number>>(new Set());
  
  // Store event listeners to clean them up
  const eventListeners = useRef<Map<string, Set<Function>>>(new Map());
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);
--
    <WebSocketContext.Provider value={value}>
      {children}
    </WebSocketContext.Provider>
  );
};

export default WebSocketContext; 

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useEffect, useState, useRef, useCallback } from 'react';
import { useAuth } from './AuthContext';
export const useWebSocket = () => {
  const context = useContext(WebSocketContext);
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  const { user, isAuthenticated } = useAuth();
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState<Set<number>>(new Set());
  const eventListeners = useRef<Map<string, Set<Function>>>(new Map());
  const reconnectAttempts = useRef(0);
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);
  const initializeSocket = useCallback(() => {
  const cleanupSocket = useCallback(() => {
  useEffect(() => {
  const joinConversation = useCallback((conversationId: number) => {
  const leaveConversation = useCallback((conversationId: number) => {
  const sendMessage = useCallback((
  const startTyping = useCallback((conversationId: number) => {
  const stopTyping = useCallback((conversationId: number) => {
  const markMessageRead = useCallback((conversationId: number, messageId: number) => {
  const markNotificationRead = useCallback((notificationId: number) => {
  const updatePresence = useCallback((status: 'online' | 'away' | 'busy' | 'offline') => {
  const addEventListener = useCallback((event: string, callback: Function) => {
  const onNewMessage = useCallback((callback: (message: any) => void) => {
  const onUserTyping = useCallback((callback: (data: any) => void) => {
  const onNewNotification = useCallback((callback: (notification: any) => void) => {
  const onFriendPresenceUpdate = useCallback((callback: (data: any) => void) => {
  const onMessageRead = useCallback((callback: (data: any) => void) => {
  useEffect(() => {

=== State Management Analysis ===
File: front-end/src/context/ThemeContext.tsx
Date: Wed Jul 30 01:00:02 AM EDT 2025

--- CONTEXT DEFINITIONS ---
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

// Available theme types
export type ThemeName = 
  | 'orthodoxTraditional' 
  | 'lentSeason' 
--

// Create context
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

// Theme provider props
interface ThemeProviderProps {
  children: ReactNode;
  defaultTheme?: ThemeName;
--
  }, [themeConfig]);
  
  const contextValue: ThemeContextType = {
    currentTheme,
    themeConfig,
    setTheme,
    availableThemes,
    isSystemDarkMode,
--
  
  return (
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
};

--
 * Hook to use theme context
 */
export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;

--- PROVIDERS ---
// Theme provider props
interface ThemeProviderProps {
  children: ReactNode;
  defaultTheme?: ThemeName;
}

// Get system dark mode preference
const getSystemDarkMode = (): boolean => {
  if (typeof window === 'undefined') return false;
  return window.matchMedia('(prefers-color-scheme: dark)').matches;
};

--
 * Theme Provider Component
 */
export const ThemeProvider: React.FC<ThemeProviderProps> = ({ 
  children, 
  defaultTheme = 'orthodoxTraditional' 
}) => {
  const [isSystemDarkMode, setIsSystemDarkMode] = useState(getSystemDarkMode());
  const [autoThemeEnabled, setAutoThemeEnabled] = useState(false);
  
  // Initialize theme from localStorage or default
  const [currentTheme, setCurrentThemeState] = useState<ThemeName>(() => {
    const stored = getStoredTheme();
    if (stored && THEME_CONFIGS[stored]) {
--
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
};

/**
 * Hook to use theme context
 */
export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export default ThemeProvider;

--- CUSTOM HOOKS ---
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
  const [isSystemDarkMode, setIsSystemDarkMode] = useState(getSystemDarkMode());
  const [autoThemeEnabled, setAutoThemeEnabled] = useState(false);
  const [currentTheme, setCurrentThemeState] = useState<ThemeName>(() => {
  useEffect(() => {
  useEffect(() => {
  useEffect(() => {
export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
    throw new Error('useTheme must be used within a ThemeProvider');

