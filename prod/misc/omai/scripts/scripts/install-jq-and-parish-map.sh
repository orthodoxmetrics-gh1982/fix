#!/bin/bash

# üó∫Ô∏è Install jq and ParishMap Component
# =====================================
# This script first ensures jq is installed, then installs ParishMap.tsx via Big Book Auto-Install API

echo "üó∫Ô∏è Installing jq and ParishMap Component"
echo "========================================"
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting installation process..."

# Configuration
SERVER_URL="http://localhost:3001"
COMPONENT_FILE="ParishMap.tsx"

echo "üìã Environment Check:"
echo "‚Ä¢ Linux environment: ‚úÖ"
echo "‚Ä¢ Mapped workspace: ‚úÖ"
echo "‚Ä¢ Server port: 3001"
echo ""

# Step 1: Install jq if not available
echo "üîß Step 1: Checking for jq..."
if ! command -v jq &> /dev/null; then
    echo "üì¶ jq not found. Installing jq..."
    
    # Try different package managers
    if command -v apt-get &> /dev/null; then
        echo "Using apt-get to install jq..."
        sudo apt-get update && sudo apt-get install -y jq
    elif command -v yum &> /dev/null; then
        echo "Using yum to install jq..."
        sudo yum install -y jq
    elif command -v dnf &> /dev/null; then
        echo "Using dnf to install jq..."
        sudo dnf install -y jq
    elif command -v pacman &> /dev/null; then
        echo "Using pacman to install jq..."
        sudo pacman -S jq
    else
        echo "‚ùå Cannot automatically install jq. Please install manually:"
        echo "   Ubuntu/Debian: sudo apt-get install jq"
        echo "   CentOS/RHEL: sudo yum install jq"
        echo "   Fedora: sudo dnf install jq"
        echo "   Arch: sudo pacman -S jq"
        exit 1
    fi
    
    # Verify installation
    if command -v jq &> /dev/null; then
        echo "‚úÖ jq installed successfully: $(jq --version)"
    else
        echo "‚ùå jq installation failed"
        exit 1
    fi
else
    echo "‚úÖ jq already installed: $(jq --version)"
fi

echo ""

# Step 2: Check if ParishMap.tsx exists
echo "üîç Step 2: Locating ParishMap.tsx..."
if [ ! -f "$COMPONENT_FILE" ]; then
    echo "‚ùå ERROR: $COMPONENT_FILE not found in current directory"
    echo "üí° Current directory: $(pwd)"
    echo "üí° Please ensure ParishMap.tsx is in the directory where you run this script"
    
    # Look for it in common locations
    echo ""
    echo "üîç Searching for ParishMap.tsx..."
    find . -name "ParishMap.tsx" -type f 2>/dev/null | head -5
    echo ""
    exit 1
fi

echo "‚úÖ Found $COMPONENT_FILE"
echo "üìä File size: $(wc -c < $COMPONENT_FILE) bytes"
echo "üìù File lines: $(wc -l < $COMPONENT_FILE) lines"
echo ""

# Step 3: Check server connectivity
echo "üîç Step 3: Checking server connectivity..."
if ! curl -s --connect-timeout 5 "$SERVER_URL/api/status" > /dev/null 2>&1; then
    echo "‚ùå Server not responding at $SERVER_URL"
    echo "üí° Make sure the server is running:"
    echo "   cd server && npm start"
    echo ""
    echo "üí° Or check if it's running on a different port"
    exit 1
fi
echo "‚úÖ Server is responding at $SERVER_URL"
echo ""

# Step 4: Parse component
echo "üîç Step 4: Parsing TSX component..."
echo "Endpoint: $SERVER_URL/api/bigbook/parse-tsx-component"

# Read and escape content for JSON using jq
ESCAPED_CONTENT=$(cat "$COMPONENT_FILE" | jq -Rs .)

# Create JSON payload with proper escaping
PARSE_PAYLOAD=$(jq -n \
    --arg fileName "$COMPONENT_FILE" \
    --argjson content "$ESCAPED_CONTENT" \
    '{fileName: $fileName, content: $content}')

# Make parsing API call
PARSE_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -d "$PARSE_PAYLOAD" \
    "$SERVER_URL/api/bigbook/parse-tsx-component" 2>/dev/null)

# Check parse result
if echo "$PARSE_RESPONSE" | jq -e '.isValid == true' > /dev/null 2>&1; then
    echo "‚úÖ Component parsed successfully"
    
    # Extract details using jq
    COMPONENT_NAME=$(echo "$PARSE_RESPONSE" | jq -r '.componentName // "ParishMap"')
    ROUTE=$(echo "$PARSE_RESPONSE" | jq -r '.route // "/bigbook/parish-map"')
    
    echo "üìã Component details:"
    echo "   ‚Ä¢ Name: $COMPONENT_NAME"
    echo "   ‚Ä¢ Route: $ROUTE"
    
    # Check for warnings
    WARNINGS=$(echo "$PARSE_RESPONSE" | jq -r '.warnings[]? // empty')
    if [ ! -z "$WARNINGS" ]; then
        echo "‚ö†Ô∏è  Warnings:"
        echo "$WARNINGS" | sed 's/^/   ‚Ä¢ /'
    fi
else
    echo "‚ùå Component parsing failed"
    
    # Extract error details
    ERROR_MSG=$(echo "$PARSE_RESPONSE" | jq -r '.error // "Unknown error"')
    echo "   Error: $ERROR_MSG"
    
    # Check for authentication issues
    if echo "$PARSE_RESPONSE" | jq -e '.code == "NO_SESSION"' > /dev/null 2>&1; then
        echo ""
        echo "üîê Authentication Required!"
        echo "üí° Please login to the web interface first:"
        echo "   1. Open browser: https://orthodoxmetrics.com/admin"
        echo "   2. Login as super_admin or editor"
        echo "   3. Keep browser tab open"
        echo "   4. Re-run this script"
        echo ""
    fi
    exit 1
fi

echo ""

# Step 5: Install component
echo "üöÄ Step 5: Installing component with Big Book Auto-Install..."
echo "Endpoint: $SERVER_URL/api/bigbook/install-bigbook-component"

# Create installation payload
INSTALL_PAYLOAD=$(jq -n \
    --arg fileName "$COMPONENT_FILE" \
    --argjson content "$ESCAPED_CONTENT" \
    '{
        fileName: $fileName,
        content: $content,
        installOptions: {
            targetDirectory: "src/components/bigbook/custom",
            registerInRegistry: true,
            bigBookAutoInstall: true
        }
    }')

# Make installation API call
INSTALL_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -d "$INSTALL_PAYLOAD" \
    "$SERVER_URL/api/bigbook/install-bigbook-component" 2>/dev/null)

# Check installation result
if echo "$INSTALL_RESPONSE" | jq -e '.success == true' > /dev/null 2>&1; then
    echo "‚úÖ Installation successful!"
    echo ""
    echo "üéâ Installation Results:"
    echo "========================"
    
    # Extract installation details using jq
    INSTALLED_COMPONENT=$(echo "$INSTALL_RESPONSE" | jq -r '.componentName // "ParishMap"')
    INSTALLED_PATH=$(echo "$INSTALL_RESPONSE" | jq -r '.installedPath // "src/components/bigbook/custom/ParishMap.tsx"')
    INSTALLED_ROUTE=$(echo "$INSTALL_RESPONSE" | jq -r '.route // "/bigbook/parish-map"')
    MENU_UPDATED=$(echo "$INSTALL_RESPONSE" | jq -r '.menuUpdated // false')
    
    echo "‚úÖ Component: $INSTALLED_COMPONENT"
    echo "‚úÖ Installed to: $INSTALLED_PATH"
    echo "‚úÖ Route created: $INSTALLED_ROUTE"
    echo "‚úÖ Registry updated: ‚úÖ"
    
    if [ "$MENU_UPDATED" = "true" ]; then
        echo "‚úÖ Menu item added to Big Book sidebar"
    fi
    
    echo ""
    echo "üåê Access your component at:"
    echo "   https://orthodoxmetrics.com$INSTALLED_ROUTE"
    echo ""
    echo "üìã Look for 'Parish Map' in the Big Book sidebar menu!"
else
    echo "‚ùå Installation failed"
    
    # Extract error details
    ERROR_MSG=$(echo "$INSTALL_RESPONSE" | jq -r '.error // "Unknown error"')
    echo "   Error: $ERROR_MSG"
    
    # Show full response for debugging
    echo ""
    echo "üîç Full response for debugging:"
    echo "$INSTALL_RESPONSE" | jq . 2>/dev/null || echo "$INSTALL_RESPONSE"
    exit 1
fi

echo ""

# Step 6: Verify installation
echo "üîç Step 6: Verifying installation..."
REGISTRY_RESPONSE=$(curl -s "$SERVER_URL/api/bigbook/custom-components-registry" 2>/dev/null)

if echo "$REGISTRY_RESPONSE" | jq -e '.components | has("ParishMap") or has("parish-map")' > /dev/null 2>&1; then
    echo "‚úÖ Component confirmed in registry"
    
    # Count total components
    COMPONENT_COUNT=$(echo "$REGISTRY_RESPONSE" | jq '.components | length')
    echo "üìä Total custom components: $COMPONENT_COUNT"
    
    # Show menu items
    MENU_COUNT=$(echo "$REGISTRY_RESPONSE" | jq '.menu | length')
    if [ "$MENU_COUNT" -gt 0 ]; then
        echo "üìã Menu items: $MENU_COUNT"
        echo "$REGISTRY_RESPONSE" | jq -r '.menu[]? | "   ‚Ä¢ \(.displayName) (\(.route))"'
    fi
else
    echo "‚ö†Ô∏è  Component not found in registry (may still be processing)"
fi

echo ""
echo "üéâ ParishMap Component Installation Complete!"
echo ""
echo "üìù Next Steps:"
echo "‚Ä¢ Refresh your browser if Big Book is open"
echo "‚Ä¢ Look for 'Parish Map' in the Big Book sidebar"
echo "‚Ä¢ Access the component at: https://orthodoxmetrics.com/bigbook/parish-map"
echo "‚Ä¢ Manage it from the Custom Components tab in Big Book"
echo ""
echo "üìã Component Features:"
echo "‚Ä¢ Interactive Orthodox parish map"
echo "‚Ä¢ Leaflet-based mapping with clustering"
echo "‚Ä¢ Parish filtering by jurisdiction, state, diocese, city"
echo "‚Ä¢ Mock data included for demonstration"
echo "‚Ä¢ Responsive design for mobile and desktop"
echo ""
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Installation completed successfully!" 